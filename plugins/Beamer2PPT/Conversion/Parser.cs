// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.4.3
// Machine:  LUKAS-PC
// DateTime: 10.4.2011 12:09:29
// UserName: Lukas
// Input file <D:\Programovani\VS.2010\SimpleConverter\plugins\Beamer2PPT\Conversion\Parser.y - 10.4.2011 11:33:10>

// options: conflicts no-lines diagnose & report gplex conflicts

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using SimpleConverter.Contract;

namespace SimpleConverter.Plugin.Beamer2PPT
{
public enum Tokens {error=126,
    EOF=127,DOCUMENTCLASS=128,USEPACKAGE=129,USETHEME=130,TITLE=131,AUTHOR=132,
    TODAY=133,DATE=134,TITLEPAGE=135,BEGIN_DOCUMENT=136,END_DOCUMENT=137,BEGIN_FRAME=138,
    END_FRAME=139,FRAME=140,FRAMETITLE=141,FRAMESUBTITLE=142,PAUSE=143,BEGIN_ITEMIZE=144,
    END_ITEMIZE=145,BEGIN_ENUMERATE=146,END_ENUMERATE=147,BEGIN_DESCRIPTION=148,END_DESCRIPTION=149,BEGIN_TABULAR=150,
    END_TABULAR=151,SECTION=152,SUBSECTION=153,SUBSUBSECTION=154,OVERLAY=155,OPTIONAL=156,
    TEXTBF=157,TEXTIT=158,TEXTTT=159,TEXTSC=160,NL=161,ENDROW=162,
    COLOR=163,BFSERIES=164,TTFAMILY=165,ITSHAPE=166,SCSHAPE=167,TINY=168,
    SCRIPTSIZE=169,FOOTNOTESIZE=170,SMALL=171,NORMALSIZE=172,LARGE=173,LARGE2=174,
    LARGE3=175,HUGE=176,HUGE2=177,ITEM=178,UNDERLINE=179,AND=180,
    TEXTCOLOR=181,HLINE=182,CLINE=183,MULTICOLUMN=184,GRAPHICSPATH=185,INCLUDEGRAPHICS=186,
    STRING=187};

public struct ValueType
{
    public string Text;
    public Node documentNode;
    public List<Node> nodeList;
    public HashSet<Node> nodeSet;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from D:\Programovani\VS.2010\SimpleConverter\plugins\Beamer2PPT\Conversion\Parser.y - 10.4.2011 11:33:10
    public Node Document { get; private set; }
    public int SlideCount { get; private set; }
    public List<SectionRecord> SectionTable { get; private set; }
    public Dictionary<int, FrametitleRecord> FrametitleTable { get; private set; }
  // End verbatim content from D:\Programovani\VS.2010\SimpleConverter\plugins\Beamer2PPT\Conversion\Parser.y - 10.4.2011 11:33:10

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[92];
  private static State[] states = new State[225];
  private static string[] nonTerms = new string[] {
      "document", "command", "groupcommand", "standalonecommand", "commands", 
      "slide", "titlesettings", "body", "environment", "documentclass", "preambule", 
      "simpleformtext", "slidecontent", "bodycontent", "items_list", "table_rows", 
      "table_cols", "table_line", "path_list", "optional", "overlay", "$accept", 
      "sectionsettings", };

  static Parser() {
    states[0] = new State(new int[]{128,220},new int[]{-1,1,-10,3});
    states[1] = new State(new int[]{127,2});
    states[2] = new State(-1);
    states[3] = new State(-4,new int[]{-11,4});
    states[4] = new State(new int[]{129,6,185,16,136,26,156,53,131,32,132,93,134,97,130,-79},new int[]{-8,5,-20,10,-7,15});
    states[5] = new State(-2);
    states[6] = new State(new int[]{123,7});
    states[7] = new State(new int[]{187,8});
    states[8] = new State(new int[]{125,9});
    states[9] = new State(-5);
    states[10] = new State(new int[]{130,11});
    states[11] = new State(new int[]{123,12});
    states[12] = new State(new int[]{187,13});
    states[13] = new State(new int[]{125,14});
    states[14] = new State(-6);
    states[15] = new State(-7);
    states[16] = new State(new int[]{123,17});
    states[17] = new State(new int[]{123,23},new int[]{-19,18});
    states[18] = new State(new int[]{125,19,123,20});
    states[19] = new State(-8);
    states[20] = new State(new int[]{187,21});
    states[21] = new State(new int[]{125,22});
    states[22] = new State(-10);
    states[23] = new State(new int[]{187,24});
    states[24] = new State(new int[]{125,25});
    states[25] = new State(-9);
    states[26] = new State(-18,new int[]{-14,27});
    states[27] = new State(new int[]{137,28,131,32,132,93,134,97,152,101,153,105,154,109,138,113,140,216},new int[]{-7,29,-23,30,-6,31});
    states[28] = new State(-17);
    states[29] = new State(-19);
    states[30] = new State(-20);
    states[31] = new State(-21);
    states[32] = new State(new int[]{123,33});
    states[33] = new State(-83,new int[]{-12,34});
    states[34] = new State(new int[]{125,35,187,42,161,43,123,44,133,47,143,48,180,49,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87},new int[]{-2,36,-3,40});
    states[35] = new State(-11);
    states[36] = new State(new int[]{123,37});
    states[37] = new State(-83,new int[]{-12,38});
    states[38] = new State(new int[]{125,39,187,42,161,43,123,44,133,47,143,48,180,49,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87},new int[]{-2,36,-3,40});
    states[39] = new State(-84);
    states[40] = new State(-83,new int[]{-12,41});
    states[41] = new State(new int[]{187,42,161,43,123,44,133,47,143,48,180,49,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87,125,-85},new int[]{-2,36,-3,40});
    states[42] = new State(-86);
    states[43] = new State(-87);
    states[44] = new State(-83,new int[]{-12,45});
    states[45] = new State(new int[]{125,46,187,42,161,43,123,44,133,47,143,48,180,49,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87},new int[]{-2,36,-3,40});
    states[46] = new State(-88);
    states[47] = new State(-89);
    states[48] = new State(-90);
    states[49] = new State(-91);
    states[50] = new State(new int[]{155,54,156,-81,123,-81},new int[]{-21,51});
    states[51] = new State(new int[]{156,53,123,-79},new int[]{-20,52});
    states[52] = new State(-53);
    states[53] = new State(-80);
    states[54] = new State(-82);
    states[55] = new State(new int[]{155,54,156,-81,123,-81},new int[]{-21,56});
    states[56] = new State(new int[]{156,53,123,-79},new int[]{-20,57});
    states[57] = new State(-54);
    states[58] = new State(new int[]{155,54,156,-81,123,-81},new int[]{-21,59});
    states[59] = new State(new int[]{156,53,123,-79},new int[]{-20,60});
    states[60] = new State(-55);
    states[61] = new State(new int[]{155,54,156,-81,123,-81},new int[]{-21,62});
    states[62] = new State(new int[]{156,53,123,-79},new int[]{-20,63});
    states[63] = new State(-56);
    states[64] = new State(new int[]{155,54,156,-81,123,-81},new int[]{-21,65});
    states[65] = new State(new int[]{156,53,123,-79},new int[]{-20,66});
    states[66] = new State(-57);
    states[67] = new State(new int[]{155,54,156,-81,123,-81},new int[]{-21,68});
    states[68] = new State(new int[]{156,53,123,-79},new int[]{-20,69});
    states[69] = new State(new int[]{123,70});
    states[70] = new State(new int[]{187,71});
    states[71] = new State(new int[]{125,72});
    states[72] = new State(-58);
    states[73] = new State(-59);
    states[74] = new State(-60);
    states[75] = new State(-61);
    states[76] = new State(-62);
    states[77] = new State(-63);
    states[78] = new State(-64);
    states[79] = new State(-65);
    states[80] = new State(-66);
    states[81] = new State(-67);
    states[82] = new State(-68);
    states[83] = new State(-69);
    states[84] = new State(-70);
    states[85] = new State(-71);
    states[86] = new State(-72);
    states[87] = new State(new int[]{155,54,156,-81,123,-81},new int[]{-21,88});
    states[88] = new State(new int[]{156,53,123,-79},new int[]{-20,89});
    states[89] = new State(new int[]{123,90});
    states[90] = new State(new int[]{187,91});
    states[91] = new State(new int[]{125,92});
    states[92] = new State(-73);
    states[93] = new State(new int[]{123,94});
    states[94] = new State(-83,new int[]{-12,95});
    states[95] = new State(new int[]{125,96,187,42,161,43,123,44,133,47,143,48,180,49,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87},new int[]{-2,36,-3,40});
    states[96] = new State(-12);
    states[97] = new State(new int[]{123,98});
    states[98] = new State(-83,new int[]{-12,99});
    states[99] = new State(new int[]{125,100,187,42,161,43,123,44,133,47,143,48,180,49,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87},new int[]{-2,36,-3,40});
    states[100] = new State(-13);
    states[101] = new State(new int[]{123,102});
    states[102] = new State(-83,new int[]{-12,103});
    states[103] = new State(new int[]{125,104,187,42,161,43,123,44,133,47,143,48,180,49,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87},new int[]{-2,36,-3,40});
    states[104] = new State(-14);
    states[105] = new State(new int[]{123,106});
    states[106] = new State(-83,new int[]{-12,107});
    states[107] = new State(new int[]{125,108,187,42,161,43,123,44,133,47,143,48,180,49,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87},new int[]{-2,36,-3,40});
    states[108] = new State(-15);
    states[109] = new State(new int[]{123,110});
    states[110] = new State(-83,new int[]{-12,111});
    states[111] = new State(new int[]{125,112,187,42,161,43,123,44,133,47,143,48,180,49,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87},new int[]{-2,36,-3,40});
    states[112] = new State(-16);
    states[113] = new State(new int[]{123,206,139,-26,187,-26,152,-26,153,-26,154,-26,144,-26,146,-26,148,-26,150,-26,157,-26,158,-26,159,-26,160,-26,179,-26,181,-26,164,-26,165,-26,166,-26,167,-26,168,-26,169,-26,170,-26,171,-26,172,-26,173,-26,174,-26,175,-26,176,-26,177,-26,163,-26,133,-26,143,-26,141,-26,142,-26,161,-26},new int[]{-13,114});
    states[114] = new State(new int[]{139,115,123,116,187,119,152,101,153,105,154,109,144,123,146,130,148,137,150,140,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87,133,155,143,156,141,157,142,163,161,169},new int[]{-23,120,-9,121,-5,122,-2,148,-3,152,-4,154});
    states[115] = new State(-22);
    states[116] = new State(-26,new int[]{-13,117});
    states[117] = new State(new int[]{125,118,123,116,187,119,152,101,153,105,154,109,144,123,146,130,148,137,150,140,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87,133,155,143,156,141,157,142,163,161,169},new int[]{-23,120,-9,121,-5,122,-2,148,-3,152,-4,154});
    states[118] = new State(-27);
    states[119] = new State(-28);
    states[120] = new State(-29);
    states[121] = new State(-30);
    states[122] = new State(-31);
    states[123] = new State(new int[]{178,133},new int[]{-15,124});
    states[124] = new State(new int[]{145,125,178,126});
    states[125] = new State(-32);
    states[126] = new State(new int[]{155,54,156,-81,123,-81,187,-81,152,-81,153,-81,154,-81,144,-81,146,-81,148,-81,150,-81,157,-81,158,-81,159,-81,160,-81,179,-81,181,-81,164,-81,165,-81,166,-81,167,-81,168,-81,169,-81,170,-81,171,-81,172,-81,173,-81,174,-81,175,-81,176,-81,177,-81,163,-81,133,-81,143,-81,141,-81,142,-81,161,-81,145,-81,178,-81,147,-81,149,-81},new int[]{-21,127});
    states[127] = new State(new int[]{156,53,123,-79,187,-79,152,-79,153,-79,154,-79,144,-79,146,-79,148,-79,150,-79,157,-79,158,-79,159,-79,160,-79,179,-79,181,-79,164,-79,165,-79,166,-79,167,-79,168,-79,169,-79,170,-79,171,-79,172,-79,173,-79,174,-79,175,-79,176,-79,177,-79,163,-79,133,-79,143,-79,141,-79,142,-79,161,-79,145,-79,178,-79,147,-79,149,-79},new int[]{-20,128});
    states[128] = new State(-26,new int[]{-13,129});
    states[129] = new State(new int[]{123,116,187,119,152,101,153,105,154,109,144,123,146,130,148,137,150,140,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87,133,155,143,156,141,157,142,163,161,169,145,-37,178,-37,147,-37,149,-37},new int[]{-23,120,-9,121,-5,122,-2,148,-3,152,-4,154});
    states[130] = new State(new int[]{178,133},new int[]{-15,131});
    states[131] = new State(new int[]{147,132,178,126});
    states[132] = new State(-33);
    states[133] = new State(new int[]{155,54,156,-81,123,-81,187,-81,152,-81,153,-81,154,-81,144,-81,146,-81,148,-81,150,-81,157,-81,158,-81,159,-81,160,-81,179,-81,181,-81,164,-81,165,-81,166,-81,167,-81,168,-81,169,-81,170,-81,171,-81,172,-81,173,-81,174,-81,175,-81,176,-81,177,-81,163,-81,133,-81,143,-81,141,-81,142,-81,161,-81,145,-81,178,-81,147,-81,149,-81},new int[]{-21,134});
    states[134] = new State(new int[]{156,53,123,-79,187,-79,152,-79,153,-79,154,-79,144,-79,146,-79,148,-79,150,-79,157,-79,158,-79,159,-79,160,-79,179,-79,181,-79,164,-79,165,-79,166,-79,167,-79,168,-79,169,-79,170,-79,171,-79,172,-79,173,-79,174,-79,175,-79,176,-79,177,-79,163,-79,133,-79,143,-79,141,-79,142,-79,161,-79,145,-79,178,-79,147,-79,149,-79},new int[]{-20,135});
    states[135] = new State(-26,new int[]{-13,136});
    states[136] = new State(new int[]{123,116,187,119,152,101,153,105,154,109,144,123,146,130,148,137,150,140,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87,133,155,143,156,141,157,142,163,161,169,145,-36,178,-36,147,-36,149,-36},new int[]{-23,120,-9,121,-5,122,-2,148,-3,152,-4,154});
    states[137] = new State(new int[]{178,133},new int[]{-15,138});
    states[138] = new State(new int[]{149,139,178,126});
    states[139] = new State(-34);
    states[140] = new State(new int[]{187,141});
    states[141] = new State(new int[]{184,188,182,198,183,199,123,-26,187,-26,152,-26,153,-26,154,-26,144,-26,146,-26,148,-26,150,-26,157,-26,158,-26,159,-26,160,-26,179,-26,181,-26,164,-26,165,-26,166,-26,167,-26,168,-26,169,-26,170,-26,171,-26,172,-26,173,-26,174,-26,175,-26,176,-26,177,-26,163,-26,133,-26,143,-26,141,-26,142,-26,161,-26,38,-26,151,-26,162,-26},new int[]{-16,142,-17,203,-13,187,-18,204});
    states[142] = new State(new int[]{151,143,162,144});
    states[143] = new State(-35);
    states[144] = new State(new int[]{184,188,182,198,183,199,123,-26,187,-26,152,-26,153,-26,154,-26,144,-26,146,-26,148,-26,150,-26,157,-26,158,-26,159,-26,160,-26,179,-26,181,-26,164,-26,165,-26,166,-26,167,-26,168,-26,169,-26,170,-26,171,-26,172,-26,173,-26,174,-26,175,-26,176,-26,177,-26,163,-26,133,-26,143,-26,141,-26,142,-26,161,-26,38,-26,151,-26,162,-26},new int[]{-17,145,-18,180,-13,187});
    states[145] = new State(new int[]{38,146,151,-40,162,-40});
    states[146] = new State(new int[]{184,170,123,-26,187,-26,152,-26,153,-26,154,-26,144,-26,146,-26,148,-26,150,-26,157,-26,158,-26,159,-26,160,-26,179,-26,181,-26,164,-26,165,-26,166,-26,167,-26,168,-26,169,-26,170,-26,171,-26,172,-26,173,-26,174,-26,175,-26,176,-26,177,-26,163,-26,133,-26,143,-26,141,-26,142,-26,161,-26,38,-26,151,-26,162,-26},new int[]{-13,147});
    states[147] = new State(new int[]{123,116,187,119,152,101,153,105,154,109,144,123,146,130,148,137,150,140,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87,133,155,143,156,141,157,142,163,161,169,38,-48,151,-48,162,-48},new int[]{-23,120,-9,121,-5,122,-2,148,-3,152,-4,154});
    states[148] = new State(new int[]{123,149});
    states[149] = new State(-26,new int[]{-13,150});
    states[150] = new State(new int[]{125,151,123,116,187,119,152,101,153,105,154,109,144,123,146,130,148,137,150,140,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87,133,155,143,156,141,157,142,163,161,169},new int[]{-23,120,-9,121,-5,122,-2,148,-3,152,-4,154});
    states[151] = new State(-50);
    states[152] = new State(-26,new int[]{-13,153});
    states[153] = new State(new int[]{123,116,187,119,152,101,153,105,154,109,144,123,146,130,148,137,150,140,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87,133,155,143,156,141,157,142,163,161,169,139,-51,125,-51,145,-51,178,-51,147,-51,149,-51,38,-51,151,-51,162,-51},new int[]{-23,120,-9,121,-5,122,-2,148,-3,152,-4,154});
    states[154] = new State(-52);
    states[155] = new State(-74);
    states[156] = new State(-75);
    states[157] = new State(new int[]{155,54,156,-81,123,-81},new int[]{-21,158});
    states[158] = new State(new int[]{156,53,123,-79},new int[]{-20,159});
    states[159] = new State(new int[]{123,160});
    states[160] = new State(-83,new int[]{-12,161});
    states[161] = new State(new int[]{125,162,187,42,161,43,123,44,133,47,143,48,180,49,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87},new int[]{-2,36,-3,40});
    states[162] = new State(-76);
    states[163] = new State(new int[]{155,54,156,-81,123,-81},new int[]{-21,164});
    states[164] = new State(new int[]{156,53,123,-79},new int[]{-20,165});
    states[165] = new State(new int[]{123,166});
    states[166] = new State(-83,new int[]{-12,167});
    states[167] = new State(new int[]{125,168,187,42,161,43,123,44,133,47,143,48,180,49,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87},new int[]{-2,36,-3,40});
    states[168] = new State(-77);
    states[169] = new State(-78);
    states[170] = new State(new int[]{123,171});
    states[171] = new State(new int[]{187,172});
    states[172] = new State(new int[]{125,173});
    states[173] = new State(new int[]{123,174});
    states[174] = new State(new int[]{187,175});
    states[175] = new State(new int[]{125,176});
    states[176] = new State(new int[]{123,177});
    states[177] = new State(-26,new int[]{-13,178});
    states[178] = new State(new int[]{125,179,123,116,187,119,152,101,153,105,154,109,144,123,146,130,148,137,150,140,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87,133,155,143,156,141,157,142,163,161,169},new int[]{-23,120,-9,121,-5,122,-2,148,-3,152,-4,154});
    states[179] = new State(-49);
    states[180] = new State(new int[]{182,182,183,183,184,188,123,-26,187,-26,152,-26,153,-26,154,-26,144,-26,146,-26,148,-26,150,-26,157,-26,158,-26,159,-26,160,-26,179,-26,181,-26,164,-26,165,-26,166,-26,167,-26,168,-26,169,-26,170,-26,171,-26,172,-26,173,-26,174,-26,175,-26,176,-26,177,-26,163,-26,133,-26,143,-26,141,-26,142,-26,161,-26,38,-26,151,-26,162,-26},new int[]{-17,181,-13,187});
    states[181] = new State(new int[]{38,146,151,-41,162,-41});
    states[182] = new State(-44);
    states[183] = new State(new int[]{123,184});
    states[184] = new State(new int[]{187,185});
    states[185] = new State(new int[]{125,186});
    states[186] = new State(-45);
    states[187] = new State(new int[]{123,116,187,119,152,101,153,105,154,109,144,123,146,130,148,137,150,140,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87,133,155,143,156,141,157,142,163,161,169,38,-46,151,-46,162,-46},new int[]{-23,120,-9,121,-5,122,-2,148,-3,152,-4,154});
    states[188] = new State(new int[]{123,189});
    states[189] = new State(new int[]{187,190});
    states[190] = new State(new int[]{125,191});
    states[191] = new State(new int[]{123,192});
    states[192] = new State(new int[]{187,193});
    states[193] = new State(new int[]{125,194});
    states[194] = new State(new int[]{123,195});
    states[195] = new State(-26,new int[]{-13,196});
    states[196] = new State(new int[]{125,197,123,116,187,119,152,101,153,105,154,109,144,123,146,130,148,137,150,140,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87,133,155,143,156,141,157,142,163,161,169},new int[]{-23,120,-9,121,-5,122,-2,148,-3,152,-4,154});
    states[197] = new State(-47);
    states[198] = new State(-42);
    states[199] = new State(new int[]{123,200});
    states[200] = new State(new int[]{187,201});
    states[201] = new State(new int[]{125,202});
    states[202] = new State(-43);
    states[203] = new State(new int[]{38,146,151,-38,162,-38});
    states[204] = new State(new int[]{182,182,183,183,184,188,123,-26,187,-26,152,-26,153,-26,154,-26,144,-26,146,-26,148,-26,150,-26,157,-26,158,-26,159,-26,160,-26,179,-26,181,-26,164,-26,165,-26,166,-26,167,-26,168,-26,169,-26,170,-26,171,-26,172,-26,173,-26,174,-26,175,-26,176,-26,177,-26,163,-26,133,-26,143,-26,141,-26,142,-26,161,-26,38,-26,151,-26,162,-26},new int[]{-17,205,-13,187});
    states[205] = new State(new int[]{38,146,151,-39,162,-39});
    states[206] = new State(-83,new int[]{-12,207});
    states[207] = new State(new int[]{125,208,187,42,161,43,123,44,133,47,143,48,180,49,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87},new int[]{-2,36,-3,40});
    states[208] = new State(new int[]{123,211,139,-26,187,-26,152,-26,153,-26,154,-26,144,-26,146,-26,148,-26,150,-26,157,-26,158,-26,159,-26,160,-26,179,-26,181,-26,164,-26,165,-26,166,-26,167,-26,168,-26,169,-26,170,-26,171,-26,172,-26,173,-26,174,-26,175,-26,176,-26,177,-26,163,-26,133,-26,143,-26,141,-26,142,-26,161,-26},new int[]{-13,209});
    states[209] = new State(new int[]{139,210,123,116,187,119,152,101,153,105,154,109,144,123,146,130,148,137,150,140,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87,133,155,143,156,141,157,142,163,161,169},new int[]{-23,120,-9,121,-5,122,-2,148,-3,152,-4,154});
    states[210] = new State(-23);
    states[211] = new State(-83,new int[]{-12,212});
    states[212] = new State(new int[]{125,213,187,42,161,43,123,44,133,47,143,48,180,49,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87},new int[]{-2,36,-3,40});
    states[213] = new State(-26,new int[]{-13,214});
    states[214] = new State(new int[]{139,215,123,116,187,119,152,101,153,105,154,109,144,123,146,130,148,137,150,140,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87,133,155,143,156,141,157,142,163,161,169},new int[]{-23,120,-9,121,-5,122,-2,148,-3,152,-4,154});
    states[215] = new State(-24);
    states[216] = new State(new int[]{123,217});
    states[217] = new State(-26,new int[]{-13,218});
    states[218] = new State(new int[]{125,219,123,116,187,119,152,101,153,105,154,109,144,123,146,130,148,137,150,140,157,50,158,55,159,58,160,61,179,64,181,67,164,73,165,74,166,75,167,76,168,77,169,78,170,79,171,80,172,81,173,82,174,83,175,84,176,85,177,86,163,87,133,155,143,156,141,157,142,163,161,169},new int[]{-23,120,-9,121,-5,122,-2,148,-3,152,-4,154});
    states[219] = new State(-25);
    states[220] = new State(new int[]{156,53,123,-79},new int[]{-20,221});
    states[221] = new State(new int[]{123,222});
    states[222] = new State(new int[]{187,223});
    states[223] = new State(new int[]{125,224});
    states[224] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-22, new int[]{-1,127});
    rules[2] = new Rule(-1, new int[]{-10,-11,-8});
    rules[3] = new Rule(-10, new int[]{128,-20,123,187,125});
    rules[4] = new Rule(-11, new int[]{});
    rules[5] = new Rule(-11, new int[]{-11,129,123,187,125});
    rules[6] = new Rule(-11, new int[]{-11,-20,130,123,187,125});
    rules[7] = new Rule(-11, new int[]{-11,-7});
    rules[8] = new Rule(-11, new int[]{-11,185,123,-19,125});
    rules[9] = new Rule(-19, new int[]{123,187,125});
    rules[10] = new Rule(-19, new int[]{-19,123,187,125});
    rules[11] = new Rule(-7, new int[]{131,123,-12,125});
    rules[12] = new Rule(-7, new int[]{132,123,-12,125});
    rules[13] = new Rule(-7, new int[]{134,123,-12,125});
    rules[14] = new Rule(-23, new int[]{152,123,-12,125});
    rules[15] = new Rule(-23, new int[]{153,123,-12,125});
    rules[16] = new Rule(-23, new int[]{154,123,-12,125});
    rules[17] = new Rule(-8, new int[]{136,-14,137});
    rules[18] = new Rule(-14, new int[]{});
    rules[19] = new Rule(-14, new int[]{-14,-7});
    rules[20] = new Rule(-14, new int[]{-14,-23});
    rules[21] = new Rule(-14, new int[]{-14,-6});
    rules[22] = new Rule(-6, new int[]{138,-13,139});
    rules[23] = new Rule(-6, new int[]{138,123,-12,125,-13,139});
    rules[24] = new Rule(-6, new int[]{138,123,-12,125,123,-12,125,-13,139});
    rules[25] = new Rule(-6, new int[]{140,123,-13,125});
    rules[26] = new Rule(-13, new int[]{});
    rules[27] = new Rule(-13, new int[]{-13,123,-13,125});
    rules[28] = new Rule(-13, new int[]{-13,187});
    rules[29] = new Rule(-13, new int[]{-13,-23});
    rules[30] = new Rule(-13, new int[]{-13,-9});
    rules[31] = new Rule(-13, new int[]{-13,-5});
    rules[32] = new Rule(-9, new int[]{144,-15,145});
    rules[33] = new Rule(-9, new int[]{146,-15,147});
    rules[34] = new Rule(-9, new int[]{148,-15,149});
    rules[35] = new Rule(-9, new int[]{150,187,-16,151});
    rules[36] = new Rule(-15, new int[]{178,-21,-20,-13});
    rules[37] = new Rule(-15, new int[]{-15,178,-21,-20,-13});
    rules[38] = new Rule(-16, new int[]{-17});
    rules[39] = new Rule(-16, new int[]{-18,-17});
    rules[40] = new Rule(-16, new int[]{-16,162,-17});
    rules[41] = new Rule(-16, new int[]{-16,162,-18,-17});
    rules[42] = new Rule(-18, new int[]{182});
    rules[43] = new Rule(-18, new int[]{183,123,187,125});
    rules[44] = new Rule(-18, new int[]{-18,182});
    rules[45] = new Rule(-18, new int[]{-18,183,123,187,125});
    rules[46] = new Rule(-17, new int[]{-13});
    rules[47] = new Rule(-17, new int[]{184,123,187,125,123,187,125,123,-13,125});
    rules[48] = new Rule(-17, new int[]{-17,38,-13});
    rules[49] = new Rule(-17, new int[]{-17,38,184,123,187,125,123,187,125,123,-13,125});
    rules[50] = new Rule(-5, new int[]{-2,123,-13,125});
    rules[51] = new Rule(-5, new int[]{-3,-13});
    rules[52] = new Rule(-5, new int[]{-4});
    rules[53] = new Rule(-2, new int[]{157,-21,-20});
    rules[54] = new Rule(-2, new int[]{158,-21,-20});
    rules[55] = new Rule(-2, new int[]{159,-21,-20});
    rules[56] = new Rule(-2, new int[]{160,-21,-20});
    rules[57] = new Rule(-2, new int[]{179,-21,-20});
    rules[58] = new Rule(-2, new int[]{181,-21,-20,123,187,125});
    rules[59] = new Rule(-3, new int[]{164});
    rules[60] = new Rule(-3, new int[]{165});
    rules[61] = new Rule(-3, new int[]{166});
    rules[62] = new Rule(-3, new int[]{167});
    rules[63] = new Rule(-3, new int[]{168});
    rules[64] = new Rule(-3, new int[]{169});
    rules[65] = new Rule(-3, new int[]{170});
    rules[66] = new Rule(-3, new int[]{171});
    rules[67] = new Rule(-3, new int[]{172});
    rules[68] = new Rule(-3, new int[]{173});
    rules[69] = new Rule(-3, new int[]{174});
    rules[70] = new Rule(-3, new int[]{175});
    rules[71] = new Rule(-3, new int[]{176});
    rules[72] = new Rule(-3, new int[]{177});
    rules[73] = new Rule(-3, new int[]{163,-21,-20,123,187,125});
    rules[74] = new Rule(-4, new int[]{133});
    rules[75] = new Rule(-4, new int[]{143});
    rules[76] = new Rule(-4, new int[]{141,-21,-20,123,-12,125});
    rules[77] = new Rule(-4, new int[]{142,-21,-20,123,-12,125});
    rules[78] = new Rule(-4, new int[]{161});
    rules[79] = new Rule(-20, new int[]{});
    rules[80] = new Rule(-20, new int[]{156});
    rules[81] = new Rule(-21, new int[]{});
    rules[82] = new Rule(-21, new int[]{155});
    rules[83] = new Rule(-12, new int[]{});
    rules[84] = new Rule(-12, new int[]{-12,-2,123,-12,125});
    rules[85] = new Rule(-12, new int[]{-12,-3,-12});
    rules[86] = new Rule(-12, new int[]{-12,187});
    rules[87] = new Rule(-12, new int[]{-12,161});
    rules[88] = new Rule(-12, new int[]{-12,123,-12,125});
    rules[89] = new Rule(-12, new int[]{-12,133});
    rules[90] = new Rule(-12, new int[]{-12,143});
    rules[91] = new Rule(-12, new int[]{-12,180});

    aliasses = new Dictionary<int, string>();
    aliasses.Add(128, "\"\\documentclass\"");
    aliasses.Add(129, "\"\\usepackage\"");
    aliasses.Add(130, "\"\\usetheme\"");
    aliasses.Add(131, "\"\\title\"");
    aliasses.Add(132, "\"\\author\"");
    aliasses.Add(133, "\"\\today\"");
    aliasses.Add(134, "\"\\date\"");
    aliasses.Add(135, "\"\\titlepage\"");
    aliasses.Add(136, "\"\\begin{document}\"");
    aliasses.Add(137, "\"\\end{document}\"");
    aliasses.Add(138, "\"\\begin{frame}\"");
    aliasses.Add(139, "\"\\end{frame}\"");
    aliasses.Add(140, "\"\\frame\"");
    aliasses.Add(141, "\"\\frametitle\"");
    aliasses.Add(142, "\"\\framesubtitle\"");
    aliasses.Add(143, "\"\\pause\"");
    aliasses.Add(144, "\"\\begin{itemize}\"");
    aliasses.Add(145, "\"\\end{itemize}\"");
    aliasses.Add(146, "\"\\begin{enumerate}\"");
    aliasses.Add(147, "\"\\end{enumerate}\"");
    aliasses.Add(148, "\"\\begin{description}\"");
    aliasses.Add(149, "\"\\end{description}\"");
    aliasses.Add(150, "\"\\begin{tabular}\"");
    aliasses.Add(151, "\"\\end{tabular}\"");
    aliasses.Add(152, "\"\\section\"");
    aliasses.Add(153, "\"\\subsection\"");
    aliasses.Add(154, "\"\\subsubsection\"");
    aliasses.Add(155, "\"overlay\x20specification\"");
    aliasses.Add(156, "\"optional\x20parameter\"");
    aliasses.Add(157, "\"\\textbf\"");
    aliasses.Add(158, "\"\\textit\"");
    aliasses.Add(159, "\"\\texttt\"");
    aliasses.Add(160, "\"\\textsc\"");
    aliasses.Add(161, "\"\\\\\x20or\x20\\cr\"");
    aliasses.Add(162, "\"\\\\\x20or\x20\\cr\"");
    aliasses.Add(163, "\"\\color\"");
    aliasses.Add(164, "\"\\bfseries\"");
    aliasses.Add(165, "\"\\ttfamily\"");
    aliasses.Add(166, "\"\\itshape\"");
    aliasses.Add(167, "\"\\scshape\"");
    aliasses.Add(168, "\"\\tiny\"");
    aliasses.Add(169, "\"\\scriptsize\"");
    aliasses.Add(170, "\"\\footnotesize\"");
    aliasses.Add(171, "\"\\small\"");
    aliasses.Add(172, "\"\\normalsize\"");
    aliasses.Add(173, "\"\\large\"");
    aliasses.Add(174, "\"\\Large\"");
    aliasses.Add(175, "\"\\LARGE\"");
    aliasses.Add(176, "\"\\huge\"");
    aliasses.Add(177, "\"\\Huge\"");
    aliasses.Add(178, "\"\\item\"");
    aliasses.Add(179, "\"\\underline\"");
    aliasses.Add(180, "\"\\and\"");
    aliasses.Add(181, "\"\\textcolor\"");
    aliasses.Add(182, "\"\\hline\"");
    aliasses.Add(183, "\"\\cline\"");
    aliasses.Add(184, "\"\\multicolumn\"");
    aliasses.Add(185, "\"\\graphicspath\"");
    aliasses.Add(186, "\"\\includegraphics\"");
    aliasses.Add(187, "\"plain\x20text\"");
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // document -> documentclass, preambule, body
{
                                        Document = ValueStack[ValueStack.Depth-3].documentNode;
                                        Document.Children = new List<Node>();
                                        Document.Children.Add(ValueStack[ValueStack.Depth-2].documentNode);
                                        Document.Children.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                    }
        break;
      case 3: // documentclass -> "\documentclass", optional, '{', "plain text", '}'
{
                                        if(String.Compare(ValueStack[ValueStack.Depth-2].Text, "beamer", false) != 0) {
                                            Messenger.Instance.SendMessage("Invalid document class \"" + ValueStack[ValueStack.Depth-2].Text + "\"", MessageLevel.WARNING);
                                        }
                                        CurrentSemanticValue.documentNode = new Node("document");
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-4].Text;
                                    }
        break;
      case 4: // preambule -> /* empty */
{
                                        CurrentSemanticValue.documentNode = new Node("preambule");
                                        CurrentSemanticValue.documentNode.Children = new List<Node>();
                                    }
        break;
      case 5: // preambule -> preambule, "\usepackage", '{', "plain text", '}'
{   // really need to process??
                                        Node tmp = new Node("package");
                                        tmp.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                        ValueStack[ValueStack.Depth-5].documentNode.Children.Add(tmp);
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-5].documentNode;
                                    }
        break;
      case 6: // preambule -> preambule, optional, "\usetheme", '{', "plain text", '}'
{
                                        Node tmp = new Node("theme");
                                        tmp.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                        tmp.OptionalParams = ValueStack[ValueStack.Depth-5].Text;
                                        ValueStack[ValueStack.Depth-6].documentNode.Children.Add(tmp);
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-6].documentNode;
                                    }
        break;
      case 7: // preambule -> preambule, titlesettings
{
                                        ValueStack[ValueStack.Depth-2].documentNode.Children.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-2].documentNode;
                                    }
        break;
      case 8: // preambule -> preambule, "\graphicspath", '{', path_list, '}'
{
                                        Node tmp = new Node("graphicspath");
                                        tmp.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        ValueStack[ValueStack.Depth-5].documentNode.Children.Add(tmp);
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-5].documentNode;
                                    }
        break;
      case 9: // path_list -> '{', "plain text", '}'
{
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                        Node tmp = new Node("path");
                                        tmp.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                        CurrentSemanticValue.nodeList.Add(tmp);
                                    }
        break;
      case 10: // path_list -> path_list, '{', "plain text", '}'
{
                                        Node tmp = new Node("path");
                                        tmp.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                        ValueStack[ValueStack.Depth-4].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-4].nodeList;
                                    }
        break;
      case 11: // titlesettings -> "\title", '{', simpleformtext, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("title");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 12: // titlesettings -> "\author", '{', simpleformtext, '}'
{ // todo: can contain \and command
                                        CurrentSemanticValue.documentNode = new Node("author");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 13: // titlesettings -> "\date", '{', simpleformtext, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("date");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 14: // sectionsettings -> "\section", '{', simpleformtext, '}'
{
                                        SectionTable.Add(new SectionRecord(SlideCount + 1, ValueStack[ValueStack.Depth-2].nodeList));
                                    }
        break;
      case 15: // sectionsettings -> "\subsection", '{', simpleformtext, '}'
{
                                        SectionTable.Add(new SectionRecord(SlideCount + 1, ValueStack[ValueStack.Depth-2].nodeList, SectionType.SUBSECTION));
                                    }
        break;
      case 16: // sectionsettings -> "\subsubsection", '{', simpleformtext, '}'
{
                                        SectionTable.Add(new SectionRecord(SlideCount + 1, ValueStack[ValueStack.Depth-2].nodeList, SectionType.SUBSUBSECTION));
                                    }
        break;
      case 17: // body -> "\begin{document}", bodycontent, "\end{document}"
{
                                        CurrentSemanticValue.documentNode = new Node("body");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 18: // bodycontent -> /* empty */
{
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                    }
        break;
      case 19: // bodycontent -> bodycontent, titlesettings
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 20: // bodycontent -> bodycontent, sectionsettings
{
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 21: // bodycontent -> bodycontent, slide
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 22: // slide -> "\begin{frame}", slidecontent, "\end{frame}"
{
                                        CurrentSemanticValue.documentNode = new Node("slide");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        SlideCount++;
                                    }
        break;
      case 23: // slide -> "\begin{frame}", '{', simpleformtext, '}', slidecontent, "\end{frame}"
{
                                        CurrentSemanticValue.documentNode = new Node("slide");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        SlideCount++;
                                        SetFrameTitle(SlideCount, ValueStack[ValueStack.Depth-4].nodeList);
                                    }
        break;
      case 24: // slide -> "\begin{frame}", '{', simpleformtext, '}', '{', simpleformtext, '}', 
               //          slidecontent, "\end{frame}"
{
                                        CurrentSemanticValue.documentNode = new Node("slide");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        SlideCount++;
                                        SetFrameTitle(SlideCount, ValueStack[ValueStack.Depth-7].nodeList);
                                        SetFrameSubtitle(SlideCount, ValueStack[ValueStack.Depth-4].nodeList);
                                    }
        break;
      case 25: // slide -> "\frame", '{', slidecontent, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("slide");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        SlideCount++;
                                    }
        break;
      case 26: // slidecontent -> /* empty */
{   /* return List<Node> - create node in specific command; append right side to the left side*/
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                    }
        break;
      case 27: // slidecontent -> slidecontent, '{', slidecontent, '}'
{
                                        Node tmp = new Node("block");
                                        tmp.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        ValueStack[ValueStack.Depth-4].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-4].nodeList;
                                    }
        break;
      case 28: // slidecontent -> slidecontent, "plain text"
{
                                        Node tmp = new Node("string");
                                        tmp.Content = ValueStack[ValueStack.Depth-1].Text as object;
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 29: // slidecontent -> slidecontent, sectionsettings
{
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 30: // slidecontent -> slidecontent, environment
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 31: // slidecontent -> slidecontent, commands
{
                                        if(ValueStack[ValueStack.Depth-1].documentNode != null) {    // need to check because of frametitle and framesubtitle commands
                                            ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        }
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 32: // environment -> "\begin{itemize}", items_list, "\end{itemize}"
{
                                        CurrentSemanticValue.documentNode = new Node("bulletlist");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 33: // environment -> "\begin{enumerate}", items_list, "\end{enumerate}"
{
                                        CurrentSemanticValue.documentNode = new Node("numberedlist");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 34: // environment -> "\begin{description}", items_list, "\end{description}"
{
                                        CurrentSemanticValue.documentNode = new Node("descriptionlist");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 35: // environment -> "\begin{tabular}", "plain text", table_rows, "\end{tabular}"
{
                                        CurrentSemanticValue.documentNode = new Node("table");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        CurrentSemanticValue.documentNode.Content = ValueStack[ValueStack.Depth-3].Text as object;
                                    }
        break;
      case 36: // items_list -> "\item", overlay, optional, slidecontent
{
                                        Node tmp = new Node("item");
                                        tmp.OverlaySpec = ValueStack[ValueStack.Depth-3].Text;
                                        tmp.OptionalParams = ValueStack[ValueStack.Depth-2].Text;
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                        CurrentSemanticValue.nodeList.Add(tmp);
                                    }
        break;
      case 37: // items_list -> items_list, "\item", overlay, optional, slidecontent
{
                                        Node tmp = new Node("item");
                                        tmp.OverlaySpec = ValueStack[ValueStack.Depth-3].Text;
                                        tmp.OptionalParams = ValueStack[ValueStack.Depth-2].Text;
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        ValueStack[ValueStack.Depth-5].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-5].nodeList;
                                    }
        break;
      case 38: // table_rows -> table_cols
{
                                        Node tmp = new Node("tablerow");
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                        CurrentSemanticValue.nodeList.Add(tmp);
                                    }
        break;
      case 39: // table_rows -> table_line, table_cols
{
                                        Node tmp = new Node("tablerow");
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                        CurrentSemanticValue.nodeList.AddRange(ValueStack[ValueStack.Depth-2].nodeSet);
                                        CurrentSemanticValue.nodeList.Add(tmp);
                                    }
        break;
      case 40: // table_rows -> table_rows, "\\ or \cr", table_cols
{
                                        Node tmp = new Node("tablerow");
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        ValueStack[ValueStack.Depth-3].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-3].nodeList;
                                    }
        break;
      case 41: // table_rows -> table_rows, "\\ or \cr", table_line, table_cols
{
                                        Node tmp = new Node("tablerow");
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        ValueStack[ValueStack.Depth-4].nodeList.AddRange(ValueStack[ValueStack.Depth-2].nodeSet);
                                        ValueStack[ValueStack.Depth-4].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-4].nodeList;
                                    }
        break;
      case 42: // table_line -> "\hline"
{
                                        CurrentSemanticValue.nodeSet = new HashSet<Node>();
                                        CurrentSemanticValue.nodeSet.Add(new Node("hline"));
                                    }
        break;
      case 43: // table_line -> "\cline", '{', "plain text", '}'
{
                                        CurrentSemanticValue.nodeSet = new HashSet<Node>();
                                        Node tmp = new Node("cline");
                                        tmp.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                        CurrentSemanticValue.nodeSet.Add(tmp);
                                    }
        break;
      case 44: // table_line -> table_line, "\hline"
{
                                        CurrentSemanticValue.nodeSet.Add(new Node("hline"));
                                    }
        break;
      case 45: // table_line -> table_line, "\cline", '{', "plain text", '}'
{
                                        Node tmp = new Node("cline");
                                        tmp.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                        CurrentSemanticValue.nodeSet.Add(tmp);
                                    }
        break;
      case 46: // table_cols -> slidecontent
{
                                        Node tmp = new Node("tablecolumn");
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                        CurrentSemanticValue.nodeList.Add(tmp);
                                    }
        break;
      case 47: // table_cols -> "\multicolumn", '{', "plain text", '}', '{', "plain text", '}', 
               //               '{', slidecontent, '}'
{
                                        Node tmp = new Node("tablecolumn_merged");
                                        tmp.Content = ValueStack[ValueStack.Depth-8].Text as object;
                                        tmp.OptionalParams = ValueStack[ValueStack.Depth-5].Text;
                                        tmp.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                        CurrentSemanticValue.nodeList.Add(tmp);
                                    }
        break;
      case 48: // table_cols -> table_cols, '&', slidecontent
{
                                        Node tmp = new Node("tablecolumn");
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        ValueStack[ValueStack.Depth-3].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-3].nodeList;
                                    }
        break;
      case 49: // table_cols -> table_cols, '&', "\multicolumn", '{', "plain text", '}', '{', 
               //               "plain text", '}', '{', slidecontent, '}'
{
                                        Node tmp = new Node("tablecolumn_merged");
                                        tmp.Content = ValueStack[ValueStack.Depth-8].Text as object;
                                        tmp.OptionalParams = ValueStack[ValueStack.Depth-5].Text;
                                        tmp.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        ValueStack[ValueStack.Depth-12].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-12].nodeList;
                                    }
        break;
      case 50: // commands -> command, '{', slidecontent, '}'
{
                                        ValueStack[ValueStack.Depth-4].documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-4].documentNode;
                                    }
        break;
      case 51: // commands -> groupcommand, slidecontent
{
                                        ValueStack[ValueStack.Depth-2].documentNode.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-2].documentNode;
                                    }
        break;
      case 52: // commands -> standalonecommand
{  // e.g. \today, \pause, \\
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-1].documentNode;
                                    }
        break;
      case 53: // command -> "\textbf", overlay, optional
{
                                        CurrentSemanticValue.documentNode = new Node("bold");
                                        CurrentSemanticValue.documentNode.OverlaySpec = ValueStack[ValueStack.Depth-2].Text;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-1].Text;
                                    }
        break;
      case 54: // command -> "\textit", overlay, optional
{
                                        CurrentSemanticValue.documentNode = new Node("italic");
                                        CurrentSemanticValue.documentNode.OverlaySpec = ValueStack[ValueStack.Depth-2].Text;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-1].Text;
                                    }
        break;
      case 55: // command -> "\texttt", overlay, optional
{
                                        CurrentSemanticValue.documentNode = new Node("typewriter");
                                        CurrentSemanticValue.documentNode.OverlaySpec = ValueStack[ValueStack.Depth-2].Text;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-1].Text;
                                    }
        break;
      case 56: // command -> "\textsc", overlay, optional
{
                                        CurrentSemanticValue.documentNode = new Node("smallcaps");
                                        CurrentSemanticValue.documentNode.OverlaySpec = ValueStack[ValueStack.Depth-2].Text;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-1].Text;
                                    }
        break;
      case 57: // command -> "\underline", overlay, optional
{ // beamer actually doesn't support this but we do :D
                                        CurrentSemanticValue.documentNode = new Node("underline");
                                        CurrentSemanticValue.documentNode.OverlaySpec = ValueStack[ValueStack.Depth-2].Text;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-1].Text;
                                    }
        break;
      case 58: // command -> "\textcolor", overlay, optional, '{', "plain text", '}'
{
                                        CurrentSemanticValue.documentNode = new Node("color");
                                        CurrentSemanticValue.documentNode.OverlaySpec = ValueStack[ValueStack.Depth-5].Text;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-4].Text;
                                        CurrentSemanticValue.documentNode.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                    }
        break;
      case 59: // groupcommand -> "\bfseries"
{
                                        CurrentSemanticValue.documentNode = new Node("bold");
                                    }
        break;
      case 60: // groupcommand -> "\ttfamily"
{
                                        CurrentSemanticValue.documentNode = new Node("typewriter");
                                    }
        break;
      case 61: // groupcommand -> "\itshape"
{
                                        CurrentSemanticValue.documentNode = new Node("italic");
                                    }
        break;
      case 62: // groupcommand -> "\scshape"
{
                                        CurrentSemanticValue.documentNode = new Node("smallcaps");
                                    }
        break;
      case 63: // groupcommand -> "\tiny"
{
                                        CurrentSemanticValue.documentNode = new Node("tiny");
                                    }
        break;
      case 64: // groupcommand -> "\scriptsize"
{
                                        CurrentSemanticValue.documentNode = new Node("scriptsize");
                                    }
        break;
      case 65: // groupcommand -> "\footnotesize"
{
                                        CurrentSemanticValue.documentNode = new Node("footnotesize");
                                    }
        break;
      case 66: // groupcommand -> "\small"
{
                                        CurrentSemanticValue.documentNode = new Node("small");
                                    }
        break;
      case 67: // groupcommand -> "\normalsize"
{
                                        CurrentSemanticValue.documentNode = new Node("normalsize");
                                    }
        break;
      case 68: // groupcommand -> "\large"
{
                                        CurrentSemanticValue.documentNode = new Node("large");
                                    }
        break;
      case 69: // groupcommand -> "\Large"
{
                                        CurrentSemanticValue.documentNode = new Node("Large");
                                    }
        break;
      case 70: // groupcommand -> "\LARGE"
{
                                        CurrentSemanticValue.documentNode = new Node("LARGE");
                                    }
        break;
      case 71: // groupcommand -> "\huge"
{
                                        CurrentSemanticValue.documentNode = new Node("huge");
                                    }
        break;
      case 72: // groupcommand -> "\Huge"
{
                                        CurrentSemanticValue.documentNode = new Node("Huge");
                                    }
        break;
      case 73: // groupcommand -> "\color", overlay, optional, '{', "plain text", '}'
{
                                        CurrentSemanticValue.documentNode = new Node("color");
                                        CurrentSemanticValue.documentNode.OverlaySpec = ValueStack[ValueStack.Depth-5].Text;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-4].Text;
                                        CurrentSemanticValue.documentNode.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                    }
        break;
      case 74: // standalonecommand -> "\today"
{
                                        CurrentSemanticValue.documentNode = new Node("today");
                                    }
        break;
      case 75: // standalonecommand -> "\pause"
{
                                        CurrentSemanticValue.documentNode = new Node("pause");
                                    }
        break;
      case 76: // standalonecommand -> "\frametitle", overlay, optional, '{', simpleformtext, '}'
{
                                        SetFrameTitle(SlideCount + 1, ValueStack[ValueStack.Depth-2].nodeList, ValueStack[ValueStack.Depth-5].Text);
                                        CurrentSemanticValue.documentNode = null;
                                    }
        break;
      case 77: // standalonecommand -> "\framesubtitle", overlay, optional, '{', simpleformtext, 
               //                      '}'
{
                                        SetFrameSubtitle(SlideCount + 1, ValueStack[ValueStack.Depth-2].nodeList, ValueStack[ValueStack.Depth-5].Text);
                                        CurrentSemanticValue.documentNode = null;
                                    }
        break;
      case 78: // standalonecommand -> "\\ or \cr"
{
                                        CurrentSemanticValue.documentNode = new Node("paragraph");
                                    }
        break;
      case 79: // optional -> /* empty */
{
                                        CurrentSemanticValue.Text = "";
                                    }
        break;
      case 80: // optional -> "optional parameter"
{
                                        CurrentSemanticValue.Text = ValueStack[ValueStack.Depth-1].Text;
                                    }
        break;
      case 81: // overlay -> /* empty */
{
                                        CurrentSemanticValue.Text = "";
                                    }
        break;
      case 82: // overlay -> "overlay specification"
{
                                        CurrentSemanticValue.Text = ValueStack[ValueStack.Depth-1].Text;
                                    }
        break;
      case 83: // simpleformtext -> /* empty */
{
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                    }
        break;
      case 84: // simpleformtext -> simpleformtext, command, '{', simpleformtext, '}'
{
                                        ValueStack[ValueStack.Depth-4].documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        ValueStack[ValueStack.Depth-5].nodeList.Add(ValueStack[ValueStack.Depth-4].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-5].nodeList;
                                    }
        break;
      case 85: // simpleformtext -> simpleformtext, groupcommand, simpleformtext
{
                                        ValueStack[ValueStack.Depth-2].documentNode.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        ValueStack[ValueStack.Depth-3].nodeList.Add(ValueStack[ValueStack.Depth-2].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-3].nodeList;
                                    }
        break;
      case 86: // simpleformtext -> simpleformtext, "plain text"
{
                                        Node tmp = new Node("string");
                                        tmp.Content = ValueStack[ValueStack.Depth-1].Text as object;
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 87: // simpleformtext -> simpleformtext, "\\ or \cr"
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(new Node("paragraph"));
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 88: // simpleformtext -> simpleformtext, '{', simpleformtext, '}'
{
                                        Node tmp = new Node("block");
                                        tmp.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        ValueStack[ValueStack.Depth-4].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-4].nodeList;
                                    }
        break;
      case 89: // simpleformtext -> simpleformtext, "\today"
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(new Node("today"));
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 90: // simpleformtext -> simpleformtext, "\pause"
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(new Node("pause"));
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 91: // simpleformtext -> simpleformtext, "\and"
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(new Node("and"));
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


public Parser(Scanner scn) : base(scn) {
    SlideCount = 0;
    SectionTable = new List<SectionRecord>();
    FrametitleTable = new Dictionary<int, FrametitleRecord>();
}

/// <summary>
/// Set frame title
/// </summary>
/// <param name="slide">Slide number</param>
/// <param name="content">Frame title content</param>
private void SetFrameTitle(int slide, List<Node> content, string overlay = "") {
    if(content == null || content.Count == 0)
        return;
    if(FrametitleTable.ContainsKey(slide)) {    // key exist change value
        FrametitleTable[slide].Title = content;
        FrametitleTable[slide].TitleOverlay = overlay;
    } else {    // key doesn't exist create new record
        FrametitleTable.Add(slide, new FrametitleRecord(content, null));
        FrametitleTable[slide].TitleOverlay = overlay;
    }
}

/// <summary>
/// Set frame subtitle
/// </summary>
/// <param name="slide">Slide number</param>
/// <param name="content">Frame subtitle content</param>
private void SetFrameSubtitle(int slide, List<Node> content, string overlay = "") {
    if(content == null || content.Count == 0)
        return;
    if(FrametitleTable.ContainsKey(slide)) {    // key exist change value
        FrametitleTable[slide].Subtitle = content;
        FrametitleTable[slide].SubtitleOverlay = overlay;
    } else {    // key doesn't exist create new record
        FrametitleTable.Add(slide, new FrametitleRecord(null, content));
        FrametitleTable[slide].SubtitleOverlay = overlay;
    }
}
}
}
