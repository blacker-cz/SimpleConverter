// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.4.5
// Machine:  LUKAS-PC
// DateTime: 16.4.2011 17:31:36
// UserName: Lukas
// Input file <D:\Programovani\VS.2010\SimpleConverter\plugins\Beamer2PPT\Conversion\Parser.y - 16.4.2011 17:31:33>

// options: conflicts no-lines diagnose & report gplex conflicts

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using SimpleConverter.Contract;

namespace SimpleConverter.Plugin.Beamer2PPT
{
public enum Tokens {error=126,
    EOF=127,DOCUMENTCLASS=128,USEPACKAGE=129,USETHEME=130,TITLE=131,AUTHOR=132,
    TODAY=133,DATE=134,TITLEPAGE=135,BEGIN_DOCUMENT=136,END_DOCUMENT=137,BEGIN_FRAME=138,
    END_FRAME=139,FRAME=140,FRAMETITLE=141,FRAMESUBTITLE=142,PAUSE=143,BEGIN_ITEMIZE=144,
    END_ITEMIZE=145,BEGIN_ENUMERATE=146,END_ENUMERATE=147,BEGIN_DESCRIPTION=148,END_DESCRIPTION=149,BEGIN_TABULAR=150,
    END_TABULAR=151,SECTION=152,SUBSECTION=153,SUBSUBSECTION=154,OVERLAY=155,OPTIONAL=156,
    TEXTBF=157,TEXTIT=158,TEXTTT=159,TEXTSC=160,NL=161,ENDROW=162,
    COLOR=163,BFSERIES=164,TTFAMILY=165,ITSHAPE=166,SCSHAPE=167,TINY=168,
    SCRIPTSIZE=169,FOOTNOTESIZE=170,SMALL=171,NORMALSIZE=172,LARGE=173,LARGE2=174,
    LARGE3=175,HUGE=176,HUGE2=177,ITEM=178,UNDERLINE=179,AND=180,
    TEXTCOLOR=181,HLINE=182,CLINE=183,MULTICOLUMN=184,GRAPHICSPATH=185,INCLUDEGRAPHICS=186,
    STRING=187};

public struct ValueType
{
    public string Text;
    public Node documentNode;
    public List<Node> nodeList;
    public HashSet<Node> nodeSet;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from D:\Programovani\VS.2010\SimpleConverter\plugins\Beamer2PPT\Conversion\Parser.y - 16.4.2011 17:31:33
    public Node Document { get; private set; }
    public int SlideCount { get; private set; }
    public List<SectionRecord> SectionTable { get; private set; }
    public Dictionary<int, FrametitleRecord> FrametitleTable { get; private set; }
  // End verbatim content from D:\Programovani\VS.2010\SimpleConverter\plugins\Beamer2PPT\Conversion\Parser.y - 16.4.2011 17:31:33

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[99];
  private static State[] states = new State[237];
  private static string[] nonTerms = new string[] {
      "document", "command", "groupcommand", "standalonecommand", "commands", 
      "slide", "titlesettings", "body", "environment", "documentclass", "preambule", 
      "image", "simpleformtext", "slidecontent", "bodycontent", "items_list", 
      "table_rows", "table_cols", "table_line", "path_list", "optional", "overlay", 
      "$accept", "sectionsettings", };

  static Parser() {
    states[0] = new State(new int[]{128,232},new int[]{-1,1,-10,3});
    states[1] = new State(new int[]{127,2});
    states[2] = new State(-1);
    states[3] = new State(-4,new int[]{-11,4});
    states[4] = new State(new int[]{129,6,185,18,126,28,136,29,156,11,131,37,132,97,134,101,130,-86},new int[]{-8,5,-21,12,-7,17});
    states[5] = new State(-2);
    states[6] = new State(new int[]{156,11,123,-86},new int[]{-21,7});
    states[7] = new State(new int[]{123,8});
    states[8] = new State(new int[]{187,9});
    states[9] = new State(new int[]{125,10});
    states[10] = new State(-5);
    states[11] = new State(-87);
    states[12] = new State(new int[]{130,13});
    states[13] = new State(new int[]{123,14});
    states[14] = new State(new int[]{187,15});
    states[15] = new State(new int[]{125,16});
    states[16] = new State(-6);
    states[17] = new State(-7);
    states[18] = new State(new int[]{123,19});
    states[19] = new State(new int[]{123,25},new int[]{-20,20});
    states[20] = new State(new int[]{125,21,123,22});
    states[21] = new State(-8);
    states[22] = new State(new int[]{187,23});
    states[23] = new State(new int[]{125,24});
    states[24] = new State(-11);
    states[25] = new State(new int[]{187,26});
    states[26] = new State(new int[]{125,27});
    states[27] = new State(-10);
    states[28] = new State(-9);
    states[29] = new State(-19,new int[]{-15,30});
    states[30] = new State(new int[]{137,31,187,35,126,36,131,37,132,97,134,101,152,105,153,109,154,113,138,117,140,228},new int[]{-7,32,-24,33,-6,34});
    states[31] = new State(-18);
    states[32] = new State(-20);
    states[33] = new State(-21);
    states[34] = new State(-22);
    states[35] = new State(-23);
    states[36] = new State(-24);
    states[37] = new State(new int[]{123,38});
    states[38] = new State(-90,new int[]{-13,39});
    states[39] = new State(new int[]{125,40,187,47,161,48,123,49,133,52,143,53,180,54,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91},new int[]{-2,41,-3,45});
    states[40] = new State(-12);
    states[41] = new State(new int[]{123,42});
    states[42] = new State(-90,new int[]{-13,43});
    states[43] = new State(new int[]{125,44,187,47,161,48,123,49,133,52,143,53,180,54,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91},new int[]{-2,41,-3,45});
    states[44] = new State(-91);
    states[45] = new State(-90,new int[]{-13,46});
    states[46] = new State(new int[]{187,47,161,48,123,49,133,52,143,53,180,54,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91,125,-92},new int[]{-2,41,-3,45});
    states[47] = new State(-93);
    states[48] = new State(-94);
    states[49] = new State(-90,new int[]{-13,50});
    states[50] = new State(new int[]{125,51,187,47,161,48,123,49,133,52,143,53,180,54,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91},new int[]{-2,41,-3,45});
    states[51] = new State(-95);
    states[52] = new State(-96);
    states[53] = new State(-97);
    states[54] = new State(-98);
    states[55] = new State(new int[]{155,58,156,-88,123,-88},new int[]{-22,56});
    states[56] = new State(new int[]{156,11,123,-86},new int[]{-21,57});
    states[57] = new State(-60);
    states[58] = new State(-89);
    states[59] = new State(new int[]{155,58,156,-88,123,-88},new int[]{-22,60});
    states[60] = new State(new int[]{156,11,123,-86},new int[]{-21,61});
    states[61] = new State(-61);
    states[62] = new State(new int[]{155,58,156,-88,123,-88},new int[]{-22,63});
    states[63] = new State(new int[]{156,11,123,-86},new int[]{-21,64});
    states[64] = new State(-62);
    states[65] = new State(new int[]{155,58,156,-88,123,-88},new int[]{-22,66});
    states[66] = new State(new int[]{156,11,123,-86},new int[]{-21,67});
    states[67] = new State(-63);
    states[68] = new State(new int[]{155,58,156,-88,123,-88},new int[]{-22,69});
    states[69] = new State(new int[]{156,11,123,-86},new int[]{-21,70});
    states[70] = new State(-64);
    states[71] = new State(new int[]{155,58,156,-88,123,-88},new int[]{-22,72});
    states[72] = new State(new int[]{156,11,123,-86},new int[]{-21,73});
    states[73] = new State(new int[]{123,74});
    states[74] = new State(new int[]{187,75});
    states[75] = new State(new int[]{125,76});
    states[76] = new State(-65);
    states[77] = new State(-66);
    states[78] = new State(-67);
    states[79] = new State(-68);
    states[80] = new State(-69);
    states[81] = new State(-70);
    states[82] = new State(-71);
    states[83] = new State(-72);
    states[84] = new State(-73);
    states[85] = new State(-74);
    states[86] = new State(-75);
    states[87] = new State(-76);
    states[88] = new State(-77);
    states[89] = new State(-78);
    states[90] = new State(-79);
    states[91] = new State(new int[]{155,58,156,-88,123,-88},new int[]{-22,92});
    states[92] = new State(new int[]{156,11,123,-86},new int[]{-21,93});
    states[93] = new State(new int[]{123,94});
    states[94] = new State(new int[]{187,95});
    states[95] = new State(new int[]{125,96});
    states[96] = new State(-80);
    states[97] = new State(new int[]{123,98});
    states[98] = new State(-90,new int[]{-13,99});
    states[99] = new State(new int[]{125,100,187,47,161,48,123,49,133,52,143,53,180,54,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91},new int[]{-2,41,-3,45});
    states[100] = new State(-13);
    states[101] = new State(new int[]{123,102});
    states[102] = new State(-90,new int[]{-13,103});
    states[103] = new State(new int[]{125,104,187,47,161,48,123,49,133,52,143,53,180,54,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91},new int[]{-2,41,-3,45});
    states[104] = new State(-14);
    states[105] = new State(new int[]{123,106});
    states[106] = new State(-90,new int[]{-13,107});
    states[107] = new State(new int[]{125,108,187,47,161,48,123,49,133,52,143,53,180,54,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91},new int[]{-2,41,-3,45});
    states[108] = new State(-15);
    states[109] = new State(new int[]{123,110});
    states[110] = new State(-90,new int[]{-13,111});
    states[111] = new State(new int[]{125,112,187,47,161,48,123,49,133,52,143,53,180,54,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91},new int[]{-2,41,-3,45});
    states[112] = new State(-16);
    states[113] = new State(new int[]{123,114});
    states[114] = new State(-90,new int[]{-13,115});
    states[115] = new State(new int[]{125,116,187,47,161,48,123,49,133,52,143,53,180,54,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91},new int[]{-2,41,-3,45});
    states[116] = new State(-17);
    states[117] = new State(new int[]{123,218,126,181,139,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29},new int[]{-14,118});
    states[118] = new State(new int[]{139,119,123,120,187,123,135,128,152,105,153,109,154,113,144,129,146,136,148,143,150,146,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91,133,161,143,162,141,163,142,169,161,175,186,176},new int[]{-24,124,-9,125,-5,126,-12,127,-2,154,-3,158,-4,160});
    states[119] = new State(-25);
    states[120] = new State(new int[]{126,181,125,-29,123,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29},new int[]{-14,121});
    states[121] = new State(new int[]{125,122,123,120,187,123,135,128,152,105,153,109,154,113,144,129,146,136,148,143,150,146,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91,133,161,143,162,141,163,142,169,161,175,186,176},new int[]{-24,124,-9,125,-5,126,-12,127,-2,154,-3,158,-4,160});
    states[122] = new State(-30);
    states[123] = new State(-31);
    states[124] = new State(-32);
    states[125] = new State(-33);
    states[126] = new State(-34);
    states[127] = new State(-35);
    states[128] = new State(-36);
    states[129] = new State(new int[]{178,139},new int[]{-16,130});
    states[130] = new State(new int[]{145,131,178,132});
    states[131] = new State(-39);
    states[132] = new State(new int[]{155,58,156,-88,126,-88,123,-88,187,-88,135,-88,152,-88,153,-88,154,-88,144,-88,146,-88,148,-88,150,-88,157,-88,158,-88,159,-88,160,-88,179,-88,181,-88,164,-88,165,-88,166,-88,167,-88,168,-88,169,-88,170,-88,171,-88,172,-88,173,-88,174,-88,175,-88,176,-88,177,-88,163,-88,133,-88,143,-88,141,-88,142,-88,161,-88,186,-88,145,-88,178,-88,147,-88,149,-88},new int[]{-22,133});
    states[133] = new State(new int[]{156,11,126,-86,123,-86,187,-86,135,-86,152,-86,153,-86,154,-86,144,-86,146,-86,148,-86,150,-86,157,-86,158,-86,159,-86,160,-86,179,-86,181,-86,164,-86,165,-86,166,-86,167,-86,168,-86,169,-86,170,-86,171,-86,172,-86,173,-86,174,-86,175,-86,176,-86,177,-86,163,-86,133,-86,143,-86,141,-86,142,-86,161,-86,186,-86,145,-86,178,-86,147,-86,149,-86},new int[]{-21,134});
    states[134] = new State(new int[]{126,181,123,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29,145,-29,178,-29,147,-29,149,-29},new int[]{-14,135});
    states[135] = new State(new int[]{123,120,187,123,135,128,152,105,153,109,154,113,144,129,146,136,148,143,150,146,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91,133,161,143,162,141,163,142,169,161,175,186,176,145,-44,178,-44,147,-44,149,-44},new int[]{-24,124,-9,125,-5,126,-12,127,-2,154,-3,158,-4,160});
    states[136] = new State(new int[]{178,139},new int[]{-16,137});
    states[137] = new State(new int[]{147,138,178,132});
    states[138] = new State(-40);
    states[139] = new State(new int[]{155,58,156,-88,126,-88,123,-88,187,-88,135,-88,152,-88,153,-88,154,-88,144,-88,146,-88,148,-88,150,-88,157,-88,158,-88,159,-88,160,-88,179,-88,181,-88,164,-88,165,-88,166,-88,167,-88,168,-88,169,-88,170,-88,171,-88,172,-88,173,-88,174,-88,175,-88,176,-88,177,-88,163,-88,133,-88,143,-88,141,-88,142,-88,161,-88,186,-88,145,-88,178,-88,147,-88,149,-88},new int[]{-22,140});
    states[140] = new State(new int[]{156,11,126,-86,123,-86,187,-86,135,-86,152,-86,153,-86,154,-86,144,-86,146,-86,148,-86,150,-86,157,-86,158,-86,159,-86,160,-86,179,-86,181,-86,164,-86,165,-86,166,-86,167,-86,168,-86,169,-86,170,-86,171,-86,172,-86,173,-86,174,-86,175,-86,176,-86,177,-86,163,-86,133,-86,143,-86,141,-86,142,-86,161,-86,186,-86,145,-86,178,-86,147,-86,149,-86},new int[]{-21,141});
    states[141] = new State(new int[]{126,181,123,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29,145,-29,178,-29,147,-29,149,-29},new int[]{-14,142});
    states[142] = new State(new int[]{123,120,187,123,135,128,152,105,153,109,154,113,144,129,146,136,148,143,150,146,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91,133,161,143,162,141,163,142,169,161,175,186,176,145,-43,178,-43,147,-43,149,-43},new int[]{-24,124,-9,125,-5,126,-12,127,-2,154,-3,158,-4,160});
    states[143] = new State(new int[]{178,139},new int[]{-16,144});
    states[144] = new State(new int[]{149,145,178,132});
    states[145] = new State(-41);
    states[146] = new State(new int[]{187,147});
    states[147] = new State(new int[]{126,181,184,200,182,210,183,211,123,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29,38,-29,151,-29,162,-29},new int[]{-17,148,-18,215,-14,199,-19,216});
    states[148] = new State(new int[]{151,149,162,150});
    states[149] = new State(-42);
    states[150] = new State(new int[]{126,181,184,200,182,210,183,211,123,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29,38,-29,151,-29,162,-29},new int[]{-18,151,-19,192,-14,199});
    states[151] = new State(new int[]{38,152,151,-47,162,-47});
    states[152] = new State(new int[]{184,182,126,181,123,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29,38,-29,151,-29,162,-29},new int[]{-14,153});
    states[153] = new State(new int[]{123,120,187,123,135,128,152,105,153,109,154,113,144,129,146,136,148,143,150,146,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91,133,161,143,162,141,163,142,169,161,175,186,176,38,-55,151,-55,162,-55},new int[]{-24,124,-9,125,-5,126,-12,127,-2,154,-3,158,-4,160});
    states[154] = new State(new int[]{123,155});
    states[155] = new State(new int[]{126,181,125,-29,123,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29},new int[]{-14,156});
    states[156] = new State(new int[]{125,157,123,120,187,123,135,128,152,105,153,109,154,113,144,129,146,136,148,143,150,146,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91,133,161,143,162,141,163,142,169,161,175,186,176},new int[]{-24,124,-9,125,-5,126,-12,127,-2,154,-3,158,-4,160});
    states[157] = new State(-57);
    states[158] = new State(new int[]{126,181,123,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29,139,-29,125,-29,145,-29,178,-29,147,-29,149,-29,38,-29,151,-29,162,-29},new int[]{-14,159});
    states[159] = new State(new int[]{123,120,187,123,135,128,152,105,153,109,154,113,144,129,146,136,148,143,150,146,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91,133,161,143,162,141,163,142,169,161,175,186,176,139,-58,125,-58,145,-58,178,-58,147,-58,149,-58,38,-58,151,-58,162,-58},new int[]{-24,124,-9,125,-5,126,-12,127,-2,154,-3,158,-4,160});
    states[160] = new State(-59);
    states[161] = new State(-81);
    states[162] = new State(-82);
    states[163] = new State(new int[]{155,58,156,-88,123,-88},new int[]{-22,164});
    states[164] = new State(new int[]{156,11,123,-86},new int[]{-21,165});
    states[165] = new State(new int[]{123,166});
    states[166] = new State(-90,new int[]{-13,167});
    states[167] = new State(new int[]{125,168,187,47,161,48,123,49,133,52,143,53,180,54,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91},new int[]{-2,41,-3,45});
    states[168] = new State(-83);
    states[169] = new State(new int[]{155,58,156,-88,123,-88},new int[]{-22,170});
    states[170] = new State(new int[]{156,11,123,-86},new int[]{-21,171});
    states[171] = new State(new int[]{123,172});
    states[172] = new State(-90,new int[]{-13,173});
    states[173] = new State(new int[]{125,174,187,47,161,48,123,49,133,52,143,53,180,54,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91},new int[]{-2,41,-3,45});
    states[174] = new State(-84);
    states[175] = new State(-85);
    states[176] = new State(new int[]{156,11,123,-86},new int[]{-21,177});
    states[177] = new State(new int[]{123,178});
    states[178] = new State(new int[]{187,179});
    states[179] = new State(new int[]{125,180});
    states[180] = new State(-38);
    states[181] = new State(-37);
    states[182] = new State(new int[]{123,183});
    states[183] = new State(new int[]{187,184});
    states[184] = new State(new int[]{125,185});
    states[185] = new State(new int[]{123,186});
    states[186] = new State(new int[]{187,187});
    states[187] = new State(new int[]{125,188});
    states[188] = new State(new int[]{123,189});
    states[189] = new State(new int[]{126,181,125,-29,123,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29},new int[]{-14,190});
    states[190] = new State(new int[]{125,191,123,120,187,123,135,128,152,105,153,109,154,113,144,129,146,136,148,143,150,146,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91,133,161,143,162,141,163,142,169,161,175,186,176},new int[]{-24,124,-9,125,-5,126,-12,127,-2,154,-3,158,-4,160});
    states[191] = new State(-56);
    states[192] = new State(new int[]{182,194,183,195,126,181,184,200,123,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29,38,-29,151,-29,162,-29},new int[]{-18,193,-14,199});
    states[193] = new State(new int[]{38,152,151,-48,162,-48});
    states[194] = new State(-51);
    states[195] = new State(new int[]{123,196});
    states[196] = new State(new int[]{187,197});
    states[197] = new State(new int[]{125,198});
    states[198] = new State(-52);
    states[199] = new State(new int[]{123,120,187,123,135,128,152,105,153,109,154,113,144,129,146,136,148,143,150,146,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91,133,161,143,162,141,163,142,169,161,175,186,176,38,-53,151,-53,162,-53},new int[]{-24,124,-9,125,-5,126,-12,127,-2,154,-3,158,-4,160});
    states[200] = new State(new int[]{123,201});
    states[201] = new State(new int[]{187,202});
    states[202] = new State(new int[]{125,203});
    states[203] = new State(new int[]{123,204});
    states[204] = new State(new int[]{187,205});
    states[205] = new State(new int[]{125,206});
    states[206] = new State(new int[]{123,207});
    states[207] = new State(new int[]{126,181,125,-29,123,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29},new int[]{-14,208});
    states[208] = new State(new int[]{125,209,123,120,187,123,135,128,152,105,153,109,154,113,144,129,146,136,148,143,150,146,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91,133,161,143,162,141,163,142,169,161,175,186,176},new int[]{-24,124,-9,125,-5,126,-12,127,-2,154,-3,158,-4,160});
    states[209] = new State(-54);
    states[210] = new State(-49);
    states[211] = new State(new int[]{123,212});
    states[212] = new State(new int[]{187,213});
    states[213] = new State(new int[]{125,214});
    states[214] = new State(-50);
    states[215] = new State(new int[]{38,152,151,-45,162,-45});
    states[216] = new State(new int[]{182,194,183,195,126,181,184,200,123,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29,38,-29,151,-29,162,-29},new int[]{-18,217,-14,199});
    states[217] = new State(new int[]{38,152,151,-46,162,-46});
    states[218] = new State(-90,new int[]{-13,219});
    states[219] = new State(new int[]{125,220,187,47,161,48,123,49,133,52,143,53,180,54,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91},new int[]{-2,41,-3,45});
    states[220] = new State(new int[]{123,223,126,181,139,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29},new int[]{-14,221});
    states[221] = new State(new int[]{139,222,123,120,187,123,135,128,152,105,153,109,154,113,144,129,146,136,148,143,150,146,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91,133,161,143,162,141,163,142,169,161,175,186,176},new int[]{-24,124,-9,125,-5,126,-12,127,-2,154,-3,158,-4,160});
    states[222] = new State(-26);
    states[223] = new State(-90,new int[]{-13,224});
    states[224] = new State(new int[]{125,225,187,47,161,48,123,49,133,52,143,53,180,54,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91},new int[]{-2,41,-3,45});
    states[225] = new State(new int[]{126,181,139,-29,123,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29},new int[]{-14,226});
    states[226] = new State(new int[]{139,227,123,120,187,123,135,128,152,105,153,109,154,113,144,129,146,136,148,143,150,146,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91,133,161,143,162,141,163,142,169,161,175,186,176},new int[]{-24,124,-9,125,-5,126,-12,127,-2,154,-3,158,-4,160});
    states[227] = new State(-27);
    states[228] = new State(new int[]{123,229});
    states[229] = new State(new int[]{126,181,125,-29,123,-29,187,-29,135,-29,152,-29,153,-29,154,-29,144,-29,146,-29,148,-29,150,-29,157,-29,158,-29,159,-29,160,-29,179,-29,181,-29,164,-29,165,-29,166,-29,167,-29,168,-29,169,-29,170,-29,171,-29,172,-29,173,-29,174,-29,175,-29,176,-29,177,-29,163,-29,133,-29,143,-29,141,-29,142,-29,161,-29,186,-29},new int[]{-14,230});
    states[230] = new State(new int[]{125,231,123,120,187,123,135,128,152,105,153,109,154,113,144,129,146,136,148,143,150,146,157,55,158,59,159,62,160,65,179,68,181,71,164,77,165,78,166,79,167,80,168,81,169,82,170,83,171,84,172,85,173,86,174,87,175,88,176,89,177,90,163,91,133,161,143,162,141,163,142,169,161,175,186,176},new int[]{-24,124,-9,125,-5,126,-12,127,-2,154,-3,158,-4,160});
    states[231] = new State(-28);
    states[232] = new State(new int[]{156,11,123,-86},new int[]{-21,233});
    states[233] = new State(new int[]{123,234});
    states[234] = new State(new int[]{187,235});
    states[235] = new State(new int[]{125,236});
    states[236] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-23, new int[]{-1,127});
    rules[2] = new Rule(-1, new int[]{-10,-11,-8});
    rules[3] = new Rule(-10, new int[]{128,-21,123,187,125});
    rules[4] = new Rule(-11, new int[]{});
    rules[5] = new Rule(-11, new int[]{-11,129,-21,123,187,125});
    rules[6] = new Rule(-11, new int[]{-11,-21,130,123,187,125});
    rules[7] = new Rule(-11, new int[]{-11,-7});
    rules[8] = new Rule(-11, new int[]{-11,185,123,-20,125});
    rules[9] = new Rule(-11, new int[]{-11,126});
    rules[10] = new Rule(-20, new int[]{123,187,125});
    rules[11] = new Rule(-20, new int[]{-20,123,187,125});
    rules[12] = new Rule(-7, new int[]{131,123,-13,125});
    rules[13] = new Rule(-7, new int[]{132,123,-13,125});
    rules[14] = new Rule(-7, new int[]{134,123,-13,125});
    rules[15] = new Rule(-24, new int[]{152,123,-13,125});
    rules[16] = new Rule(-24, new int[]{153,123,-13,125});
    rules[17] = new Rule(-24, new int[]{154,123,-13,125});
    rules[18] = new Rule(-8, new int[]{136,-15,137});
    rules[19] = new Rule(-15, new int[]{});
    rules[20] = new Rule(-15, new int[]{-15,-7});
    rules[21] = new Rule(-15, new int[]{-15,-24});
    rules[22] = new Rule(-15, new int[]{-15,-6});
    rules[23] = new Rule(-15, new int[]{-15,187});
    rules[24] = new Rule(-15, new int[]{-15,126});
    rules[25] = new Rule(-6, new int[]{138,-14,139});
    rules[26] = new Rule(-6, new int[]{138,123,-13,125,-14,139});
    rules[27] = new Rule(-6, new int[]{138,123,-13,125,123,-13,125,-14,139});
    rules[28] = new Rule(-6, new int[]{140,123,-14,125});
    rules[29] = new Rule(-14, new int[]{});
    rules[30] = new Rule(-14, new int[]{-14,123,-14,125});
    rules[31] = new Rule(-14, new int[]{-14,187});
    rules[32] = new Rule(-14, new int[]{-14,-24});
    rules[33] = new Rule(-14, new int[]{-14,-9});
    rules[34] = new Rule(-14, new int[]{-14,-5});
    rules[35] = new Rule(-14, new int[]{-14,-12});
    rules[36] = new Rule(-14, new int[]{-14,135});
    rules[37] = new Rule(-14, new int[]{126});
    rules[38] = new Rule(-12, new int[]{186,-21,123,187,125});
    rules[39] = new Rule(-9, new int[]{144,-16,145});
    rules[40] = new Rule(-9, new int[]{146,-16,147});
    rules[41] = new Rule(-9, new int[]{148,-16,149});
    rules[42] = new Rule(-9, new int[]{150,187,-17,151});
    rules[43] = new Rule(-16, new int[]{178,-22,-21,-14});
    rules[44] = new Rule(-16, new int[]{-16,178,-22,-21,-14});
    rules[45] = new Rule(-17, new int[]{-18});
    rules[46] = new Rule(-17, new int[]{-19,-18});
    rules[47] = new Rule(-17, new int[]{-17,162,-18});
    rules[48] = new Rule(-17, new int[]{-17,162,-19,-18});
    rules[49] = new Rule(-19, new int[]{182});
    rules[50] = new Rule(-19, new int[]{183,123,187,125});
    rules[51] = new Rule(-19, new int[]{-19,182});
    rules[52] = new Rule(-19, new int[]{-19,183,123,187,125});
    rules[53] = new Rule(-18, new int[]{-14});
    rules[54] = new Rule(-18, new int[]{184,123,187,125,123,187,125,123,-14,125});
    rules[55] = new Rule(-18, new int[]{-18,38,-14});
    rules[56] = new Rule(-18, new int[]{-18,38,184,123,187,125,123,187,125,123,-14,125});
    rules[57] = new Rule(-5, new int[]{-2,123,-14,125});
    rules[58] = new Rule(-5, new int[]{-3,-14});
    rules[59] = new Rule(-5, new int[]{-4});
    rules[60] = new Rule(-2, new int[]{157,-22,-21});
    rules[61] = new Rule(-2, new int[]{158,-22,-21});
    rules[62] = new Rule(-2, new int[]{159,-22,-21});
    rules[63] = new Rule(-2, new int[]{160,-22,-21});
    rules[64] = new Rule(-2, new int[]{179,-22,-21});
    rules[65] = new Rule(-2, new int[]{181,-22,-21,123,187,125});
    rules[66] = new Rule(-3, new int[]{164});
    rules[67] = new Rule(-3, new int[]{165});
    rules[68] = new Rule(-3, new int[]{166});
    rules[69] = new Rule(-3, new int[]{167});
    rules[70] = new Rule(-3, new int[]{168});
    rules[71] = new Rule(-3, new int[]{169});
    rules[72] = new Rule(-3, new int[]{170});
    rules[73] = new Rule(-3, new int[]{171});
    rules[74] = new Rule(-3, new int[]{172});
    rules[75] = new Rule(-3, new int[]{173});
    rules[76] = new Rule(-3, new int[]{174});
    rules[77] = new Rule(-3, new int[]{175});
    rules[78] = new Rule(-3, new int[]{176});
    rules[79] = new Rule(-3, new int[]{177});
    rules[80] = new Rule(-3, new int[]{163,-22,-21,123,187,125});
    rules[81] = new Rule(-4, new int[]{133});
    rules[82] = new Rule(-4, new int[]{143});
    rules[83] = new Rule(-4, new int[]{141,-22,-21,123,-13,125});
    rules[84] = new Rule(-4, new int[]{142,-22,-21,123,-13,125});
    rules[85] = new Rule(-4, new int[]{161});
    rules[86] = new Rule(-21, new int[]{});
    rules[87] = new Rule(-21, new int[]{156});
    rules[88] = new Rule(-22, new int[]{});
    rules[89] = new Rule(-22, new int[]{155});
    rules[90] = new Rule(-13, new int[]{});
    rules[91] = new Rule(-13, new int[]{-13,-2,123,-13,125});
    rules[92] = new Rule(-13, new int[]{-13,-3,-13});
    rules[93] = new Rule(-13, new int[]{-13,187});
    rules[94] = new Rule(-13, new int[]{-13,161});
    rules[95] = new Rule(-13, new int[]{-13,123,-13,125});
    rules[96] = new Rule(-13, new int[]{-13,133});
    rules[97] = new Rule(-13, new int[]{-13,143});
    rules[98] = new Rule(-13, new int[]{-13,180});

    aliasses = new Dictionary<int, string>();
    aliasses.Add(128, "\"\\documentclass\"");
    aliasses.Add(129, "\"\\usepackage\"");
    aliasses.Add(130, "\"\\usetheme\"");
    aliasses.Add(131, "\"\\title\"");
    aliasses.Add(132, "\"\\author\"");
    aliasses.Add(133, "\"\\today\"");
    aliasses.Add(134, "\"\\date\"");
    aliasses.Add(135, "\"\\titlepage\"");
    aliasses.Add(136, "\"\\begin{document}\"");
    aliasses.Add(137, "\"\\end{document}\"");
    aliasses.Add(138, "\"\\begin{frame}\"");
    aliasses.Add(139, "\"\\end{frame}\"");
    aliasses.Add(140, "\"\\frame\"");
    aliasses.Add(141, "\"\\frametitle\"");
    aliasses.Add(142, "\"\\framesubtitle\"");
    aliasses.Add(143, "\"\\pause\"");
    aliasses.Add(144, "\"\\begin{itemize}\"");
    aliasses.Add(145, "\"\\end{itemize}\"");
    aliasses.Add(146, "\"\\begin{enumerate}\"");
    aliasses.Add(147, "\"\\end{enumerate}\"");
    aliasses.Add(148, "\"\\begin{description}\"");
    aliasses.Add(149, "\"\\end{description}\"");
    aliasses.Add(150, "\"\\begin{tabular}\"");
    aliasses.Add(151, "\"\\end{tabular}\"");
    aliasses.Add(152, "\"\\section\"");
    aliasses.Add(153, "\"\\subsection\"");
    aliasses.Add(154, "\"\\subsubsection\"");
    aliasses.Add(155, "\"overlay\x20specification\"");
    aliasses.Add(156, "\"optional\x20parameter\"");
    aliasses.Add(157, "\"\\textbf\"");
    aliasses.Add(158, "\"\\textit\"");
    aliasses.Add(159, "\"\\texttt\"");
    aliasses.Add(160, "\"\\textsc\"");
    aliasses.Add(161, "\"\\\\\x20or\x20\\cr\"");
    aliasses.Add(162, "\"\\\\\x20or\x20\\cr\"");
    aliasses.Add(163, "\"\\color\"");
    aliasses.Add(164, "\"\\bfseries\"");
    aliasses.Add(165, "\"\\ttfamily\"");
    aliasses.Add(166, "\"\\itshape\"");
    aliasses.Add(167, "\"\\scshape\"");
    aliasses.Add(168, "\"\\tiny\"");
    aliasses.Add(169, "\"\\scriptsize\"");
    aliasses.Add(170, "\"\\footnotesize\"");
    aliasses.Add(171, "\"\\small\"");
    aliasses.Add(172, "\"\\normalsize\"");
    aliasses.Add(173, "\"\\large\"");
    aliasses.Add(174, "\"\\Large\"");
    aliasses.Add(175, "\"\\LARGE\"");
    aliasses.Add(176, "\"\\huge\"");
    aliasses.Add(177, "\"\\Huge\"");
    aliasses.Add(178, "\"\\item\"");
    aliasses.Add(179, "\"\\underline\"");
    aliasses.Add(180, "\"\\and\"");
    aliasses.Add(181, "\"\\textcolor\"");
    aliasses.Add(182, "\"\\hline\"");
    aliasses.Add(183, "\"\\cline\"");
    aliasses.Add(184, "\"\\multicolumn\"");
    aliasses.Add(185, "\"\\graphicspath\"");
    aliasses.Add(186, "\"\\includegraphics\"");
    aliasses.Add(187, "\"plain\x20text\"");
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // document -> documentclass, preambule, body
{
                                        Document = ValueStack[ValueStack.Depth-3].documentNode;
                                        Document.Children = new List<Node>();
                                        Document.Children.Add(ValueStack[ValueStack.Depth-2].documentNode);
                                        Document.Children.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                    }
        break;
      case 3: // documentclass -> "\documentclass", optional, '{', "plain text", '}'
{
                                        if(String.Compare(ValueStack[ValueStack.Depth-2].Text, "beamer", false) != 0) {
                                            Messenger.Instance.SendMessage("Invalid document class \"" + ValueStack[ValueStack.Depth-2].Text + "\"", MessageLevel.WARNING);
                                        }
                                        CurrentSemanticValue.documentNode = new Node("document");
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-4].Text;
                                    }
        break;
      case 4: // preambule -> /* empty */
{
                                        CurrentSemanticValue.documentNode = new Node("preambule");
                                        CurrentSemanticValue.documentNode.Children = new List<Node>();
                                    }
        break;
      case 5: // preambule -> preambule, "\usepackage", optional, '{', "plain text", '}'
{
                                        Node tmp = new Node("package");
                                        tmp.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                        tmp.OptionalParams = ValueStack[ValueStack.Depth-4].Text;
                                        ValueStack[ValueStack.Depth-6].documentNode.Children.Add(tmp);
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-6].documentNode;
                                    }
        break;
      case 6: // preambule -> preambule, optional, "\usetheme", '{', "plain text", '}'
{
                                        Node tmp = new Node("theme");
                                        tmp.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                        tmp.OptionalParams = ValueStack[ValueStack.Depth-5].Text;
                                        ValueStack[ValueStack.Depth-6].documentNode.Children.Add(tmp);
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-6].documentNode;
                                    }
        break;
      case 7: // preambule -> preambule, titlesettings
{
                                        ValueStack[ValueStack.Depth-2].documentNode.Children.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-2].documentNode;
                                    }
        break;
      case 8: // preambule -> preambule, "\graphicspath", '{', path_list, '}'
{
                                        Node tmp = new Node("graphicspath");
                                        tmp.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        ValueStack[ValueStack.Depth-5].documentNode.Children.Add(tmp);
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-5].documentNode;
                                    }
        break;
      case 9: // preambule -> preambule, error
{   // error recovery in preambule
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-2].documentNode;
                                    }
        break;
      case 10: // path_list -> '{', "plain text", '}'
{
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                        Node tmp = new Node("path");
                                        tmp.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                        CurrentSemanticValue.nodeList.Add(tmp);
                                    }
        break;
      case 11: // path_list -> path_list, '{', "plain text", '}'
{
                                        Node tmp = new Node("path");
                                        tmp.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                        ValueStack[ValueStack.Depth-4].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-4].nodeList;
                                    }
        break;
      case 12: // titlesettings -> "\title", '{', simpleformtext, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("title");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 13: // titlesettings -> "\author", '{', simpleformtext, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("author");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 14: // titlesettings -> "\date", '{', simpleformtext, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("date");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 15: // sectionsettings -> "\section", '{', simpleformtext, '}'
{
                                        SectionTable.Add(new SectionRecord(SlideCount + 1, ValueStack[ValueStack.Depth-2].nodeList));
                                    }
        break;
      case 16: // sectionsettings -> "\subsection", '{', simpleformtext, '}'
{
                                        SectionTable.Add(new SectionRecord(SlideCount + 1, ValueStack[ValueStack.Depth-2].nodeList, SectionType.SUBSECTION));
                                    }
        break;
      case 17: // sectionsettings -> "\subsubsection", '{', simpleformtext, '}'
{
                                        SectionTable.Add(new SectionRecord(SlideCount + 1, ValueStack[ValueStack.Depth-2].nodeList, SectionType.SUBSUBSECTION));
                                    }
        break;
      case 18: // body -> "\begin{document}", bodycontent, "\end{document}"
{
                                        CurrentSemanticValue.documentNode = new Node("body");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 19: // bodycontent -> /* empty */
{
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                    }
        break;
      case 20: // bodycontent -> bodycontent, titlesettings
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 21: // bodycontent -> bodycontent, sectionsettings
{
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 22: // bodycontent -> bodycontent, slide
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 23: // bodycontent -> bodycontent, "plain text"
{
                                        if(ValueStack[ValueStack.Depth-1].Text.Trim().Length != 0)
                                            Messenger.Instance.SendMessage(LocationStack[LocationStack.Depth-1].StartLine + ":" + LocationStack[LocationStack.Depth-1].StartColumn + " - Unexpected 'plain text' - ignoring.", MessageLevel.WARNING);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 24: // bodycontent -> bodycontent, error
{
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 25: // slide -> "\begin{frame}", slidecontent, "\end{frame}"
{
                                        CurrentSemanticValue.documentNode = new Node("slide");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        SlideCount++;
                                    }
        break;
      case 26: // slide -> "\begin{frame}", '{', simpleformtext, '}', slidecontent, "\end{frame}"
{
                                        CurrentSemanticValue.documentNode = new Node("slide");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        SlideCount++;
                                        SetFrameTitle(SlideCount, ValueStack[ValueStack.Depth-4].nodeList);
                                    }
        break;
      case 27: // slide -> "\begin{frame}", '{', simpleformtext, '}', '{', simpleformtext, '}', 
               //          slidecontent, "\end{frame}"
{
                                        CurrentSemanticValue.documentNode = new Node("slide");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        SlideCount++;
                                        SetFrameTitle(SlideCount, ValueStack[ValueStack.Depth-7].nodeList);
                                        SetFrameSubtitle(SlideCount, ValueStack[ValueStack.Depth-4].nodeList);
                                    }
        break;
      case 28: // slide -> "\frame", '{', slidecontent, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("slide");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        SlideCount++;
                                    }
        break;
      case 29: // slidecontent -> /* empty */
{   /* return List<Node> - create node in specific command; append right side to the left side*/
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                    }
        break;
      case 30: // slidecontent -> slidecontent, '{', slidecontent, '}'
{
                                        Node tmp = new Node("block");
                                        tmp.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        ValueStack[ValueStack.Depth-4].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-4].nodeList;
                                    }
        break;
      case 31: // slidecontent -> slidecontent, "plain text"
{
                                        Node tmp = new Node("string");
                                        tmp.Content = ValueStack[ValueStack.Depth-1].Text as object;
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 32: // slidecontent -> slidecontent, sectionsettings
{
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 33: // slidecontent -> slidecontent, environment
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 34: // slidecontent -> slidecontent, commands
{
                                        if(ValueStack[ValueStack.Depth-1].documentNode != null) {    // need to check because of frametitle and framesubtitle commands
                                            ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        }
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 35: // slidecontent -> slidecontent, image
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 36: // slidecontent -> slidecontent, "\titlepage"
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(new Node("titlepage"));
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 37: // slidecontent -> error
{ YYAbort(); }
        break;
      case 38: // image -> "\includegraphics", optional, '{', "plain text", '}'
{
                                        CurrentSemanticValue.documentNode = new Node("image");
                                        CurrentSemanticValue.documentNode.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-4].Text;
                                    }
        break;
      case 39: // environment -> "\begin{itemize}", items_list, "\end{itemize}"
{
                                        CurrentSemanticValue.documentNode = new Node("bulletlist");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 40: // environment -> "\begin{enumerate}", items_list, "\end{enumerate}"
{
                                        CurrentSemanticValue.documentNode = new Node("numberedlist");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 41: // environment -> "\begin{description}", items_list, "\end{description}"
{
                                        CurrentSemanticValue.documentNode = new Node("descriptionlist");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 42: // environment -> "\begin{tabular}", "plain text", table_rows, "\end{tabular}"
{
                                        CurrentSemanticValue.documentNode = new Node("table");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        CurrentSemanticValue.documentNode.Content = ValueStack[ValueStack.Depth-3].Text as object;
                                    }
        break;
      case 43: // items_list -> "\item", overlay, optional, slidecontent
{
                                        Node tmp = new Node("item");
                                        tmp.OverlaySpec = ValueStack[ValueStack.Depth-3].Text;
                                        tmp.OptionalParams = ValueStack[ValueStack.Depth-2].Text;
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                        CurrentSemanticValue.nodeList.Add(tmp);
                                    }
        break;
      case 44: // items_list -> items_list, "\item", overlay, optional, slidecontent
{
                                        Node tmp = new Node("item");
                                        tmp.OverlaySpec = ValueStack[ValueStack.Depth-3].Text;
                                        tmp.OptionalParams = ValueStack[ValueStack.Depth-2].Text;
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        ValueStack[ValueStack.Depth-5].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-5].nodeList;
                                    }
        break;
      case 45: // table_rows -> table_cols
{
                                        Node tmp = new Node("tablerow");
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                        CurrentSemanticValue.nodeList.Add(tmp);
                                    }
        break;
      case 46: // table_rows -> table_line, table_cols
{
                                        Node tmp = new Node("tablerow");
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                        CurrentSemanticValue.nodeList.AddRange(ValueStack[ValueStack.Depth-2].nodeSet);
                                        CurrentSemanticValue.nodeList.Add(tmp);
                                    }
        break;
      case 47: // table_rows -> table_rows, "\\ or \cr", table_cols
{
                                        Node tmp = new Node("tablerow");
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        ValueStack[ValueStack.Depth-3].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-3].nodeList;
                                    }
        break;
      case 48: // table_rows -> table_rows, "\\ or \cr", table_line, table_cols
{
                                        Node tmp = new Node("tablerow");
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        ValueStack[ValueStack.Depth-4].nodeList.AddRange(ValueStack[ValueStack.Depth-2].nodeSet);
                                        ValueStack[ValueStack.Depth-4].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-4].nodeList;
                                    }
        break;
      case 49: // table_line -> "\hline"
{
                                        CurrentSemanticValue.nodeSet = new HashSet<Node>();
                                        CurrentSemanticValue.nodeSet.Add(new Node("hline"));
                                    }
        break;
      case 50: // table_line -> "\cline", '{', "plain text", '}'
{
                                        CurrentSemanticValue.nodeSet = new HashSet<Node>();
                                        Node tmp = new Node("cline");
                                        tmp.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                        CurrentSemanticValue.nodeSet.Add(tmp);
                                    }
        break;
      case 51: // table_line -> table_line, "\hline"
{
                                        CurrentSemanticValue.nodeSet.Add(new Node("hline"));
                                    }
        break;
      case 52: // table_line -> table_line, "\cline", '{', "plain text", '}'
{
                                        Node tmp = new Node("cline");
                                        tmp.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                        CurrentSemanticValue.nodeSet.Add(tmp);
                                    }
        break;
      case 53: // table_cols -> slidecontent
{
                                        Node tmp = new Node("tablecolumn");
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                        CurrentSemanticValue.nodeList.Add(tmp);
                                    }
        break;
      case 54: // table_cols -> "\multicolumn", '{', "plain text", '}', '{', "plain text", '}', 
               //               '{', slidecontent, '}'
{
                                        Node tmp = new Node("tablecolumn_merged");
                                        tmp.Content = ValueStack[ValueStack.Depth-8].Text as object;
                                        tmp.OptionalParams = ValueStack[ValueStack.Depth-5].Text;
                                        tmp.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                        CurrentSemanticValue.nodeList.Add(tmp);
                                    }
        break;
      case 55: // table_cols -> table_cols, '&', slidecontent
{
                                        Node tmp = new Node("tablecolumn");
                                        tmp.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        ValueStack[ValueStack.Depth-3].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-3].nodeList;
                                    }
        break;
      case 56: // table_cols -> table_cols, '&', "\multicolumn", '{', "plain text", '}', '{', 
               //               "plain text", '}', '{', slidecontent, '}'
{
                                        Node tmp = new Node("tablecolumn_merged");
                                        tmp.Content = ValueStack[ValueStack.Depth-8].Text as object;
                                        tmp.OptionalParams = ValueStack[ValueStack.Depth-5].Text;
                                        tmp.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        ValueStack[ValueStack.Depth-12].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-12].nodeList;
                                    }
        break;
      case 57: // commands -> command, '{', slidecontent, '}'
{
                                        ValueStack[ValueStack.Depth-4].documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-4].documentNode;
                                    }
        break;
      case 58: // commands -> groupcommand, slidecontent
{
                                        ValueStack[ValueStack.Depth-2].documentNode.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-2].documentNode;
                                    }
        break;
      case 59: // commands -> standalonecommand
{  // e.g. \today, \pause, \\
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-1].documentNode;
                                    }
        break;
      case 60: // command -> "\textbf", overlay, optional
{
                                        CurrentSemanticValue.documentNode = new Node("bold");
                                        CurrentSemanticValue.documentNode.OverlaySpec = ValueStack[ValueStack.Depth-2].Text;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-1].Text;
                                    }
        break;
      case 61: // command -> "\textit", overlay, optional
{
                                        CurrentSemanticValue.documentNode = new Node("italic");
                                        CurrentSemanticValue.documentNode.OverlaySpec = ValueStack[ValueStack.Depth-2].Text;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-1].Text;
                                    }
        break;
      case 62: // command -> "\texttt", overlay, optional
{
                                        CurrentSemanticValue.documentNode = new Node("typewriter");
                                        CurrentSemanticValue.documentNode.OverlaySpec = ValueStack[ValueStack.Depth-2].Text;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-1].Text;
                                    }
        break;
      case 63: // command -> "\textsc", overlay, optional
{
                                        CurrentSemanticValue.documentNode = new Node("smallcaps");
                                        CurrentSemanticValue.documentNode.OverlaySpec = ValueStack[ValueStack.Depth-2].Text;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-1].Text;
                                    }
        break;
      case 64: // command -> "\underline", overlay, optional
{ // beamer actually does not support this but we do
                                        CurrentSemanticValue.documentNode = new Node("underline");
                                        CurrentSemanticValue.documentNode.OverlaySpec = ValueStack[ValueStack.Depth-2].Text;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-1].Text;
                                    }
        break;
      case 65: // command -> "\textcolor", overlay, optional, '{', "plain text", '}'
{
                                        CurrentSemanticValue.documentNode = new Node("color");
                                        CurrentSemanticValue.documentNode.OverlaySpec = ValueStack[ValueStack.Depth-5].Text;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-4].Text;
                                        CurrentSemanticValue.documentNode.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                    }
        break;
      case 66: // groupcommand -> "\bfseries"
{
                                        CurrentSemanticValue.documentNode = new Node("bold");
                                    }
        break;
      case 67: // groupcommand -> "\ttfamily"
{
                                        CurrentSemanticValue.documentNode = new Node("typewriter");
                                    }
        break;
      case 68: // groupcommand -> "\itshape"
{
                                        CurrentSemanticValue.documentNode = new Node("italic");
                                    }
        break;
      case 69: // groupcommand -> "\scshape"
{
                                        CurrentSemanticValue.documentNode = new Node("smallcaps");
                                    }
        break;
      case 70: // groupcommand -> "\tiny"
{
                                        CurrentSemanticValue.documentNode = new Node("tiny");
                                    }
        break;
      case 71: // groupcommand -> "\scriptsize"
{
                                        CurrentSemanticValue.documentNode = new Node("scriptsize");
                                    }
        break;
      case 72: // groupcommand -> "\footnotesize"
{
                                        CurrentSemanticValue.documentNode = new Node("footnotesize");
                                    }
        break;
      case 73: // groupcommand -> "\small"
{
                                        CurrentSemanticValue.documentNode = new Node("small");
                                    }
        break;
      case 74: // groupcommand -> "\normalsize"
{
                                        CurrentSemanticValue.documentNode = new Node("normalsize");
                                    }
        break;
      case 75: // groupcommand -> "\large"
{
                                        CurrentSemanticValue.documentNode = new Node("large");
                                    }
        break;
      case 76: // groupcommand -> "\Large"
{
                                        CurrentSemanticValue.documentNode = new Node("Large");
                                    }
        break;
      case 77: // groupcommand -> "\LARGE"
{
                                        CurrentSemanticValue.documentNode = new Node("LARGE");
                                    }
        break;
      case 78: // groupcommand -> "\huge"
{
                                        CurrentSemanticValue.documentNode = new Node("huge");
                                    }
        break;
      case 79: // groupcommand -> "\Huge"
{
                                        CurrentSemanticValue.documentNode = new Node("Huge");
                                    }
        break;
      case 80: // groupcommand -> "\color", overlay, optional, '{', "plain text", '}'
{
                                        CurrentSemanticValue.documentNode = new Node("color");
                                        CurrentSemanticValue.documentNode.OverlaySpec = ValueStack[ValueStack.Depth-5].Text;
                                        CurrentSemanticValue.documentNode.OptionalParams = ValueStack[ValueStack.Depth-4].Text;
                                        CurrentSemanticValue.documentNode.Content = ValueStack[ValueStack.Depth-2].Text as object;
                                    }
        break;
      case 81: // standalonecommand -> "\today"
{
                                        CurrentSemanticValue.documentNode = new Node("today");
                                    }
        break;
      case 82: // standalonecommand -> "\pause"
{
                                        CurrentSemanticValue.documentNode = new Node("pause");
                                    }
        break;
      case 83: // standalonecommand -> "\frametitle", overlay, optional, '{', simpleformtext, '}'
{
                                        SetFrameTitle(SlideCount + 1, ValueStack[ValueStack.Depth-2].nodeList, ValueStack[ValueStack.Depth-5].Text);
                                        CurrentSemanticValue.documentNode = null;
                                    }
        break;
      case 84: // standalonecommand -> "\framesubtitle", overlay, optional, '{', simpleformtext, 
               //                      '}'
{
                                        SetFrameSubtitle(SlideCount + 1, ValueStack[ValueStack.Depth-2].nodeList, ValueStack[ValueStack.Depth-5].Text);
                                        CurrentSemanticValue.documentNode = null;
                                    }
        break;
      case 85: // standalonecommand -> "\\ or \cr"
{
                                        CurrentSemanticValue.documentNode = new Node("paragraph");
                                    }
        break;
      case 86: // optional -> /* empty */
{
                                        CurrentSemanticValue.Text = "";
                                    }
        break;
      case 87: // optional -> "optional parameter"
{
                                        CurrentSemanticValue.Text = ValueStack[ValueStack.Depth-1].Text;
                                    }
        break;
      case 88: // overlay -> /* empty */
{
                                        CurrentSemanticValue.Text = "";
                                    }
        break;
      case 89: // overlay -> "overlay specification"
{
                                        CurrentSemanticValue.Text = ValueStack[ValueStack.Depth-1].Text;
                                    }
        break;
      case 90: // simpleformtext -> /* empty */
{
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                    }
        break;
      case 91: // simpleformtext -> simpleformtext, command, '{', simpleformtext, '}'
{
                                        ValueStack[ValueStack.Depth-4].documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        ValueStack[ValueStack.Depth-5].nodeList.Add(ValueStack[ValueStack.Depth-4].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-5].nodeList;
                                    }
        break;
      case 92: // simpleformtext -> simpleformtext, groupcommand, simpleformtext
{
                                        ValueStack[ValueStack.Depth-2].documentNode.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        ValueStack[ValueStack.Depth-3].nodeList.Add(ValueStack[ValueStack.Depth-2].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-3].nodeList;
                                    }
        break;
      case 93: // simpleformtext -> simpleformtext, "plain text"
{
                                        Node tmp = new Node("string");
                                        tmp.Content = ValueStack[ValueStack.Depth-1].Text as object;
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 94: // simpleformtext -> simpleformtext, "\\ or \cr"
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(new Node("paragraph"));
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 95: // simpleformtext -> simpleformtext, '{', simpleformtext, '}'
{
                                        Node tmp = new Node("block");
                                        tmp.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        ValueStack[ValueStack.Depth-4].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-4].nodeList;
                                    }
        break;
      case 96: // simpleformtext -> simpleformtext, "\today"
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(new Node("today"));
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 97: // simpleformtext -> simpleformtext, "\pause"
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(new Node("pause"));
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 98: // simpleformtext -> simpleformtext, "\and"
{
                                        // process \and command as tabulator
                                        Node tmp = new Node("string");
                                        tmp.Content = "\t" as object;
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


public Parser(Scanner scn) : base(scn) {
    SlideCount = 0;
    SectionTable = new List<SectionRecord>();
    FrametitleTable = new Dictionary<int, FrametitleRecord>();
}

/// <summary>
/// Set frame title
/// </summary>
/// <param name="slide">Slide number</param>
/// <param name="content">Frame title content</param>
private void SetFrameTitle(int slide, List<Node> content, string overlay = "") {
    if(content == null || content.Count == 0)
        return;
    if(FrametitleTable.ContainsKey(slide)) {    // key exist change value
        FrametitleTable[slide].Title = content;
        FrametitleTable[slide].TitleOverlay = overlay;
    } else {    // key doesn't exist create new record
        FrametitleTable.Add(slide, new FrametitleRecord(content, null));
        FrametitleTable[slide].TitleOverlay = overlay;
    }
}

/// <summary>
/// Set frame subtitle
/// </summary>
/// <param name="slide">Slide number</param>
/// <param name="content">Frame subtitle content</param>
private void SetFrameSubtitle(int slide, List<Node> content, string overlay = "") {
    if(content == null || content.Count == 0)
        return;
    if(FrametitleTable.ContainsKey(slide)) {    // key exist change value
        FrametitleTable[slide].Subtitle = content;
        FrametitleTable[slide].SubtitleOverlay = overlay;
    } else {    // key doesn't exist create new record
        FrametitleTable.Add(slide, new FrametitleRecord(null, content));
        FrametitleTable[slide].SubtitleOverlay = overlay;
    }
}
}
}
