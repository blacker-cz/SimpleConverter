// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.4.3
// Machine:  LUKAS-PC
// DateTime: 3.3.2011 12:41:42
// UserName: Lukas
// Input file <D:\Programovani\VS.2010\SimpleConverter\plugins\Beamer2PPT\Conversion\Parser.y - 3.3.2011 12:14:03>

// options: conflicts no-lines diagnose & report gplex conflicts

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using SimpleConverter.Contract;

namespace SimpleConverter.Plugin.Beamer2PPT
{
public enum Tokens {error=126,
    EOF=127,DOCUMENTCLASS=128,USEPACKAGE=129,TITLE=130,AUTHOR=131,TODAY=132,
    DATE=133,TITLEPAGE=134,BEGIN_DOCUMENT=135,END_DOCUMENT=136,BEGIN_FRAME=137,END_FRAME=138,
    FRAME=139,FRAMETITLE=140,PAUSE=141,BEGIN_ITEMIZE=142,END_ITEMIZE=143,BEGIN_ENUMERATE=144,
    END_ENUMERATE=145,BEGIN_DESCRIPTION=146,END_DESCRIPTION=147,BEGIN_TABULAR=148,END_TABULAR=149,SECTION=150,
    SUBSECTION=151,SUBSUBSECTION=152,OVERLAY=153,OPTIONAL=154,TEXTBF=155,TEXTIT=156,
    TEXTTT=157,TEXTSC=158,NL=159,ENDROW=160,COLOR=161,BFSERIES=162,
    TTFAMILY=163,ITSHAPE=164,SCSHAPE=165,TINY=166,SCRIPTSIZE=167,FOOTNOTESIZE=168,
    SMALL=169,NORMALSIZE=170,LARGE=171,LARGE2=172,LARGE3=173,HUGE=174,
    HUGE2=175,ITEM=176,STRING=177,HIGH_PRIORITY=178};

public struct ValueType
{
    public string Text;
    public Node documentNode;
    public List<Node> nodeList;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from D:\Programovani\VS.2010\SimpleConverter\plugins\Beamer2PPT\Conversion\Parser.y - 3.3.2011 12:14:03
    public Node Document { get; private set; }
  // End verbatim content from D:\Programovani\VS.2010\SimpleConverter\plugins\Beamer2PPT\Conversion\Parser.y - 3.3.2011 12:14:03

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[69];
  private static State[] states = new State[132];
  private static string[] nonTerms = new string[] {
      "document", "command", "groupcommand", "standalonecommand", "commands", 
      "slide", "titlesettings", "sectionsettings", "body", "simpleformtext", 
      "slidecontent", "bodycontent", "preambule", "$accept", "documentclass", 
      "environment", "items_list", "table_rows", "table_cols", };

  static Parser() {
    states[0] = new State(new int[]{128,128},new int[]{-1,1,-15,3});
    states[1] = new State(new int[]{127,2});
    states[2] = new State(-1);
    states[3] = new State(-4,new int[]{-13,4});
    states[4] = new State(new int[]{129,6,135,11,130,17,131,55,133,59},new int[]{-9,5,-7,10});
    states[5] = new State(-2);
    states[6] = new State(new int[]{123,7});
    states[7] = new State(new int[]{177,8});
    states[8] = new State(new int[]{125,9});
    states[9] = new State(-5);
    states[10] = new State(-6);
    states[11] = new State(-14,new int[]{-12,12});
    states[12] = new State(new int[]{136,13,130,17,131,55,133,59,150,63,151,67,152,71,137,75,139,124},new int[]{-7,14,-8,15,-6,16});
    states[13] = new State(-13);
    states[14] = new State(-15);
    states[15] = new State(-16);
    states[16] = new State(-17);
    states[17] = new State(new int[]{123,18});
    states[18] = new State(-62,new int[]{-10,19});
    states[19] = new State(new int[]{125,20,177,27,159,28,123,29,132,32,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51},new int[]{-2,21,-3,25});
    states[20] = new State(-7);
    states[21] = new State(new int[]{123,22});
    states[22] = new State(-62,new int[]{-10,23});
    states[23] = new State(new int[]{125,24,177,27,159,28,123,29,132,32,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51},new int[]{-2,21,-3,25});
    states[24] = new State(-63);
    states[25] = new State(-62,new int[]{-10,26});
    states[26] = new State(new int[]{177,27,159,28,123,29,132,32,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51,125,-64},new int[]{-2,21,-3,25});
    states[27] = new State(-65);
    states[28] = new State(-66);
    states[29] = new State(-62,new int[]{-10,30});
    states[30] = new State(new int[]{125,31,177,27,159,28,123,29,132,32,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51},new int[]{-2,21,-3,25});
    states[31] = new State(-67);
    states[32] = new State(-68);
    states[33] = new State(-39);
    states[34] = new State(-40);
    states[35] = new State(-41);
    states[36] = new State(-42);
    states[37] = new State(-43);
    states[38] = new State(-44);
    states[39] = new State(-45);
    states[40] = new State(-46);
    states[41] = new State(-47);
    states[42] = new State(-48);
    states[43] = new State(-49);
    states[44] = new State(-50);
    states[45] = new State(-51);
    states[46] = new State(-52);
    states[47] = new State(-53);
    states[48] = new State(-54);
    states[49] = new State(-55);
    states[50] = new State(-56);
    states[51] = new State(new int[]{123,52});
    states[52] = new State(new int[]{177,53});
    states[53] = new State(new int[]{125,54});
    states[54] = new State(-57);
    states[55] = new State(new int[]{123,56});
    states[56] = new State(-62,new int[]{-10,57});
    states[57] = new State(new int[]{125,58,177,27,159,28,123,29,132,32,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51},new int[]{-2,21,-3,25});
    states[58] = new State(-8);
    states[59] = new State(new int[]{123,60});
    states[60] = new State(-62,new int[]{-10,61});
    states[61] = new State(new int[]{125,62,177,27,159,28,123,29,132,32,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51},new int[]{-2,21,-3,25});
    states[62] = new State(-9);
    states[63] = new State(new int[]{123,64});
    states[64] = new State(-62,new int[]{-10,65});
    states[65] = new State(new int[]{125,66,177,27,159,28,123,29,132,32,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51},new int[]{-2,21,-3,25});
    states[66] = new State(-10);
    states[67] = new State(new int[]{123,68});
    states[68] = new State(-62,new int[]{-10,69});
    states[69] = new State(new int[]{125,70,177,27,159,28,123,29,132,32,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51},new int[]{-2,21,-3,25});
    states[70] = new State(-11);
    states[71] = new State(new int[]{123,72});
    states[72] = new State(-62,new int[]{-10,73});
    states[73] = new State(new int[]{125,74,177,27,159,28,123,29,132,32,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51},new int[]{-2,21,-3,25});
    states[74] = new State(-12);
    states[75] = new State(-20,new int[]{-11,76});
    states[76] = new State(new int[]{138,77,123,78,177,81,150,63,151,67,152,71,142,85,144,90,146,95,148,98,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51,132,115,141,116,140,117,159,121},new int[]{-8,82,-16,83,-5,84,-2,108,-3,112,-4,114});
    states[77] = new State(-18);
    states[78] = new State(-20,new int[]{-11,79});
    states[79] = new State(new int[]{125,80,123,78,177,81,150,63,151,67,152,71,142,85,144,90,146,95,148,98,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51,132,115,141,116,140,117,159,121},new int[]{-8,82,-16,83,-5,84,-2,108,-3,112,-4,114});
    states[80] = new State(-21);
    states[81] = new State(-22);
    states[82] = new State(-23);
    states[83] = new State(-24);
    states[84] = new State(-25);
    states[85] = new State(new int[]{176,93},new int[]{-17,86});
    states[86] = new State(new int[]{143,87,176,88});
    states[87] = new State(-26);
    states[88] = new State(-20,new int[]{-11,89});
    states[89] = new State(new int[]{123,78,177,81,150,63,151,67,152,71,142,85,144,90,146,95,148,98,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51,132,115,141,116,140,117,159,121,143,-31,176,-31,145,-31,147,-31},new int[]{-8,82,-16,83,-5,84,-2,108,-3,112,-4,114});
    states[90] = new State(new int[]{176,93},new int[]{-17,91});
    states[91] = new State(new int[]{145,92,176,88});
    states[92] = new State(-27);
    states[93] = new State(-20,new int[]{-11,94});
    states[94] = new State(new int[]{123,78,177,81,150,63,151,67,152,71,142,85,144,90,146,95,148,98,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51,132,115,141,116,140,117,159,121,143,-30,176,-30,145,-30,147,-30},new int[]{-8,82,-16,83,-5,84,-2,108,-3,112,-4,114});
    states[95] = new State(new int[]{176,93},new int[]{-17,96});
    states[96] = new State(new int[]{147,97,176,88});
    states[97] = new State(-28);
    states[98] = new State(new int[]{123,99});
    states[99] = new State(new int[]{177,100});
    states[100] = new State(new int[]{125,101});
    states[101] = new State(-20,new int[]{-18,102,-19,123,-11,122});
    states[102] = new State(new int[]{149,103,160,104});
    states[103] = new State(-29);
    states[104] = new State(-20,new int[]{-19,105,-11,122});
    states[105] = new State(new int[]{38,106,149,-33,160,-33});
    states[106] = new State(-20,new int[]{-11,107});
    states[107] = new State(new int[]{123,78,177,81,150,63,151,67,152,71,142,85,144,90,146,95,148,98,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51,132,115,141,116,140,117,159,121,38,-35,149,-35,160,-35},new int[]{-8,82,-16,83,-5,84,-2,108,-3,112,-4,114});
    states[108] = new State(new int[]{123,109});
    states[109] = new State(-20,new int[]{-11,110});
    states[110] = new State(new int[]{125,111,123,78,177,81,150,63,151,67,152,71,142,85,144,90,146,95,148,98,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51,132,115,141,116,140,117,159,121},new int[]{-8,82,-16,83,-5,84,-2,108,-3,112,-4,114});
    states[111] = new State(-36);
    states[112] = new State(-20,new int[]{-11,113});
    states[113] = new State(new int[]{123,78,177,81,150,63,151,67,152,71,142,85,144,90,146,95,148,98,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51,132,115,141,116,140,117,159,121,138,-37,125,-37,143,-37,176,-37,145,-37,147,-37,38,-37,149,-37,160,-37},new int[]{-8,82,-16,83,-5,84,-2,108,-3,112,-4,114});
    states[114] = new State(-38);
    states[115] = new State(-58);
    states[116] = new State(-59);
    states[117] = new State(new int[]{123,118});
    states[118] = new State(-62,new int[]{-10,119});
    states[119] = new State(new int[]{125,120,177,27,159,28,123,29,132,32,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51},new int[]{-2,21,-3,25});
    states[120] = new State(-60);
    states[121] = new State(-61);
    states[122] = new State(new int[]{123,78,177,81,150,63,151,67,152,71,142,85,144,90,146,95,148,98,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51,132,115,141,116,140,117,159,121,38,-34,149,-34,160,-34},new int[]{-8,82,-16,83,-5,84,-2,108,-3,112,-4,114});
    states[123] = new State(new int[]{38,106,149,-32,160,-32});
    states[124] = new State(new int[]{123,125});
    states[125] = new State(-20,new int[]{-11,126});
    states[126] = new State(new int[]{125,127,123,78,177,81,150,63,151,67,152,71,142,85,144,90,146,95,148,98,155,33,156,34,157,35,158,36,162,37,163,38,164,39,165,40,166,41,167,42,168,43,169,44,170,45,171,46,172,47,173,48,174,49,175,50,161,51,132,115,141,116,140,117,159,121},new int[]{-8,82,-16,83,-5,84,-2,108,-3,112,-4,114});
    states[127] = new State(-19);
    states[128] = new State(new int[]{123,129});
    states[129] = new State(new int[]{177,130});
    states[130] = new State(new int[]{125,131});
    states[131] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-14, new int[]{-1,127});
    rules[2] = new Rule(-1, new int[]{-15,-13,-9});
    rules[3] = new Rule(-15, new int[]{128,123,177,125});
    rules[4] = new Rule(-13, new int[]{});
    rules[5] = new Rule(-13, new int[]{-13,129,123,177,125});
    rules[6] = new Rule(-13, new int[]{-13,-7});
    rules[7] = new Rule(-7, new int[]{130,123,-10,125});
    rules[8] = new Rule(-7, new int[]{131,123,-10,125});
    rules[9] = new Rule(-7, new int[]{133,123,-10,125});
    rules[10] = new Rule(-8, new int[]{150,123,-10,125});
    rules[11] = new Rule(-8, new int[]{151,123,-10,125});
    rules[12] = new Rule(-8, new int[]{152,123,-10,125});
    rules[13] = new Rule(-9, new int[]{135,-12,136});
    rules[14] = new Rule(-12, new int[]{});
    rules[15] = new Rule(-12, new int[]{-12,-7});
    rules[16] = new Rule(-12, new int[]{-12,-8});
    rules[17] = new Rule(-12, new int[]{-12,-6});
    rules[18] = new Rule(-6, new int[]{137,-11,138});
    rules[19] = new Rule(-6, new int[]{139,123,-11,125});
    rules[20] = new Rule(-11, new int[]{});
    rules[21] = new Rule(-11, new int[]{-11,123,-11,125});
    rules[22] = new Rule(-11, new int[]{-11,177});
    rules[23] = new Rule(-11, new int[]{-11,-8});
    rules[24] = new Rule(-11, new int[]{-11,-16});
    rules[25] = new Rule(-11, new int[]{-11,-5});
    rules[26] = new Rule(-16, new int[]{142,-17,143});
    rules[27] = new Rule(-16, new int[]{144,-17,145});
    rules[28] = new Rule(-16, new int[]{146,-17,147});
    rules[29] = new Rule(-16, new int[]{148,123,177,125,-18,149});
    rules[30] = new Rule(-17, new int[]{176,-11});
    rules[31] = new Rule(-17, new int[]{-17,176,-11});
    rules[32] = new Rule(-18, new int[]{-19});
    rules[33] = new Rule(-18, new int[]{-18,160,-19});
    rules[34] = new Rule(-19, new int[]{-11});
    rules[35] = new Rule(-19, new int[]{-19,38,-11});
    rules[36] = new Rule(-5, new int[]{-2,123,-11,125});
    rules[37] = new Rule(-5, new int[]{-3,-11});
    rules[38] = new Rule(-5, new int[]{-4});
    rules[39] = new Rule(-2, new int[]{155});
    rules[40] = new Rule(-2, new int[]{156});
    rules[41] = new Rule(-2, new int[]{157});
    rules[42] = new Rule(-2, new int[]{158});
    rules[43] = new Rule(-3, new int[]{162});
    rules[44] = new Rule(-3, new int[]{163});
    rules[45] = new Rule(-3, new int[]{164});
    rules[46] = new Rule(-3, new int[]{165});
    rules[47] = new Rule(-3, new int[]{166});
    rules[48] = new Rule(-3, new int[]{167});
    rules[49] = new Rule(-3, new int[]{168});
    rules[50] = new Rule(-3, new int[]{169});
    rules[51] = new Rule(-3, new int[]{170});
    rules[52] = new Rule(-3, new int[]{171});
    rules[53] = new Rule(-3, new int[]{172});
    rules[54] = new Rule(-3, new int[]{173});
    rules[55] = new Rule(-3, new int[]{174});
    rules[56] = new Rule(-3, new int[]{175});
    rules[57] = new Rule(-3, new int[]{161,123,177,125});
    rules[58] = new Rule(-4, new int[]{132});
    rules[59] = new Rule(-4, new int[]{141});
    rules[60] = new Rule(-4, new int[]{140,123,-10,125});
    rules[61] = new Rule(-4, new int[]{159});
    rules[62] = new Rule(-10, new int[]{});
    rules[63] = new Rule(-10, new int[]{-10,-2,123,-10,125});
    rules[64] = new Rule(-10, new int[]{-10,-3,-10});
    rules[65] = new Rule(-10, new int[]{-10,177});
    rules[66] = new Rule(-10, new int[]{-10,159});
    rules[67] = new Rule(-10, new int[]{-10,123,-10,125});
    rules[68] = new Rule(-10, new int[]{-10,132});

    aliasses = new Dictionary<int, string>();
    aliasses.Add(128, "\"\\documentclass\"");
    aliasses.Add(129, "\"\\usepackage\"");
    aliasses.Add(130, "\"\\title\"");
    aliasses.Add(131, "\"\\author\"");
    aliasses.Add(132, "\"\\today\"");
    aliasses.Add(133, "\"\\date\"");
    aliasses.Add(134, "\"\\titlepage\"");
    aliasses.Add(135, "\"\\begin{document}\"");
    aliasses.Add(136, "\"\\end{document}\"");
    aliasses.Add(137, "\"\\begin{frame}\"");
    aliasses.Add(138, "\"\\end{frame}\"");
    aliasses.Add(139, "\"\\frame\"");
    aliasses.Add(140, "\"\\frametitle\"");
    aliasses.Add(141, "\"\\pause\"");
    aliasses.Add(142, "\"\\begin{itemize}\"");
    aliasses.Add(143, "\"\\end{itemize}\"");
    aliasses.Add(144, "\"\\begin{enumerate}\"");
    aliasses.Add(145, "\"\\end{enumerate}\"");
    aliasses.Add(146, "\"\\begin{description}\"");
    aliasses.Add(147, "\"\\end{description}\"");
    aliasses.Add(148, "\"\\begin{tabular}\"");
    aliasses.Add(149, "\"\\end{tabular}\"");
    aliasses.Add(150, "\"\\section\"");
    aliasses.Add(151, "\"\\subsection\"");
    aliasses.Add(152, "\"\\subsubsection\"");
    aliasses.Add(153, "\"overlay\x20specification\"");
    aliasses.Add(154, "\"optional\x20parameter\"");
    aliasses.Add(155, "\"\\textbf\"");
    aliasses.Add(156, "\"\\textit\"");
    aliasses.Add(157, "\"\\texttt\"");
    aliasses.Add(158, "\"\\textsc\"");
    aliasses.Add(159, "\"\\\\\x20or\x20\\cr\"");
    aliasses.Add(160, "\"\\\\\x20or\x20\\cr\"");
    aliasses.Add(161, "\"\\color\"");
    aliasses.Add(162, "\"\\bfseries\"");
    aliasses.Add(163, "\"\\ttfamily\"");
    aliasses.Add(164, "\"\\itshape\"");
    aliasses.Add(165, "\"\\scshape\"");
    aliasses.Add(166, "\"\\tiny\"");
    aliasses.Add(167, "\"\\scriptsize\"");
    aliasses.Add(168, "\"\\footnotesize\"");
    aliasses.Add(169, "\"\\small\"");
    aliasses.Add(170, "\"\\normalsize\"");
    aliasses.Add(171, "\"\\large\"");
    aliasses.Add(172, "\"\\Large\"");
    aliasses.Add(173, "\"\\LARGE\"");
    aliasses.Add(174, "\"\\huge\"");
    aliasses.Add(175, "\"\\Huge\"");
    aliasses.Add(176, "\"\\item\"");
    aliasses.Add(177, "\"plain\x20text\"");
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // document -> documentclass, preambule, body
{
                                        Document = new Node("document");
                                        Document.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        Document.Children.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                    }
        break;
      case 3: // documentclass -> "\documentclass", '{', "plain text", '}'
{
                                                        if(String.Compare(ValueStack[ValueStack.Depth-2].Text, "beamer", false) != 0) {
                                                            Messenger.Instance.SendMessage("Invalid document class \"" + ValueStack[ValueStack.Depth-2].Text + "\"", MessageLevel.ERROR);
                                                        }
                                                    }
        break;
      case 4: // preambule -> /* empty */
{
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                    }
        break;
      case 5: // preambule -> preambule, "\usepackage", '{', "plain text", '}'
{   // really need to process??
                                        Node tmp = new Node("package");
                                        tmp.Content = (object) ValueStack[ValueStack.Depth-2].Text;
                                        ValueStack[ValueStack.Depth-5].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-5].nodeList;
                                    }
        break;
      case 6: // preambule -> preambule, titlesettings
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 7: // titlesettings -> "\title", '{', simpleformtext, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("title");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 8: // titlesettings -> "\author", '{', simpleformtext, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("author");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 9: // titlesettings -> "\date", '{', simpleformtext, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("date");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 10: // sectionsettings -> "\section", '{', simpleformtext, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("section");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 11: // sectionsettings -> "\subsection", '{', simpleformtext, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("subsection");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 12: // sectionsettings -> "\subsubsection", '{', simpleformtext, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("subsubsection");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 13: // body -> "\begin{document}", bodycontent, "\end{document}"
{
                                        CurrentSemanticValue.documentNode = new Node("body");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 14: // bodycontent -> /* empty */
{
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                    }
        break;
      case 15: // bodycontent -> bodycontent, titlesettings
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 16: // bodycontent -> bodycontent, sectionsettings
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 17: // bodycontent -> bodycontent, slide
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 18: // slide -> "\begin{frame}", slidecontent, "\end{frame}"
{
                                        CurrentSemanticValue.documentNode = new Node("slide");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 19: // slide -> "\frame", '{', slidecontent, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("slide");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 20: // slidecontent -> /* empty */
{   /* return List<Node> - create node in specific command; append right side to the left side*/
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                    }
        break;
      case 21: // slidecontent -> slidecontent, '{', slidecontent, '}'
{
                                        Node tmp = new Node("block");
                                        tmp.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        ValueStack[ValueStack.Depth-4].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-4].nodeList;
                                    }
        break;
      case 22: // slidecontent -> slidecontent, "plain text"
{
                                        Node tmp = new Node("string");
                                        tmp.Content = (object) ValueStack[ValueStack.Depth-1].Text;
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 23: // slidecontent -> slidecontent, sectionsettings
{    // todo: insert to document, or create elsewhere on stack?
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 25: // slidecontent -> slidecontent, commands
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(ValueStack[ValueStack.Depth-1].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 36: // commands -> command, '{', slidecontent, '}'
{
                                        ValueStack[ValueStack.Depth-4].documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-4].documentNode;
                                    }
        break;
      case 37: // commands -> groupcommand, slidecontent
{  // todo: resolve shift/reduce conflicts (dangling else???)
                                        ValueStack[ValueStack.Depth-2].documentNode.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-2].documentNode;
                                    }
        break;
      case 38: // commands -> standalonecommand
{  // e.g. \today, \pause, \\
                                        CurrentSemanticValue.documentNode = ValueStack[ValueStack.Depth-1].documentNode;
                                    }
        break;
      case 39: // command -> "\textbf"
{
                                        CurrentSemanticValue.documentNode = new Node("bold");
                                    }
        break;
      case 40: // command -> "\textit"
{
                                        CurrentSemanticValue.documentNode = new Node("italic");
                                    }
        break;
      case 41: // command -> "\texttt"
{
                                        CurrentSemanticValue.documentNode = new Node("typewriter");
                                    }
        break;
      case 42: // command -> "\textsc"
{
                                        CurrentSemanticValue.documentNode = new Node("smallcaps");
                                    }
        break;
      case 43: // groupcommand -> "\bfseries"
{
                                        CurrentSemanticValue.documentNode = new Node("bold");
                                    }
        break;
      case 44: // groupcommand -> "\ttfamily"
{
                                        CurrentSemanticValue.documentNode = new Node("typewriter");
                                    }
        break;
      case 45: // groupcommand -> "\itshape"
{
                                        CurrentSemanticValue.documentNode = new Node("italic");
                                    }
        break;
      case 46: // groupcommand -> "\scshape"
{
                                        CurrentSemanticValue.documentNode = new Node("smallcaps");
                                    }
        break;
      case 47: // groupcommand -> "\tiny"
{
                                        CurrentSemanticValue.documentNode = new Node("tiny");
                                    }
        break;
      case 48: // groupcommand -> "\scriptsize"
{
                                        CurrentSemanticValue.documentNode = new Node("scriptsize");
                                    }
        break;
      case 49: // groupcommand -> "\footnotesize"
{
                                        CurrentSemanticValue.documentNode = new Node("footnotesize");
                                    }
        break;
      case 50: // groupcommand -> "\small"
{
                                        CurrentSemanticValue.documentNode = new Node("small");
                                    }
        break;
      case 51: // groupcommand -> "\normalsize"
{
                                        CurrentSemanticValue.documentNode = new Node("normalsize");
                                    }
        break;
      case 52: // groupcommand -> "\large"
{
                                        CurrentSemanticValue.documentNode = new Node("large");
                                    }
        break;
      case 53: // groupcommand -> "\Large"
{
                                        CurrentSemanticValue.documentNode = new Node("Large");
                                    }
        break;
      case 54: // groupcommand -> "\LARGE"
{
                                        CurrentSemanticValue.documentNode = new Node("LARGE");
                                    }
        break;
      case 55: // groupcommand -> "\huge"
{
                                        CurrentSemanticValue.documentNode = new Node("huge");
                                    }
        break;
      case 56: // groupcommand -> "\Huge"
{
                                        CurrentSemanticValue.documentNode = new Node("Huge");
                                    }
        break;
      case 57: // groupcommand -> "\color", '{', "plain text", '}'
{
                                        CurrentSemanticValue.documentNode = new Node("color");
                                    }
        break;
      case 58: // standalonecommand -> "\today"
{
                                        CurrentSemanticValue.documentNode = new Node("today");
                                    }
        break;
      case 59: // standalonecommand -> "\pause"
{
                                        CurrentSemanticValue.documentNode = new Node("pause");
                                    }
        break;
      case 60: // standalonecommand -> "\frametitle", '{', simpleformtext, '}'
{
                                        CurrentSemanticValue.documentNode = new Node("frametitle");
                                        CurrentSemanticValue.documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 61: // standalonecommand -> "\\ or \cr"
{
                                        CurrentSemanticValue.documentNode = new Node("paragraph");
                                    }
        break;
      case 62: // simpleformtext -> /* empty */
{
                                        CurrentSemanticValue.nodeList = new List<Node>();
                                    }
        break;
      case 63: // simpleformtext -> simpleformtext, command, '{', simpleformtext, '}'
{
                                        ValueStack[ValueStack.Depth-4].documentNode.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        ValueStack[ValueStack.Depth-5].nodeList.Add(ValueStack[ValueStack.Depth-4].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-5].nodeList;
                                    }
        break;
      case 64: // simpleformtext -> simpleformtext, groupcommand, simpleformtext
{
                                        ValueStack[ValueStack.Depth-2].documentNode.Children = ValueStack[ValueStack.Depth-1].nodeList;
                                        ValueStack[ValueStack.Depth-3].nodeList.Add(ValueStack[ValueStack.Depth-2].documentNode);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-3].nodeList;
                                    }
        break;
      case 65: // simpleformtext -> simpleformtext, "plain text"
{
                                        Node tmp = new Node("string");
                                        tmp.Content = (object) ValueStack[ValueStack.Depth-1].Text;
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 66: // simpleformtext -> simpleformtext, "\\ or \cr"
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(new Node("paragraph"));
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
      case 67: // simpleformtext -> simpleformtext, '{', simpleformtext, '}'
{
                                        Node tmp = new Node("block");
                                        tmp.Children = ValueStack[ValueStack.Depth-2].nodeList;
                                        ValueStack[ValueStack.Depth-4].nodeList.Add(tmp);
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-4].nodeList;
                                    }
        break;
      case 68: // simpleformtext -> simpleformtext, "\today"
{
                                        ValueStack[ValueStack.Depth-2].nodeList.Add(new Node("today"));
                                        CurrentSemanticValue.nodeList = ValueStack[ValueStack.Depth-2].nodeList;
                                    }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


public Parser(Scanner scn) : base(scn) { }
}
}
