//
//  This CSharp output file generated by Gardens Point LEX
//  Version:  1.1.5.305
//  Machine:  LUKAS-PC
//  DateTime: 13.4.2011 14:51:00
//  UserName: Lukas
//  GPLEX input file <D:\Programovani\VS.2010\SimpleConverter\plugins\Beamer2PPT\Conversion\Scanner.lex - 13.4.2011 14:45:28>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, verbose, parser, minimize
//  Option settings: classes, compressMap, compressNext, persistBuffer, embedbuffers
//  Fallback code page: utf-8
//

//
// Experimental embedded frame
// Version 1.1.4 of 10-May-2010
//
//
#define BACKUP
#define LEFTANCHORS
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using SimpleConverter.Contract;

namespace SimpleConverter.Plugin.Beamer2PPT
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     public abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     public sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     public sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 357;
        const int initial = 358;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int str = 1;
        const int overlay = 2;
        const int optional = 3;
        const int pre_overlay = 4;
        const int pre_optional = 5;
        const int tabular_arg = 6;
        const int boverlay = 7;
        const int boptional = 8;
        const int bpre_overlay = 9;
        const int bpre_optional = 10;

#region user code
bool tabular = false;
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {358, 299, 322, 325, 499, 500, 
        338, 342, 345, 501, 502, 0};

   static int[] anchorState = new int[] {359, 299, 322, 325, 499, 500, 
        338, 342, 345, 501, 502, 0};

#region TwoLevelCharacterMap
    //
    // There are 51 equivalence classes
    // There are 256 character sequence regions
    // There are 47 tables, 12032 entries
    //
    static sbyte[] mLo0 = new sbyte[256] {
/*     '\0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 21, 23, 45, 45, 22, 44, 44, 
/*   '\x10' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/*   '\x20' */ 37, 44, 44, 46, 47, 39, 38, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/*      '0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 40, 44, 0, 44, 
/*      '@' */ 44, 30, 50, 50, 50, 33, 50, 32, 34, 50, 50, 50, 29, 50, 50, 50, 
/*      'P' */ 50, 50, 31, 50, 35, 50, 50, 50, 36, 50, 50, 42, 1, 41, 43, 48, 
/*      '`' */ 44, 11, 20, 4, 2, 7, 26, 15, 17, 16, 50, 14, 10, 6, 8, 3, 
/*      'p' */ 13, 50, 18, 12, 9, 5, 50, 50, 28, 19, 27, 24, 44, 25, 49, 44, 
/*   '\x80' */ 44, 44, 44, 44, 44, 45, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/*   '\x90' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/*   '\xA0' */ 45, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 44, 44, 44, 44, 44, 
/*   '\xB0' */ 44, 44, 44, 44, 44, 50, 44, 44, 44, 44, 50, 44, 44, 44, 44, 44, 
/*   '\xC0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/*   '\xD0' */ 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 
/*   '\xE0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/*   '\xF0' */ 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50 };
    static sbyte[] mLo1 = new sbyte[256] {
/* '\u0100' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0110' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0120' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0130' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0140' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0150' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0160' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0170' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0180' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0190' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u01A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u01B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u01C0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u01D0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u01E0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u01F0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50 };
    static sbyte[] mLo2 = new sbyte[256] {
/* '\u0200' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0210' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0220' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0230' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0240' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0250' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0260' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0270' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0280' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0290' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u02A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u02B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u02C0' */ 50, 50, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u02D0' */ 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u02E0' */ 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 44, 
/* '\u02F0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo3 = new sbyte[256] {
/* '\u0300' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0310' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0320' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0330' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0340' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0350' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0360' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0370' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 50, 50, 50, 44, 44, 
/* '\u0380' */ 44, 44, 44, 44, 44, 44, 50, 44, 50, 50, 50, 44, 50, 44, 50, 50, 
/* '\u0390' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u03A0' */ 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u03B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u03C0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 
/* '\u03D0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u03E0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u03F0' */ 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50 };
    static sbyte[] mLo4 = new sbyte[256] {
/* '\u0400' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0410' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0420' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0430' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0440' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0450' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0460' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0470' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0480' */ 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 
/* '\u0490' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u04A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u04B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u04C0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u04D0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u04E0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u04F0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50 };
    static sbyte[] mLo5 = new sbyte[256] {
/* '\u0500' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0510' */ 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0520' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0530' */ 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0540' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0550' */ 50, 50, 50, 50, 50, 50, 50, 44, 44, 50, 44, 44, 44, 44, 44, 44, 
/* '\u0560' */ 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0570' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0580' */ 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0590' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u05A0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u05B0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u05C0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u05D0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u05E0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 
/* '\u05F0' */ 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo6 = new sbyte[256] {
/* '\u0600' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0610' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0620' */ 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0630' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 
/* '\u0640' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 
/* '\u0650' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0660' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 50, 
/* '\u0670' */ 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0680' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0690' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u06A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u06B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u06C0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u06D0' */ 50, 50, 50, 50, 44, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u06E0' */ 44, 44, 44, 44, 44, 50, 50, 44, 44, 44, 44, 44, 44, 44, 50, 50, 
/* '\u06F0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 50, 50, 44, 44, 50 };
    static sbyte[] mLo7 = new sbyte[256] {
/* '\u0700' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0710' */ 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0720' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0730' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0740' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 50, 50, 
/* '\u0750' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0760' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 
/* '\u0770' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0780' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0790' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u07A0' */ 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u07B0' */ 44, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u07C0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 
/* '\u07D0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u07E0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 
/* '\u07F0' */ 44, 44, 44, 44, 50, 50, 44, 44, 44, 44, 50, 44, 44, 44, 44, 44 };
    static sbyte[] mLo8 = new sbyte[256] {
/* '\u0800' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0810' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0820' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0830' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0840' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0850' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0860' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0870' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0880' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0890' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u08A0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u08B0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u08C0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u08D0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u08E0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u08F0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo9 = new sbyte[256] {
/* '\u0900' */ 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0910' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0920' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0930' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 50, 44, 44, 
/* '\u0940' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0950' */ 50, 44, 44, 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0960' */ 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0970' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 
/* '\u0980' */ 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 50, 
/* '\u0990' */ 50, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u09A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 
/* '\u09B0' */ 50, 44, 50, 44, 44, 44, 50, 50, 50, 50, 44, 44, 44, 50, 44, 44, 
/* '\u09C0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 44, 
/* '\u09D0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 50, 44, 50, 
/* '\u09E0' */ 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u09F0' */ 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo10 = new sbyte[256] {
/* '\u0A00' */ 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 50, 
/* '\u0A10' */ 50, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0A20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 
/* '\u0A30' */ 50, 44, 50, 50, 44, 50, 50, 44, 50, 50, 44, 44, 44, 44, 44, 44, 
/* '\u0A40' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0A50' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 50, 50, 50, 44, 50, 44, 
/* '\u0A60' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0A70' */ 44, 44, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0A80' */ 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 
/* '\u0A90' */ 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0AA0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 
/* '\u0AB0' */ 50, 44, 50, 50, 44, 50, 50, 50, 50, 50, 44, 44, 44, 50, 44, 44, 
/* '\u0AC0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0AD0' */ 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0AE0' */ 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0AF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo11 = new sbyte[256] {
/* '\u0B00' */ 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 50, 
/* '\u0B10' */ 50, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0B20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 
/* '\u0B30' */ 50, 44, 50, 50, 44, 50, 50, 50, 50, 50, 44, 44, 44, 50, 44, 44, 
/* '\u0B40' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0B50' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 50, 44, 50, 
/* '\u0B60' */ 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0B70' */ 44, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0B80' */ 44, 44, 44, 50, 44, 50, 50, 50, 50, 50, 50, 44, 44, 44, 50, 50, 
/* '\u0B90' */ 50, 44, 50, 50, 50, 50, 44, 44, 44, 50, 50, 44, 50, 44, 50, 50, 
/* '\u0BA0' */ 44, 44, 44, 50, 50, 44, 44, 44, 50, 50, 50, 44, 44, 44, 50, 50, 
/* '\u0BB0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 
/* '\u0BC0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0BD0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0BE0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0BF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo12 = new sbyte[256] {
/* '\u0C00' */ 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 
/* '\u0C10' */ 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0C20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 
/* '\u0C30' */ 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 
/* '\u0C40' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0C50' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0C60' */ 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0C70' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0C80' */ 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 
/* '\u0C90' */ 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0CA0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 
/* '\u0CB0' */ 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 44, 44, 44, 50, 44, 44, 
/* '\u0CC0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0CD0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 44, 
/* '\u0CE0' */ 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0CF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo13 = new sbyte[256] {
/* '\u0D00' */ 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 
/* '\u0D10' */ 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0D20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 
/* '\u0D30' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 
/* '\u0D40' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0D50' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0D60' */ 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0D70' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0D80' */ 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0D90' */ 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 50, 50, 50, 50, 50, 50, 
/* '\u0DA0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0DB0' */ 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 44, 44, 
/* '\u0DC0' */ 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0DD0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0DE0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0DF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo14 = new sbyte[256] {
/* '\u0E00' */ 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0E10' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0E20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0E30' */ 50, 44, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0E40' */ 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0E50' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0E60' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0E70' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0E80' */ 44, 50, 50, 44, 50, 44, 44, 50, 50, 44, 50, 44, 44, 50, 44, 44, 
/* '\u0E90' */ 44, 44, 44, 44, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0EA0' */ 44, 50, 50, 50, 44, 50, 44, 50, 44, 44, 50, 50, 44, 50, 50, 50, 
/* '\u0EB0' */ 50, 44, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 44, 44, 
/* '\u0EC0' */ 50, 50, 50, 50, 50, 44, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0ED0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 50, 44, 44, 
/* '\u0EE0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0EF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo15 = new sbyte[256] {
/* '\u0F00' */ 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0F10' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0F20' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0F30' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0F40' */ 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0F50' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u0F60' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 
/* '\u0F70' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0F80' */ 44, 44, 44, 44, 44, 44, 44, 44, 50, 50, 50, 50, 44, 44, 44, 44, 
/* '\u0F90' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0FA0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0FB0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0FC0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0FD0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0FE0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u0FF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo16 = new sbyte[256] {
/* '\u1000' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1010' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1020' */ 50, 50, 44, 50, 50, 50, 50, 50, 44, 50, 50, 44, 44, 44, 44, 44, 
/* '\u1030' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1040' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1050' */ 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1060' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1070' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1080' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1090' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u10A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u10B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u10C0' */ 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u10D0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u10E0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u10F0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 44, 44, 44 };
    static sbyte[] mLo17 = new sbyte[256] {
/* '\u1100' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1110' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1120' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1130' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1140' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1150' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 50, 
/* '\u1160' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1170' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1180' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1190' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u11A0' */ 50, 50, 50, 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u11B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u11C0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u11D0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u11E0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u11F0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo18 = new sbyte[256] {
/* '\u1200' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1210' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1220' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1230' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1240' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 44, 44, 
/* '\u1250' */ 50, 50, 50, 50, 50, 50, 50, 44, 50, 44, 50, 50, 50, 50, 44, 44, 
/* '\u1260' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1270' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1280' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 44, 44, 
/* '\u1290' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u12A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u12B0' */ 50, 44, 50, 50, 50, 50, 44, 44, 50, 50, 50, 50, 50, 50, 50, 44, 
/* '\u12C0' */ 50, 44, 50, 50, 50, 50, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u12D0' */ 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u12E0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u12F0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50 };
    static sbyte[] mLo19 = new sbyte[256] {
/* '\u1300' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1310' */ 50, 44, 50, 50, 50, 50, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1320' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1330' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1340' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1350' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 
/* '\u1360' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1370' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1380' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1390' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u13A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u13B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u13C0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u13D0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u13E0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u13F0' */ 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo20 = new sbyte[256] {
/* '\u1400' */ 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1410' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1420' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1430' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1440' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1450' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1460' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1470' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1480' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1490' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u14A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u14B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u14C0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u14D0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u14E0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u14F0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50 };
    static sbyte[] mLo22 = new sbyte[256] {
/* '\u1600' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1610' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1620' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1630' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1640' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1650' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1660' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 50, 
/* '\u1670' */ 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1680' */ 45, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1690' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 
/* '\u16A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u16B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u16C0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u16D0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u16E0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 
/* '\u16F0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo23 = new sbyte[256] {
/* '\u1700' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 
/* '\u1710' */ 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1720' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1730' */ 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1740' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1750' */ 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1760' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 
/* '\u1770' */ 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1780' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1790' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u17A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u17B0' */ 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u17C0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u17D0' */ 44, 44, 44, 44, 44, 44, 44, 50, 44, 44, 44, 44, 50, 44, 44, 44, 
/* '\u17E0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u17F0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo24 = new sbyte[256] {
/* '\u1800' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 44, 
/* '\u1810' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1820' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1830' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1840' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1850' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1860' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1870' */ 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1880' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1890' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u18A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 
/* '\u18B0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u18C0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u18D0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u18E0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u18F0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo25 = new sbyte[256] {
/* '\u1900' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1910' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 
/* '\u1920' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1930' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1940' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1950' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1960' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 
/* '\u1970' */ 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1980' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1990' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u19A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 
/* '\u19B0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u19C0' */ 44, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u19D0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u19E0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u19F0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo26 = new sbyte[256] {
/* '\u1A00' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1A10' */ 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1A20' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1A30' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1A40' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1A50' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1A60' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1A70' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1A80' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1A90' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1AA0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1AB0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1AC0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1AD0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1AE0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1AF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo27 = new sbyte[256] {
/* '\u1B00' */ 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1B10' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1B20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1B30' */ 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1B40' */ 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 
/* '\u1B50' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1B60' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1B70' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1B80' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1B90' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1BA0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1BB0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1BC0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1BD0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1BE0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1BF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo29 = new sbyte[256] {
/* '\u1D00' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1D10' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1D20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1D30' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1D40' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1D50' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1D60' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1D70' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1D80' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1D90' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1DA0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1DB0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1DC0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1DD0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1DE0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u1DF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo30 = new sbyte[256] {
/* '\u1E00' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1E10' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1E20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1E30' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1E40' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1E50' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1E60' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1E70' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1E80' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1E90' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 
/* '\u1EA0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1EB0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1EC0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1ED0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1EE0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1EF0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo31 = new sbyte[256] {
/* '\u1F00' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1F10' */ 50, 50, 50, 50, 50, 50, 44, 44, 50, 50, 50, 50, 50, 50, 44, 44, 
/* '\u1F20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1F30' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1F40' */ 50, 50, 50, 50, 50, 50, 44, 44, 50, 50, 50, 50, 50, 50, 44, 44, 
/* '\u1F50' */ 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 44, 50, 44, 50, 44, 50, 
/* '\u1F60' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1F70' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 
/* '\u1F80' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1F90' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1FA0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u1FB0' */ 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 44, 50, 44, 
/* '\u1FC0' */ 44, 44, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 
/* '\u1FD0' */ 50, 50, 50, 50, 44, 44, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 
/* '\u1FE0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 
/* '\u1FF0' */ 44, 44, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44 };
    static sbyte[] mLo32 = new sbyte[256] {
/* '\u2000' */ 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 44, 44, 44, 44, 
/* '\u2010' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2020' */ 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 44, 44, 44, 44, 44, 45, 
/* '\u2030' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2040' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2050' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 
/* '\u2060' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2070' */ 44, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 
/* '\u2080' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2090' */ 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u20A0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u20B0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u20C0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u20D0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u20E0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u20F0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo33 = new sbyte[256] {
/* '\u2100' */ 44, 44, 50, 44, 44, 44, 44, 50, 44, 44, 50, 50, 50, 50, 50, 50, 
/* '\u2110' */ 50, 50, 50, 50, 44, 50, 44, 44, 44, 50, 50, 50, 50, 50, 44, 44, 
/* '\u2120' */ 44, 44, 44, 44, 50, 44, 50, 44, 50, 44, 50, 50, 50, 50, 44, 50, 
/* '\u2130' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 50, 50, 50, 50, 
/* '\u2140' */ 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 44, 44, 44, 44, 50, 44, 
/* '\u2150' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2160' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2170' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2180' */ 44, 44, 44, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2190' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u21A0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u21B0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u21C0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u21D0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u21E0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u21F0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo44 = new sbyte[256] {
/* '\u2C00' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2C10' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2C20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 
/* '\u2C30' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2C40' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2C50' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 
/* '\u2C60' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 
/* '\u2C70' */ 44, 44, 44, 44, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2C80' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2C90' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2CA0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2CB0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2CC0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2CD0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2CE0' */ 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2CF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo45 = new sbyte[256] {
/* '\u2D00' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2D10' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2D20' */ 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2D30' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2D40' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2D50' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2D60' */ 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50, 
/* '\u2D70' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2D80' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u2D90' */ 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2DA0' */ 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 44, 
/* '\u2DB0' */ 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 44, 
/* '\u2DC0' */ 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 44, 
/* '\u2DD0' */ 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 44, 
/* '\u2DE0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u2DF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo48 = new sbyte[256] {
/* '\u3000' */ 45, 44, 44, 44, 44, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u3010' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u3020' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u3030' */ 44, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 50, 50, 44, 44, 44, 
/* '\u3040' */ 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u3050' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u3060' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u3070' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u3080' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u3090' */ 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 50, 50, 50, 
/* '\u30A0' */ 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u30B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u30C0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u30D0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u30E0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u30F0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50 };
    static sbyte[] mLo49 = new sbyte[256] {
/* '\u3100' */ 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u3110' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u3120' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 
/* '\u3130' */ 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u3140' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u3150' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u3160' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u3170' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u3180' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 
/* '\u3190' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u31A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u31B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u31C0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u31D0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u31E0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u31F0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50 };
    static sbyte[] mLo77 = new sbyte[256] {
/* '\u4D00' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u4D10' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u4D20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u4D30' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u4D40' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u4D50' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u4D60' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u4D70' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u4D80' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u4D90' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u4DA0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u4DB0' */ 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u4DC0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u4DD0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u4DE0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u4DF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo159 = new sbyte[256] {
/* '\u9F00' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u9F10' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u9F20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u9F30' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u9F40' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u9F50' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u9F60' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u9F70' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u9F80' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u9F90' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u9FA0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\u9FB0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 
/* '\u9FC0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u9FD0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u9FE0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\u9FF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo164 = new sbyte[256] {
/* '\uA400' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uA410' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uA420' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uA430' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uA440' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uA450' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uA460' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uA470' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uA480' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 
/* '\uA490' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA4A0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA4B0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA4C0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA4D0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA4E0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA4F0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo167 = new sbyte[256] {
/* '\uA700' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA710' */ 44, 44, 44, 44, 44, 44, 44, 50, 50, 50, 50, 44, 44, 44, 44, 44, 
/* '\uA720' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA730' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA740' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA750' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA760' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA770' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA780' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA790' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA7A0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA7B0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA7C0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA7D0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA7E0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA7F0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo168 = new sbyte[256] {
/* '\uA800' */ 50, 50, 44, 50, 50, 50, 44, 50, 50, 50, 50, 44, 50, 50, 50, 50, 
/* '\uA810' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uA820' */ 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA830' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA840' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uA850' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uA860' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uA870' */ 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA880' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA890' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA8A0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA8B0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA8C0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA8D0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA8E0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uA8F0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo215 = new sbyte[256] {
/* '\uD700' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uD710' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uD720' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uD730' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uD740' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uD750' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uD760' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uD770' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uD780' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uD790' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uD7A0' */ 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uD7B0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uD7C0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uD7D0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uD7E0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uD7F0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo250 = new sbyte[256] {
/* '\uFA00' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFA10' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFA20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 
/* '\uFA30' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFA40' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFA50' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFA60' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 
/* '\uFA70' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFA80' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFA90' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFAA0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFAB0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFAC0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFAD0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 
/* '\uFAE0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFAF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mLo251 = new sbyte[256] {
/* '\uFB00' */ 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFB10' */ 44, 44, 44, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 50, 44, 50, 
/* '\uFB20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 
/* '\uFB30' */ 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 44, 50, 44, 
/* '\uFB40' */ 50, 50, 44, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFB50' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFB60' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFB70' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFB80' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFB90' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFBA0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFBB0' */ 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFBC0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFBD0' */ 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFBE0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFBF0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50 };
    static sbyte[] mLo253 = new sbyte[256] {
/* '\uFD00' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFD10' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFD20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFD30' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 
/* '\uFD40' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFD50' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFD60' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFD70' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFD80' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFD90' */ 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFDA0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFDB0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFDC0' */ 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFDD0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFDE0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFDF0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44 };
    static sbyte[] mLo254 = new sbyte[256] {
/* '\uFE00' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFE10' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFE20' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFE30' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFE40' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFE50' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFE60' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFE70' */ 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFE80' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFE90' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFEA0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFEB0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFEC0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFED0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFEE0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFEF0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44 };
    static sbyte[] mLo255 = new sbyte[256] {
/* '\uFF00' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFF10' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFF20' */ 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFF30' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 
/* '\uFF40' */ 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFF50' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 
/* '\uFF60' */ 44, 44, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFF70' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFF80' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFF90' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFFA0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\uFFB0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 
/* '\uFFC0' */ 44, 44, 50, 50, 50, 50, 50, 50, 44, 44, 50, 50, 50, 50, 50, 50, 
/* '\uFFD0' */ 44, 44, 50, 50, 50, 50, 50, 50, 44, 44, 50, 50, 50, 44, 44, 44, 
/* '\uFFE0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\uFFF0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };

    static sbyte[][] map = new sbyte[256][] {
/* '\u00xx' */ mLo0, mLo1, mLo2, mLo3, mLo4, mLo5, mLo6, mLo7, mLo8, mLo9, mLo10, mLo11, mLo12, mLo13, mLo14, mLo15, 
/* '\u10xx' */ mLo16, mLo17, mLo18, mLo19, mLo20, mLo1, mLo22, mLo23, mLo24, mLo25, mLo26, mLo27, mLo8, mLo29, mLo30, mLo31, 
/* '\u20xx' */ mLo32, mLo33, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo44, mLo45, mLo8, mLo8, 
/* '\u30xx' */ mLo48, mLo49, mLo8, mLo8, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u40xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo77, mLo1, mLo1, 
/* '\u50xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u60xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u70xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u80xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\u90xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo159, 
/* '\uA0xx' */ mLo1, mLo1, mLo1, mLo1, mLo164, mLo8, mLo8, mLo167, mLo168, mLo8, mLo8, mLo8, mLo1, mLo1, mLo1, mLo1, 
/* '\uB0xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\uC0xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, 
/* '\uD0xx' */ mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo1, mLo215, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, 
/* '\uE0xx' */ mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, 
/* '\uF0xx' */ mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo8, mLo1, mLo250, mLo251, mLo1, mLo253, mLo254, mLo255};

#endregion

#region CompressedCharacterMap
    //
    // There are 51 equivalence classes
    // There are 21 character sequence regions
    // There are 6 tables, 1255 entries
    // There are 15 runs, 0 singletons
    // Decision tree depth is 5
    //
    static sbyte[] mapC0 = new sbyte[251] {
/* '\U00010000' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 
/* '\U00010010' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U00010020' */ 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U00010030' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 44, 50, 
/* '\U00010040' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 
/* '\U00010050' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 
/* '\U00010060' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\U00010070' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\U00010080' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U00010090' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U000100A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U000100B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U000100C0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U000100D0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U000100E0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U000100F0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50 };
    static sbyte[] mapC2 = new sbyte[256] {
/* '\U00010300' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U00010310' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 
/* '\U00010320' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\U00010330' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U00010340' */ 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 44, 44, 44, 44, 
/* '\U00010350' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\U00010360' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\U00010370' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\U00010380' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U00010390' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 44, 
/* '\U000103A0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U000103B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U000103C0' */ 50, 50, 50, 50, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U000103D0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\U000103E0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\U000103F0' */ 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44 };
    static sbyte[] mapC5 = new sbyte[64] {
/* '\U00010800' */ 50, 50, 50, 50, 50, 50, 44, 44, 50, 44, 50, 50, 50, 50, 50, 50, 
/* '\U00010810' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U00010820' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U00010830' */ 50, 50, 50, 50, 50, 50, 44, 50, 50, 44, 44, 44, 50, 44, 44, 50 };
    static sbyte[] mapC9 = new sbyte[52] {
/* '\U00010A00' */ 50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
/* '\U00010A10' */ 50, 50, 50, 50, 44, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 
/* '\U00010A20' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U00010A30' */ 50, 50, 50, 50 };
    static sbyte[] mapC13 = new sbyte[338] {
/* '\U0001D400' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D410' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D420' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D430' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D440' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D450' */ 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D460' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D470' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D480' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D490' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 
/* '\U0001D4A0' */ 44, 44, 50, 44, 44, 50, 50, 44, 44, 50, 50, 50, 50, 44, 50, 50, 
/* '\U0001D4B0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 44, 50, 50, 50, 
/* '\U0001D4C0' */ 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D4D0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D4E0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D4F0' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D500' */ 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 44, 44, 50, 50, 50, 
/* '\U0001D510' */ 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 
/* '\U0001D520' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D530' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 44, 
/* '\U0001D540' */ 50, 50, 50, 50, 50, 44, 50, 44, 44, 44, 50, 50, 50, 50, 50, 50, 
/* '\U0001D550' */ 50, 44 };
    static sbyte[] mapC15 = new sbyte[294] {
/* '\U0001D6A6' */ 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D6B6' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 
/* '\U0001D6C6' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D6D6' */ 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D6E6' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D6F6' */ 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D706' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 
/* '\U0001D716' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D726' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 
/* '\U0001D736' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D746' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 
/* '\U0001D756' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D766' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 
/* '\U0001D776' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D786' */ 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D796' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D7A6' */ 50, 50, 50, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
/* '\U0001D7B6' */ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 44, 50, 50, 
/* '\U0001D7C6' */ 50, 50, 50, 50, 50, 50 };

    static sbyte MapC(int code)
    { // '\U00010000' <= code <= '\U0010FFFF'
      if (code < 68148) // '\U00010000' <= code <= '\U00010A33'
        if (code < 67584) // '\U00010000' <= code <= '\U000107FF'
          if (code < 66304) // '\U00010000' <= code <= '\U000102FF'
            if (code < 65787) // '\U00010000' <= code <= '\U000100FA'
              return mapC0[code - 65536];
            else // '\U000100FB' <= code <= '\U000102FF'
              return (sbyte)44;
          else // '\U00010300' <= code <= '\U000107FF'
            if (code < 66560) // '\U00010300' <= code <= '\U000103FF'
              return mapC2[code - 66304];
            else // '\U00010400' <= code <= '\U000107FF'
              if (code < 66718) // '\U00010400' <= code <= '\U0001049D'
                return (sbyte)50;
              else // '\U0001049E' <= code <= '\U000107FF'
                return (sbyte)44;
        else // '\U00010800' <= code <= '\U00010A33'
          if (code < 67840) // '\U00010800' <= code <= '\U000108FF'
            if (code < 67648) // '\U00010800' <= code <= '\U0001083F'
              return mapC5[code - 67584];
            else // '\U00010840' <= code <= '\U000108FF'
              return (sbyte)44;
          else // '\U00010900' <= code <= '\U00010A33'
            if (code < 67862) // '\U00010900' <= code <= '\U00010915'
              return (sbyte)50;
            else // '\U00010916' <= code <= '\U00010A33'
              if (code < 68096) // '\U00010916' <= code <= '\U000109FF'
                return (sbyte)44;
              else // '\U00010A00' <= code <= '\U00010A33'
                return mapC9[code - 68096];
      else // '\U00010A34' <= code <= '\U0010FFFF'
        if (code < 120486) // '\U00010A34' <= code <= '\U0001D6A5'
          if (code < 74607) // '\U00010A34' <= code <= '\U0001236E'
            if (code < 73728) // '\U00010A34' <= code <= '\U00011FFF'
              return (sbyte)44;
            else // '\U00012000' <= code <= '\U0001236E'
              return (sbyte)50;
          else // '\U0001236F' <= code <= '\U0001D6A5'
            if (code < 119808) // '\U0001236F' <= code <= '\U0001D3FF'
              return (sbyte)44;
            else // '\U0001D400' <= code <= '\U0001D6A5'
              if (code < 120146) // '\U0001D400' <= code <= '\U0001D551'
                return mapC13[code - 119808];
              else // '\U0001D552' <= code <= '\U0001D6A5'
                return (sbyte)50;
        else // '\U0001D6A6' <= code <= '\U0010FFFF'
          if (code < 173783) // '\U0001D6A6' <= code <= '\U0002A6D6'
            if (code < 120780) // '\U0001D6A6' <= code <= '\U0001D7CB'
              return mapC15[code - 120486];
            else // '\U0001D7CC' <= code <= '\U0002A6D6'
              if (code < 131072) // '\U0001D7CC' <= code <= '\U0001FFFF'
                return (sbyte)44;
              else // '\U00020000' <= code <= '\U0002A6D6'
                return (sbyte)50;
          else // '\U0002A6D7' <= code <= '\U0010FFFF'
            if (code < 194560) // '\U0002A6D7' <= code <= '\U0002F7FF'
              return (sbyte)44;
            else // '\U0002F800' <= code <= '\U0010FFFF'
              if (code < 195102) // '\U0002F800' <= code <= '\U0002FA1D'
                return (sbyte)50;
              else // '\U0002FA1E' <= code <= '\U0010FFFF'
                return (sbyte)44;
    }
#endregion


    static sbyte Map(int code)
    { 
        if (code <= 65535)
            return map[code / 256][code % 256];
        else
            return MapC(code);
    }

    static Table[] NxS = new Table[503] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ new Table(0, 0, -1, null), // Shortest string "d"
/* NxS[   2] */ // Shortest string "^\t"
      new Table(21, 17, -1, new short[] {2, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2}),
/* NxS[   3] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[   4] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[   5] */ new Table(0, 0, -1, null), // Shortest string "&"
/* NxS[   6] */ // Shortest string "%"
      new Table(23, 1, 6, new short[] {7}),
/* NxS[   7] */ // Shortest string "%\n"
      new Table(21, 17, -1, new short[] {7, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7}),
/* NxS[   8] */ new Table(0, 0, -1, null), // Shortest string "\\\\"
/* NxS[   9] */ // Shortest string "\\d"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 284, 10, 
          10, 10, 10, 10, 10, 10, 285, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  10] */ // Shortest string "\\o"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  11] */ // Shortest string "\\c"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 275, 10, 
          10, 10, 10, 10, 10, 276, 10, 10, 10, 10, 10, 10, 10, 277, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  12] */ // Shortest string "\\u"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 253, 10, 10, 10, 254, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  13] */ // Shortest string "\\m"
      new Table(21, 36, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 243}),
/* NxS[  14] */ // Shortest string "\\e"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 234, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  15] */ // Shortest string "\\n"
      new Table(21, 34, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 225}),
/* NxS[  16] */ // Shortest string "\\t"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 188, 10, 
          10, 10, 189, 10, 190, 10, 10, 10, 10, 10, 10, 191, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  17] */ // Shortest string "\\l"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 184, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  18] */ // Shortest string "\\a"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          177, 10, 10, 178, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  19] */ // Shortest string "\\s"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 135, 136, 137, 138}),
/* NxS[  20] */ // Shortest string "\\p"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 131, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  21] */ // Shortest string "\\g"
      new Table(18, 35, 10, new short[] {120, 10, 10, -1, -1, -1, 
          -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  22] */ // Shortest string "\\i"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 98, 99, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  23] */ // Shortest string "\\h"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          91, 10, 10, 10, 10, 92, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  24] */ // Shortest string "\\b"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 73, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 72}),
/* NxS[  25] */ // Shortest string "\\f"
      new Table(18, 37, 10, new short[] {45, 10, 10, -1, -1, -1, 
          -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 44}),
/* NxS[  26] */ // Shortest string "\\L"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 32, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 33, 10, 10, 10, 10, 10, 10}),
/* NxS[  27] */ // Shortest string "\\H"
      new Table(21, 36, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 29}),
/* NxS[  28] */ new Table(0, 0, -1, null), // Shortest string "\\\x20"
/* NxS[  29] */ // Shortest string "\\Hu"
      new Table(15, 38, 10, new short[] {30, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  30] */ // Shortest string "\\Hug"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 31}),
/* NxS[  31] */ // Shortest string "\\Huge"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  32] */ // Shortest string "\\La"
      new Table(18, 35, 10, new short[] {37, 10, 10, -1, -1, -1, 
          -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 38, 10, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  33] */ // Shortest string "\\LA"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 34, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  34] */ // Shortest string "\\LAR"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 35, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  35] */ // Shortest string "\\LARG"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 36, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  36] */ // Shortest string "\\LARGE"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  37] */ // Shortest string "\\Lar"
      new Table(15, 38, 10, new short[] {42, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  38] */ // Shortest string "\\LaT"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 39}),
/* NxS[  39] */ // Shortest string "\\LaTe"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 40, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  40] */ // Shortest string "\\LaTeX"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 41, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  41] */ new Table(0, 0, -1, null), // Shortest string "\\LaTeX\x20"
/* NxS[  42] */ // Shortest string "\\Larg"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 43}),
/* NxS[  43] */ // Shortest string "\\Large"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  44] */ // Shortest string "\\fo"
      new Table(21, 34, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 62}),
/* NxS[  45] */ // Shortest string "\\fr"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 46, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  46] */ // Shortest string "\\fra"
      new Table(21, 37, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 47}),
/* NxS[  47] */ // Shortest string "\\fram"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 48}),
/* NxS[  48] */ // Shortest string "\\frame"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 49, 10, 10, 50, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  49] */ // Shortest string "\\framet"
      new Table(16, 37, 10, new short[] {58, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  50] */ // Shortest string "\\frames"
      new Table(21, 36, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 51}),
/* NxS[  51] */ // Shortest string "\\framesu"
      new Table(20, 33, 10, new short[] {52, -1, -1, -1, -1, -1, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  52] */ // Shortest string "\\framesub"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 53, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  53] */ // Shortest string "\\framesubt"
      new Table(16, 37, 10, new short[] {54, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  54] */ // Shortest string "\\framesubti"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 55, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  55] */ // Shortest string "\\framesubtit"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 56, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  56] */ // Shortest string "\\framesubtitl"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 57}),
/* NxS[  57] */ // Shortest string "\\framesubtitle"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  58] */ // Shortest string "\\frameti"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 59, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  59] */ // Shortest string "\\frametit"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 60, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  60] */ // Shortest string "\\frametitl"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 61}),
/* NxS[  61] */ // Shortest string "\\frametitle"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  62] */ // Shortest string "\\foo"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 63, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  63] */ // Shortest string "\\foot"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 64, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  64] */ // Shortest string "\\footn"
      new Table(21, 34, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 65}),
/* NxS[  65] */ // Shortest string "\\footno"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 66, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  66] */ // Shortest string "\\footnot"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 67}),
/* NxS[  67] */ // Shortest string "\\footnote"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 68, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  68] */ // Shortest string "\\footnotes"
      new Table(16, 37, 10, new short[] {69, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  69] */ // Shortest string "\\footnotesi"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          70, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  70] */ // Shortest string "\\footnotesiz"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 71}),
/* NxS[  71] */ // Shortest string "\\footnotesize"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  72] */ // Shortest string "\\be"
      new Table(15, 38, 10, new short[] {80, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  73] */ // Shortest string "\\bf"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 74, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  74] */ // Shortest string "\\bfs"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 75}),
/* NxS[  75] */ // Shortest string "\\bfse"
      new Table(18, 35, 10, new short[] {76, 10, 10, -1, -1, -1, 
          -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  76] */ // Shortest string "\\bfser"
      new Table(16, 37, 10, new short[] {77, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  77] */ // Shortest string "\\bfseri"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 78}),
/* NxS[  78] */ // Shortest string "\\bfserie"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 79, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  79] */ // Shortest string "\\bfseries"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  80] */ // Shortest string "\\beg"
      new Table(16, 37, 10, new short[] {81, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  81] */ // Shortest string "\\begi"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 82, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  82] */ // Shortest string "\\begin"
      new Table(21, 32, 10, new short[] {361, 362, 363, 364, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 361, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  83] */ new Table(0, 0, -1, null), // Shortest string "\\begin{\\}"
/* NxS[  84] */ new Table(0, 0, -1, null), // Shortest string "\\begin{frame}"
/* NxS[  85] */ new Table(0, 0, -1, null), // Shortest string "\\begin{itemize}"
/* NxS[  86] */ // Shortest string "\\begin{tabular}"
      new Table(24, 1, -1, new short[] {87}),
/* NxS[  87] */ new Table(0, 0, -1, null), // Shortest string "\\begin{tabular}{"
/* NxS[  88] */ new Table(0, 0, -1, null), // Shortest string "\\begin{enumerate}"
/* NxS[  89] */ new Table(0, 0, -1, null), // Shortest string "\\begin{description}"
/* NxS[  90] */ new Table(0, 0, -1, null), // Shortest string "\\begin{document}"
/* NxS[  91] */ // Shortest string "\\hu"
      new Table(15, 38, 10, new short[] {96, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  92] */ // Shortest string "\\hl"
      new Table(16, 37, 10, new short[] {93, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  93] */ // Shortest string "\\hli"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 94, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[  94] */ // Shortest string "\\hlin"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 95}),
/* NxS[  95] */ // Shortest string "\\hline"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  96] */ // Shortest string "\\hug"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 97}),
/* NxS[  97] */ // Shortest string "\\huge"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[  98] */ // Shortest string "\\in"
      new Table(21, 35, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 107}),
/* NxS[  99] */ // Shortest string "\\it"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 100, 10, 10, 10, 10, 101, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 100] */ // Shortest string "\\ite"
      new Table(21, 37, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 106}),
/* NxS[ 101] */ // Shortest string "\\its"
      new Table(17, 36, 10, new short[] {102, 10, 10, 10, -1, -1, 
          -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 102] */ // Shortest string "\\itsh"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 103, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 103] */ // Shortest string "\\itsha"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 104, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 104] */ // Shortest string "\\itshap"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 105}),
/* NxS[ 105] */ // Shortest string "\\itshape"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 106] */ // Shortest string "\\item"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 107] */ // Shortest string "\\inc"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 108, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 108] */ // Shortest string "\\incl"
      new Table(21, 36, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 109}),
/* NxS[ 109] */ // Shortest string "\\inclu"
      new Table(21, 33, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 110}),
/* NxS[ 110] */ // Shortest string "\\includ"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 111}),
/* NxS[ 111] */ // Shortest string "\\include"
      new Table(15, 38, 10, new short[] {112, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 112] */ // Shortest string "\\includeg"
      new Table(18, 35, 10, new short[] {113, 10, 10, -1, -1, -1, 
          -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 113] */ // Shortest string "\\includegr"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 114, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 114] */ // Shortest string "\\includegra"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 115, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 115] */ // Shortest string "\\includegrap"
      new Table(17, 36, 10, new short[] {116, 10, 10, 10, -1, -1, 
          -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 116] */ // Shortest string "\\includegraph"
      new Table(16, 37, 10, new short[] {117, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 117] */ // Shortest string "\\includegraphi"
      new Table(21, 35, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 118}),
/* NxS[ 118] */ // Shortest string "\\includegraphic"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 119, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 119] */ // Shortest string "\\includegraphics"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 120] */ // Shortest string "\\gr"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 121, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 121] */ // Shortest string "\\gra"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 122, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 122] */ // Shortest string "\\grap"
      new Table(17, 36, 10, new short[] {123, 10, 10, 10, -1, -1, 
          -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 123] */ // Shortest string "\\graph"
      new Table(16, 37, 10, new short[] {124, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 124] */ // Shortest string "\\graphi"
      new Table(21, 35, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 125}),
/* NxS[ 125] */ // Shortest string "\\graphic"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 126, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 126] */ // Shortest string "\\graphics"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 127, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 127] */ // Shortest string "\\graphicsp"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 128, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 128] */ // Shortest string "\\graphicspa"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 129, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 129] */ // Shortest string "\\graphicspat"
      new Table(17, 36, 10, new short[] {130, 10, 10, 10, -1, -1, 
          -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 130] */ // Shortest string "\\graphicspath"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 131] */ // Shortest string "\\pa"
      new Table(21, 36, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 132}),
/* NxS[ 132] */ // Shortest string "\\pau"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 133, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 133] */ // Shortest string "\\paus"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 134}),
/* NxS[ 134] */ // Shortest string "\\pause"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 135] */ // Shortest string "\\sc"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 164, 10, 10, 10, 10, 10, 165, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 136] */ // Shortest string "\\su"
      new Table(20, 33, 10, new short[] {147, -1, -1, -1, -1, -1, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 137] */ // Shortest string "\\sm"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 144, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 138] */ // Shortest string "\\se"
      new Table(21, 35, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 139}),
/* NxS[ 139] */ // Shortest string "\\sec"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 140, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 140] */ // Shortest string "\\sect"
      new Table(16, 37, 10, new short[] {141, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 141] */ // Shortest string "\\secti"
      new Table(21, 34, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 142}),
/* NxS[ 142] */ // Shortest string "\\sectio"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 143, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 143] */ // Shortest string "\\section"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 144] */ // Shortest string "\\sma"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 145, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 145] */ // Shortest string "\\smal"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 146, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 146] */ // Shortest string "\\small"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 147] */ // Shortest string "\\sub"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 148, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 148] */ // Shortest string "\\subs"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 149, 10, 150}),
/* NxS[ 149] */ // Shortest string "\\subsu"
      new Table(20, 33, 10, new short[] {156, -1, -1, -1, -1, -1, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 150] */ // Shortest string "\\subse"
      new Table(21, 35, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 151}),
/* NxS[ 151] */ // Shortest string "\\subsec"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 152, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 152] */ // Shortest string "\\subsect"
      new Table(16, 37, 10, new short[] {153, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 153] */ // Shortest string "\\subsecti"
      new Table(21, 34, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 154}),
/* NxS[ 154] */ // Shortest string "\\subsectio"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 155, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 155] */ // Shortest string "\\subsection"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 156] */ // Shortest string "\\subsub"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 157, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 157] */ // Shortest string "\\subsubs"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 158}),
/* NxS[ 158] */ // Shortest string "\\subsubse"
      new Table(21, 35, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 159}),
/* NxS[ 159] */ // Shortest string "\\subsubsec"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 160, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 160] */ // Shortest string "\\subsubsect"
      new Table(16, 37, 10, new short[] {161, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 161] */ // Shortest string "\\subsubsecti"
      new Table(21, 34, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 162}),
/* NxS[ 162] */ // Shortest string "\\subsubsectio"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 163, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 163] */ // Shortest string "\\subsubsection"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 164] */ // Shortest string "\\scs"
      new Table(17, 36, 10, new short[] {173, 10, 10, 10, -1, -1, 
          -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 165] */ // Shortest string "\\scr"
      new Table(16, 37, 10, new short[] {166, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 166] */ // Shortest string "\\scri"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 167, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 167] */ // Shortest string "\\scrip"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 168, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 168] */ // Shortest string "\\script"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 169, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 169] */ // Shortest string "\\scripts"
      new Table(16, 37, 10, new short[] {170, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 170] */ // Shortest string "\\scriptsi"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          171, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 171] */ // Shortest string "\\scriptsiz"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 172}),
/* NxS[ 172] */ // Shortest string "\\scriptsize"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 173] */ // Shortest string "\\scsh"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 174, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 174] */ // Shortest string "\\scsha"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 175, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 175] */ // Shortest string "\\scshap"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 176}),
/* NxS[ 176] */ // Shortest string "\\scshape"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 177] */ // Shortest string "\\au"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 180, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 178] */ // Shortest string "\\an"
      new Table(21, 33, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 179}),
/* NxS[ 179] */ // Shortest string "\\and"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 180] */ // Shortest string "\\aut"
      new Table(17, 36, 10, new short[] {181, 10, 10, 10, -1, -1, 
          -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 181] */ // Shortest string "\\auth"
      new Table(21, 34, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 182}),
/* NxS[ 182] */ // Shortest string "\\autho"
      new Table(18, 35, 10, new short[] {183, 10, 10, -1, -1, -1, 
          -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 183] */ // Shortest string "\\author"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 184] */ // Shortest string "\\la"
      new Table(18, 35, 10, new short[] {185, 10, 10, -1, -1, -1, 
          -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 185] */ // Shortest string "\\lar"
      new Table(15, 38, 10, new short[] {186, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 186] */ // Shortest string "\\larg"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 187}),
/* NxS[ 187] */ // Shortest string "\\large"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 188] */ // Shortest string "\\to"
      new Table(21, 33, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 222}),
/* NxS[ 189] */ // Shortest string "\\te"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 207, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 190] */ // Shortest string "\\tt"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 201, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 191] */ // Shortest string "\\ti"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 192, 193, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 192] */ // Shortest string "\\tin"
      new Table(19, 34, 10, new short[] {200, 10, -1, -1, -1, -1, 
          -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 193] */ // Shortest string "\\tit"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 194, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 194] */ // Shortest string "\\titl"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 195}),
/* NxS[ 195] */ // Shortest string "\\title"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 196, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 196] */ // Shortest string "\\titlep"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 197, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 197] */ // Shortest string "\\titlepa"
      new Table(15, 38, 10, new short[] {198, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 198] */ // Shortest string "\\titlepag"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 199}),
/* NxS[ 199] */ // Shortest string "\\titlepage"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 200] */ // Shortest string "\\tiny"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 201] */ // Shortest string "\\ttf"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 202, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 202] */ // Shortest string "\\ttfa"
      new Table(21, 37, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 203}),
/* NxS[ 203] */ // Shortest string "\\ttfam"
      new Table(16, 37, 10, new short[] {204, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 204] */ // Shortest string "\\ttfami"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 205, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 205] */ // Shortest string "\\ttfamil"
      new Table(19, 34, 10, new short[] {206, 10, -1, -1, -1, -1, 
          -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 206] */ // Shortest string "\\ttfamily"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 207] */ // Shortest string "\\tex"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 208, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 208] */ // Shortest string "\\text"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 209, 
          10, 10, 10, 10, 210, 10, 10, 211, 10, 10, 10, 212, 10, 10, 10, 213, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 209] */ // Shortest string "\\textc"
      new Table(21, 34, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 218}),
/* NxS[ 210] */ // Shortest string "\\textt"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 217, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 211] */ // Shortest string "\\texts"
      new Table(21, 35, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 216}),
/* NxS[ 212] */ // Shortest string "\\texti"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 215, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 213] */ // Shortest string "\\textb"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 214, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 214] */ // Shortest string "\\textbf"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 215] */ // Shortest string "\\textit"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 216] */ // Shortest string "\\textsc"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 217] */ // Shortest string "\\texttt"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 218] */ // Shortest string "\\textco"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 219, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 219] */ // Shortest string "\\textcol"
      new Table(21, 34, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 220}),
/* NxS[ 220] */ // Shortest string "\\textcolo"
      new Table(18, 35, 10, new short[] {221, 10, 10, -1, -1, -1, 
          -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 221] */ // Shortest string "\\textcolor"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 222] */ // Shortest string "\\tod"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 223, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 223] */ // Shortest string "\\toda"
      new Table(19, 34, 10, new short[] {224, 10, -1, -1, -1, -1, 
          -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 224] */ // Shortest string "\\today"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 225] */ // Shortest string "\\no"
      new Table(18, 35, 10, new short[] {226, 10, 10, -1, -1, -1, 
          -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 226] */ // Shortest string "\\nor"
      new Table(21, 37, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 227}),
/* NxS[ 227] */ // Shortest string "\\norm"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 228, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 228] */ // Shortest string "\\norma"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 229, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 229] */ // Shortest string "\\normal"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 230, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 230] */ // Shortest string "\\normals"
      new Table(16, 37, 10, new short[] {231, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 231] */ // Shortest string "\\normalsi"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          232, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 232] */ // Shortest string "\\normalsiz"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 233}),
/* NxS[ 233] */ // Shortest string "\\normalsize"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 234] */ // Shortest string "\\en"
      new Table(21, 33, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 235}),
/* NxS[ 235] */ // Shortest string "\\end"
      new Table(21, 32, 10, new short[] {412, 413, 414, 415, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 412, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 236] */ new Table(0, 0, -1, null), // Shortest string "\\end{\\}"
/* NxS[ 237] */ new Table(0, 0, -1, null), // Shortest string "\\end{frame}"
/* NxS[ 238] */ new Table(0, 0, -1, null), // Shortest string "\\end{itemize}"
/* NxS[ 239] */ new Table(0, 0, -1, null), // Shortest string "\\end{tabular}"
/* NxS[ 240] */ new Table(0, 0, -1, null), // Shortest string "\\end{enumerate}"
/* NxS[ 241] */ new Table(0, 0, -1, null), // Shortest string "\\end{description}"
/* NxS[ 242] */ new Table(0, 0, -1, null), // Shortest string "\\end{document}"
/* NxS[ 243] */ // Shortest string "\\mu"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 244, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 244] */ // Shortest string "\\mul"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 245, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 245] */ // Shortest string "\\mult"
      new Table(16, 37, 10, new short[] {246, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 246] */ // Shortest string "\\multi"
      new Table(21, 35, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 247}),
/* NxS[ 247] */ // Shortest string "\\multic"
      new Table(21, 34, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 248}),
/* NxS[ 248] */ // Shortest string "\\multico"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 249, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 249] */ // Shortest string "\\multicol"
      new Table(21, 36, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 250}),
/* NxS[ 250] */ // Shortest string "\\multicolu"
      new Table(21, 37, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 251}),
/* NxS[ 251] */ // Shortest string "\\multicolum"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 252, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 252] */ // Shortest string "\\multicolumn"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 253] */ // Shortest string "\\un"
      new Table(21, 33, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 268}),
/* NxS[ 254] */ // Shortest string "\\us"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 255}),
/* NxS[ 255] */ // Shortest string "\\use"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 256, 10, 10, 10, 257, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 256] */ // Shortest string "\\uset"
      new Table(17, 36, 10, new short[] {264, 10, 10, 10, -1, -1, 
          -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 257] */ // Shortest string "\\usep"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 258, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 258] */ // Shortest string "\\usepa"
      new Table(21, 35, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 259}),
/* NxS[ 259] */ // Shortest string "\\usepac"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 260, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 260] */ // Shortest string "\\usepack"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 261, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 261] */ // Shortest string "\\usepacka"
      new Table(15, 38, 10, new short[] {262, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 262] */ // Shortest string "\\usepackag"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 263}),
/* NxS[ 263] */ // Shortest string "\\usepackage"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 264] */ // Shortest string "\\useth"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 265}),
/* NxS[ 265] */ // Shortest string "\\usethe"
      new Table(21, 37, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 266}),
/* NxS[ 266] */ // Shortest string "\\usethem"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 267}),
/* NxS[ 267] */ // Shortest string "\\usetheme"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 268] */ // Shortest string "\\und"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 269}),
/* NxS[ 269] */ // Shortest string "\\unde"
      new Table(18, 35, 10, new short[] {270, 10, 10, -1, -1, -1, 
          -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 270] */ // Shortest string "\\under"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 271, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 271] */ // Shortest string "\\underl"
      new Table(16, 37, 10, new short[] {272, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 272] */ // Shortest string "\\underli"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 273, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 273] */ // Shortest string "\\underlin"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 274}),
/* NxS[ 274] */ // Shortest string "\\underline"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 275] */ // Shortest string "\\co"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 281, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 276] */ // Shortest string "\\cl"
      new Table(16, 37, 10, new short[] {278, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 277] */ // Shortest string "\\cr"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 278] */ // Shortest string "\\cli"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 279, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 279] */ // Shortest string "\\clin"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 280}),
/* NxS[ 280] */ // Shortest string "\\cline"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 281] */ // Shortest string "\\col"
      new Table(21, 34, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 282}),
/* NxS[ 282] */ // Shortest string "\\colo"
      new Table(18, 35, 10, new short[] {283, 10, 10, -1, -1, -1, 
          -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 283] */ // Shortest string "\\color"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 284] */ // Shortest string "\\do"
      new Table(21, 35, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 288}),
/* NxS[ 285] */ // Shortest string "\\da"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 286, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 286] */ // Shortest string "\\dat"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 287}),
/* NxS[ 287] */ // Shortest string "\\date"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 288] */ // Shortest string "\\doc"
      new Table(21, 36, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 289}),
/* NxS[ 289] */ // Shortest string "\\docu"
      new Table(21, 37, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 290}),
/* NxS[ 290] */ // Shortest string "\\docum"
      new Table(21, 38, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 10, 10, 10, 291}),
/* NxS[ 291] */ // Shortest string "\\docume"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 292, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 292] */ // Shortest string "\\documen"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 293, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 293] */ // Shortest string "\\document"
      new Table(21, 35, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 10, 294}),
/* NxS[ 294] */ // Shortest string "\\documentc"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 295, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 295] */ // Shortest string "\\documentcl"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 296, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 296] */ // Shortest string "\\documentcla"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 297, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 297] */ // Shortest string "\\documentclas"
      new Table(50, 38, -1, new short[] {10, -1, -1, 10, 10, 10, 
          10, 10, 10, 10, 10, 10, 10, 298, 10, 10, 10, 10, 10, 10, 10, 10, 
          -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}),
/* NxS[ 298] */ // Shortest string "\\documentclass"
      new Table(21, 32, 10, new short[] {-1, -1, -1, -1, -1, 10, 
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 10, -1, -1}),
/* NxS[ 299] */ // Shortest string ""
      new Table(21, 32, 300, new short[] {302, 303, 304, 305, 305, 300, 
          300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 302, 305, 306, 300, 300, 300, 
          305, 300, 300, 305, 305, 305, 305, 300, 300, 301}),
/* NxS[ 300] */ // Shortest string "d"
      new Table(21, 32, 300, new short[] {-1, -1, -1, -1, -1, 300, 
          300, 300, 300, 300, 300, 300, 300, 300, 300, 300, -1, -1, -1, 300, 300, 300, 
          -1, 300, 300, -1, -1, -1, -1, 300, 300, -1}),
/* NxS[ 301] */ // Shortest string "\\"
      new Table(24, 37, -1, new short[] {308, 309, -1, -1, -1, 464, 
          -1, -1, -1, -1, -1, -1, -1, -1, 310, 311, -1, -1, -1, -1, -1, -1, 
          312, 313, 314, 465, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 463}),
/* NxS[ 302] */ new Table(0, 0, -1, null), // Shortest string "\t"
/* NxS[ 303] */ new Table(0, 0, -1, null), // Shortest string "\r"
/* NxS[ 304] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[ 305] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[ 306] */ // Shortest string "%"
      new Table(23, 1, 306, new short[] {307}),
/* NxS[ 307] */ // Shortest string "%\n"
      new Table(21, 17, -1, new short[] {307, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 307}),
/* NxS[ 308] */ new Table(0, 0, -1, null), // Shortest string "\\{"
/* NxS[ 309] */ new Table(0, 0, -1, null), // Shortest string "\\}"
/* NxS[ 310] */ new Table(0, 0, -1, null), // Shortest string "\\&"
/* NxS[ 311] */ new Table(0, 0, -1, null), // Shortest string "\\%"
/* NxS[ 312] */ new Table(0, 0, -1, null), // Shortest string "\\#"
/* NxS[ 313] */ new Table(0, 0, -1, null), // Shortest string "\\$"
/* NxS[ 314] */ new Table(0, 0, -1, null), // Shortest string "\\_"
/* NxS[ 315] */ new Table(0, 0, -1, null), // Shortest string "\\~{}"
/* NxS[ 316] */ // Shortest string "\\LaTeX"
      new Table(37, 1, -1, new short[] {317}),
/* NxS[ 317] */ new Table(0, 0, -1, null), // Shortest string "\\LaTeX\x20"
/* NxS[ 318] */ new Table(0, 0, -1, null), // Shortest string "\\textbackslash{}"
/* NxS[ 319] */ // Shortest string "\\textpipe"
      new Table(24, 1, -1, new short[] {487}),
/* NxS[ 320] */ new Table(0, 0, -1, null), // Shortest string "\\textpipe{}"
/* NxS[ 321] */ new Table(0, 0, -1, null), // Shortest string "\\textasciicircum{}"
/* NxS[ 322] */ // Shortest string ""
      new Table(0, 1, 324, new short[] {323}),
/* NxS[ 323] */ new Table(0, 0, -1, null), // Shortest string ""
/* NxS[ 324] */ // Shortest string "\\"
      new Table(0, 1, 324, new short[] {-1}),
/* NxS[ 325] */ // Shortest string ""
      new Table(41, 1, 326, new short[] {327}),
/* NxS[ 326] */ // Shortest string "\\"
      new Table(41, 1, 326, new short[] {-1}),
/* NxS[ 327] */ new Table(0, 0, -1, null), // Shortest string "]"
/* NxS[ 328] */ new Table(0, 0, -1, null), // Shortest string "\\"
/* NxS[ 329] */ // Shortest string "\t"
      new Table(21, 20, 328, new short[] {329, 330, 331, 328, 328, 328, 
          328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 329, 328, 328, 332}),
/* NxS[ 330] */ // Shortest string "\r"
      new Table(21, 20, 328, new short[] {331, 328, 331, 328, 328, 328, 
          328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 331, 328, 328, 332}),
/* NxS[ 331] */ // Shortest string "\n"
      new Table(21, 20, 328, new short[] {331, 328, 328, 328, 328, 328, 
          328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 331, 328, 328, 332}),
/* NxS[ 332] */ new Table(0, 0, -1, null), // Shortest string "<"
/* NxS[ 333] */ new Table(0, 0, -1, null), // Shortest string "\\"
/* NxS[ 334] */ // Shortest string "\t"
      new Table(21, 22, 333, new short[] {334, 335, 336, 333, 333, 333, 
          333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 334, 333, 333, 333, 333, 337}),
/* NxS[ 335] */ // Shortest string "\r"
      new Table(21, 22, 333, new short[] {336, 333, 336, 333, 333, 333, 
          333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 336, 333, 333, 333, 333, 337}),
/* NxS[ 336] */ // Shortest string "\n"
      new Table(21, 22, 333, new short[] {336, 333, 333, 333, 333, 333, 
          333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 336, 333, 333, 333, 333, 337}),
/* NxS[ 337] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[ 338] */ // Shortest string ""
      new Table(24, 2, 339, new short[] {340, 341}),
/* NxS[ 339] */ // Shortest string "\\"
      new Table(24, 2, 339, new short[] {-1, -1}),
/* NxS[ 340] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[ 341] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[ 342] */ // Shortest string ""
      new Table(0, 1, 344, new short[] {343}),
/* NxS[ 343] */ new Table(0, 0, -1, null), // Shortest string ""
/* NxS[ 344] */ // Shortest string "\\"
      new Table(0, 1, 344, new short[] {-1}),
/* NxS[ 345] */ // Shortest string ""
      new Table(41, 1, 346, new short[] {347}),
/* NxS[ 346] */ // Shortest string "\\"
      new Table(41, 1, 346, new short[] {-1}),
/* NxS[ 347] */ new Table(0, 0, -1, null), // Shortest string "]"
/* NxS[ 348] */ new Table(0, 0, -1, null), // Shortest string "\\"
/* NxS[ 349] */ // Shortest string "\t"
      new Table(21, 20, 348, new short[] {349, 350, 351, 348, 348, 348, 
          348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 349, 348, 348, 352}),
/* NxS[ 350] */ // Shortest string "\r"
      new Table(21, 20, 348, new short[] {351, 348, 351, 348, 348, 348, 
          348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 351, 348, 348, 352}),
/* NxS[ 351] */ // Shortest string "\n"
      new Table(21, 20, 348, new short[] {351, 348, 348, 348, 348, 348, 
          348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 351, 348, 348, 352}),
/* NxS[ 352] */ new Table(0, 0, -1, null), // Shortest string "<"
/* NxS[ 353] */ new Table(0, 0, -1, null), // Shortest string "\\"
/* NxS[ 354] */ // Shortest string "\t"
      new Table(21, 22, 353, new short[] {354, 355, 356, 353, 353, 353, 
          353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 354, 353, 353, 353, 353, 357}),
/* NxS[ 355] */ // Shortest string "\r"
      new Table(21, 22, 353, new short[] {356, 353, 356, 353, 353, 353, 
          353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 356, 353, 353, 353, 353, 357}),
/* NxS[ 356] */ // Shortest string "\n"
      new Table(21, 22, 353, new short[] {356, 353, 353, 353, 353, 353, 
          353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 356, 353, 353, 353, 353, 357}),
/* NxS[ 357] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[ 358] */ // Shortest string ""
      new Table(21, 32, 1, new short[] {-1, -1, -1, 3, 4, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 5, 6, 1, 1, 1, 
          -1, 1, -1, -1, -1, -1, -1, 1, 1, 360}),
/* NxS[ 359] */ // Shortest string "^"
      new Table(21, 32, 1, new short[] {2, -1, -1, 3, 4, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 6, 1, 1, 1, 
          -1, 1, -1, -1, -1, -1, -1, 1, 1, 360}),
/* NxS[ 360] */ // Shortest string "\\"
      new Table(50, 39, -1, new short[] {10, -1, 8, 9, 10, 11, 
          12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 21, 22, 23, 10, 10, 24, 
          -1, -1, -1, -1, -1, 25, 10, 10, 26, 10, 10, 10, 10, 27, 10, 10, 
          28}),
/* NxS[ 361] */ // Shortest string "\\begin\t"
      new Table(21, 17, -1, new short[] {361, 362, 363, 364, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 361}),
/* NxS[ 362] */ // Shortest string "\\begin\r"
      new Table(21, 17, -1, new short[] {363, -1, 363, 364, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 363}),
/* NxS[ 363] */ // Shortest string "\\begin\n"
      new Table(21, 17, -1, new short[] {363, -1, -1, 364, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 363}),
/* NxS[ 364] */ // Shortest string "\\begin{"
      new Table(2, 25, 365, new short[] {366, 365, 365, 365, 365, 367, 
          365, 368, 365, 365, 365, 365, 365, 365, 369, 365, 365, 365, 365, 365, 365, 365, 
          365, -1, 370}),
/* NxS[ 365] */ // Shortest string "\\begin{\\"
      new Table(25, 1, 365, new short[] {83}),
/* NxS[ 366] */ // Shortest string "\\begin{d"
      new Table(3, 23, 365, new short[] {395, 365, 365, 365, 396, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 
          83}),
/* NxS[ 367] */ // Shortest string "\\begin{e"
      new Table(8, 18, 365, new short[] {387, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 368] */ // Shortest string "\\begin{t"
      new Table(11, 15, 365, new short[] {381, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 369] */ // Shortest string "\\begin{i"
      new Table(9, 17, 365, new short[] {375, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 370] */ // Shortest string "\\begin{f"
      new Table(18, 8, 365, new short[] {371, 365, 365, 365, 365, 365, 
          365, 83}),
/* NxS[ 371] */ // Shortest string "\\begin{fr"
      new Table(11, 15, 365, new short[] {372, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 372] */ // Shortest string "\\begin{fra"
      new Table(6, 20, 365, new short[] {373, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 373] */ // Shortest string "\\begin{fram"
      new Table(7, 19, 365, new short[] {374, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 374] */ // Shortest string "\\begin{frame"
      new Table(25, 1, 365, new short[] {84}),
/* NxS[ 375] */ // Shortest string "\\begin{it"
      new Table(7, 19, 365, new short[] {376, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 376] */ // Shortest string "\\begin{ite"
      new Table(6, 20, 365, new short[] {377, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 377] */ // Shortest string "\\begin{item"
      new Table(16, 10, 365, new short[] {378, 365, 365, 365, 365, 365, 
          365, 365, 365, 83}),
/* NxS[ 378] */ // Shortest string "\\begin{itemi"
      new Table(25, 3, 365, new short[] {83, 365, 379}),
/* NxS[ 379] */ // Shortest string "\\begin{itemiz"
      new Table(7, 19, 365, new short[] {380, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 380] */ // Shortest string "\\begin{itemize"
      new Table(25, 1, 365, new short[] {85}),
/* NxS[ 381] */ // Shortest string "\\begin{ta"
      new Table(20, 6, 365, new short[] {382, 365, 365, 365, 365, 83}),
/* NxS[ 382] */ // Shortest string "\\begin{tab"
      new Table(5, 21, 365, new short[] {383, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 383] */ // Shortest string "\\begin{tabu"
      new Table(10, 16, 365, new short[] {384, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 384] */ // Shortest string "\\begin{tabul"
      new Table(11, 15, 365, new short[] {385, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 385] */ // Shortest string "\\begin{tabula"
      new Table(18, 8, 365, new short[] {386, 365, 365, 365, 365, 365, 
          365, 83}),
/* NxS[ 386] */ // Shortest string "\\begin{tabular"
      new Table(25, 1, 365, new short[] {86}),
/* NxS[ 387] */ // Shortest string "\\begin{en"
      new Table(5, 21, 365, new short[] {388, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 388] */ // Shortest string "\\begin{enu"
      new Table(6, 20, 365, new short[] {389, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 389] */ // Shortest string "\\begin{enum"
      new Table(7, 19, 365, new short[] {390, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 390] */ // Shortest string "\\begin{enume"
      new Table(18, 8, 365, new short[] {391, 365, 365, 365, 365, 365, 
          365, 83}),
/* NxS[ 391] */ // Shortest string "\\begin{enumer"
      new Table(11, 15, 365, new short[] {392, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 392] */ // Shortest string "\\begin{enumera"
      new Table(9, 17, 365, new short[] {393, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 393] */ // Shortest string "\\begin{enumerat"
      new Table(7, 19, 365, new short[] {394, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 394] */ // Shortest string "\\begin{enumerate"
      new Table(25, 1, 365, new short[] {88}),
/* NxS[ 395] */ // Shortest string "\\begin{do"
      new Table(4, 22, 365, new short[] {406, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 396] */ // Shortest string "\\begin{de"
      new Table(12, 14, 365, new short[] {397, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 397] */ // Shortest string "\\begin{des"
      new Table(4, 22, 365, new short[] {398, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 398] */ // Shortest string "\\begin{desc"
      new Table(18, 8, 365, new short[] {399, 365, 365, 365, 365, 365, 
          365, 83}),
/* NxS[ 399] */ // Shortest string "\\begin{descr"
      new Table(16, 10, 365, new short[] {400, 365, 365, 365, 365, 365, 
          365, 365, 365, 83}),
/* NxS[ 400] */ // Shortest string "\\begin{descri"
      new Table(13, 13, 365, new short[] {401, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 401] */ // Shortest string "\\begin{descrip"
      new Table(9, 17, 365, new short[] {402, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 402] */ // Shortest string "\\begin{descript"
      new Table(16, 10, 365, new short[] {403, 365, 365, 365, 365, 365, 
          365, 365, 365, 83}),
/* NxS[ 403] */ // Shortest string "\\begin{descripti"
      new Table(3, 23, 365, new short[] {404, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 
          83}),
/* NxS[ 404] */ // Shortest string "\\begin{descriptio"
      new Table(8, 18, 365, new short[] {405, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 405] */ // Shortest string "\\begin{description"
      new Table(25, 1, 365, new short[] {89}),
/* NxS[ 406] */ // Shortest string "\\begin{doc"
      new Table(5, 21, 365, new short[] {407, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 407] */ // Shortest string "\\begin{docu"
      new Table(6, 20, 365, new short[] {408, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 408] */ // Shortest string "\\begin{docum"
      new Table(7, 19, 365, new short[] {409, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 409] */ // Shortest string "\\begin{docume"
      new Table(8, 18, 365, new short[] {410, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 410] */ // Shortest string "\\begin{documen"
      new Table(9, 17, 365, new short[] {411, 365, 365, 365, 365, 365, 
          365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 83}),
/* NxS[ 411] */ // Shortest string "\\begin{document"
      new Table(25, 1, 365, new short[] {90}),
/* NxS[ 412] */ // Shortest string "\\end\t"
      new Table(21, 17, -1, new short[] {412, 413, 414, 415, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 412}),
/* NxS[ 413] */ // Shortest string "\\end\r"
      new Table(21, 17, -1, new short[] {414, -1, 414, 415, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 414}),
/* NxS[ 414] */ // Shortest string "\\end\n"
      new Table(21, 17, -1, new short[] {414, -1, -1, 415, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 414}),
/* NxS[ 415] */ // Shortest string "\\end{"
      new Table(2, 25, 416, new short[] {417, 416, 416, 416, 416, 418, 
          416, 419, 416, 416, 416, 416, 416, 416, 420, 416, 416, 416, 416, 416, 416, 416, 
          416, -1, 421}),
/* NxS[ 416] */ // Shortest string "\\end{\\"
      new Table(25, 1, 416, new short[] {236}),
/* NxS[ 417] */ // Shortest string "\\end{d"
      new Table(3, 23, 416, new short[] {446, 416, 416, 416, 447, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 
          236}),
/* NxS[ 418] */ // Shortest string "\\end{e"
      new Table(8, 18, 416, new short[] {438, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 419] */ // Shortest string "\\end{t"
      new Table(11, 15, 416, new short[] {432, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 420] */ // Shortest string "\\end{i"
      new Table(9, 17, 416, new short[] {426, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 421] */ // Shortest string "\\end{f"
      new Table(18, 8, 416, new short[] {422, 416, 416, 416, 416, 416, 
          416, 236}),
/* NxS[ 422] */ // Shortest string "\\end{fr"
      new Table(11, 15, 416, new short[] {423, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 423] */ // Shortest string "\\end{fra"
      new Table(6, 20, 416, new short[] {424, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 424] */ // Shortest string "\\end{fram"
      new Table(7, 19, 416, new short[] {425, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 425] */ // Shortest string "\\end{frame"
      new Table(25, 1, 416, new short[] {237}),
/* NxS[ 426] */ // Shortest string "\\end{it"
      new Table(7, 19, 416, new short[] {427, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 427] */ // Shortest string "\\end{ite"
      new Table(6, 20, 416, new short[] {428, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 428] */ // Shortest string "\\end{item"
      new Table(16, 10, 416, new short[] {429, 416, 416, 416, 416, 416, 
          416, 416, 416, 236}),
/* NxS[ 429] */ // Shortest string "\\end{itemi"
      new Table(25, 3, 416, new short[] {236, 416, 430}),
/* NxS[ 430] */ // Shortest string "\\end{itemiz"
      new Table(7, 19, 416, new short[] {431, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 431] */ // Shortest string "\\end{itemize"
      new Table(25, 1, 416, new short[] {238}),
/* NxS[ 432] */ // Shortest string "\\end{ta"
      new Table(20, 6, 416, new short[] {433, 416, 416, 416, 416, 236}),
/* NxS[ 433] */ // Shortest string "\\end{tab"
      new Table(5, 21, 416, new short[] {434, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 434] */ // Shortest string "\\end{tabu"
      new Table(10, 16, 416, new short[] {435, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 435] */ // Shortest string "\\end{tabul"
      new Table(11, 15, 416, new short[] {436, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 436] */ // Shortest string "\\end{tabula"
      new Table(18, 8, 416, new short[] {437, 416, 416, 416, 416, 416, 
          416, 236}),
/* NxS[ 437] */ // Shortest string "\\end{tabular"
      new Table(25, 1, 416, new short[] {239}),
/* NxS[ 438] */ // Shortest string "\\end{en"
      new Table(5, 21, 416, new short[] {439, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 439] */ // Shortest string "\\end{enu"
      new Table(6, 20, 416, new short[] {440, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 440] */ // Shortest string "\\end{enum"
      new Table(7, 19, 416, new short[] {441, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 441] */ // Shortest string "\\end{enume"
      new Table(18, 8, 416, new short[] {442, 416, 416, 416, 416, 416, 
          416, 236}),
/* NxS[ 442] */ // Shortest string "\\end{enumer"
      new Table(11, 15, 416, new short[] {443, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 443] */ // Shortest string "\\end{enumera"
      new Table(9, 17, 416, new short[] {444, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 444] */ // Shortest string "\\end{enumerat"
      new Table(7, 19, 416, new short[] {445, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 445] */ // Shortest string "\\end{enumerate"
      new Table(25, 1, 416, new short[] {240}),
/* NxS[ 446] */ // Shortest string "\\end{do"
      new Table(4, 22, 416, new short[] {457, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 447] */ // Shortest string "\\end{de"
      new Table(12, 14, 416, new short[] {448, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 448] */ // Shortest string "\\end{des"
      new Table(4, 22, 416, new short[] {449, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 449] */ // Shortest string "\\end{desc"
      new Table(18, 8, 416, new short[] {450, 416, 416, 416, 416, 416, 
          416, 236}),
/* NxS[ 450] */ // Shortest string "\\end{descr"
      new Table(16, 10, 416, new short[] {451, 416, 416, 416, 416, 416, 
          416, 416, 416, 236}),
/* NxS[ 451] */ // Shortest string "\\end{descri"
      new Table(13, 13, 416, new short[] {452, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 452] */ // Shortest string "\\end{descrip"
      new Table(9, 17, 416, new short[] {453, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 453] */ // Shortest string "\\end{descript"
      new Table(16, 10, 416, new short[] {454, 416, 416, 416, 416, 416, 
          416, 416, 416, 236}),
/* NxS[ 454] */ // Shortest string "\\end{descripti"
      new Table(3, 23, 416, new short[] {455, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 
          236}),
/* NxS[ 455] */ // Shortest string "\\end{descriptio"
      new Table(8, 18, 416, new short[] {456, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 456] */ // Shortest string "\\end{description"
      new Table(25, 1, 416, new short[] {241}),
/* NxS[ 457] */ // Shortest string "\\end{doc"
      new Table(5, 21, 416, new short[] {458, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 458] */ // Shortest string "\\end{docu"
      new Table(6, 20, 416, new short[] {459, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 459] */ // Shortest string "\\end{docum"
      new Table(7, 19, 416, new short[] {460, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 460] */ // Shortest string "\\end{docume"
      new Table(8, 18, 416, new short[] {461, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 461] */ // Shortest string "\\end{documen"
      new Table(9, 17, 416, new short[] {462, 416, 416, 416, 416, 416, 
          416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 236}),
/* NxS[ 462] */ // Shortest string "\\end{document"
      new Table(25, 1, 416, new short[] {242}),
/* NxS[ 463] */ // Shortest string "\\t"
      new Table(7, 1, -1, new short[] {470}),
/* NxS[ 464] */ // Shortest string "\\L"
      new Table(11, 1, -1, new short[] {467}),
/* NxS[ 465] */ // Shortest string "\\~"
      new Table(24, 1, -1, new short[] {466}),
/* NxS[ 466] */ // Shortest string "\\~{"
      new Table(25, 1, -1, new short[] {315}),
/* NxS[ 467] */ // Shortest string "\\La"
      new Table(35, 1, -1, new short[] {468}),
/* NxS[ 468] */ // Shortest string "\\LaT"
      new Table(7, 1, -1, new short[] {469}),
/* NxS[ 469] */ // Shortest string "\\LaTe"
      new Table(36, 1, -1, new short[] {316}),
/* NxS[ 470] */ // Shortest string "\\te"
      new Table(28, 1, -1, new short[] {471}),
/* NxS[ 471] */ // Shortest string "\\tex"
      new Table(9, 1, -1, new short[] {472}),
/* NxS[ 472] */ // Shortest string "\\text"
      new Table(11, 10, -1, new short[] {473, -1, 474, -1, -1, -1, 
          -1, -1, -1, 475}),
/* NxS[ 473] */ // Shortest string "\\texta"
      new Table(12, 1, -1, new short[] {488}),
/* NxS[ 474] */ // Shortest string "\\textp"
      new Table(16, 1, -1, new short[] {485}),
/* NxS[ 475] */ // Shortest string "\\textb"
      new Table(11, 1, -1, new short[] {476}),
/* NxS[ 476] */ // Shortest string "\\textba"
      new Table(4, 1, -1, new short[] {477}),
/* NxS[ 477] */ // Shortest string "\\textbac"
      new Table(14, 1, -1, new short[] {478}),
/* NxS[ 478] */ // Shortest string "\\textback"
      new Table(12, 1, -1, new short[] {479}),
/* NxS[ 479] */ // Shortest string "\\textbacks"
      new Table(10, 1, -1, new short[] {480}),
/* NxS[ 480] */ // Shortest string "\\textbacksl"
      new Table(11, 1, -1, new short[] {481}),
/* NxS[ 481] */ // Shortest string "\\textbacksla"
      new Table(12, 1, -1, new short[] {482}),
/* NxS[ 482] */ // Shortest string "\\textbackslas"
      new Table(17, 1, -1, new short[] {483}),
/* NxS[ 483] */ // Shortest string "\\textbackslash"
      new Table(24, 1, -1, new short[] {484}),
/* NxS[ 484] */ // Shortest string "\\textbackslash{"
      new Table(25, 1, -1, new short[] {318}),
/* NxS[ 485] */ // Shortest string "\\textpi"
      new Table(13, 1, -1, new short[] {486}),
/* NxS[ 486] */ // Shortest string "\\textpip"
      new Table(7, 1, -1, new short[] {319}),
/* NxS[ 487] */ // Shortest string "\\textpipe{"
      new Table(25, 1, -1, new short[] {320}),
/* NxS[ 488] */ // Shortest string "\\textas"
      new Table(4, 1, -1, new short[] {489}),
/* NxS[ 489] */ // Shortest string "\\textasc"
      new Table(16, 1, -1, new short[] {490}),
/* NxS[ 490] */ // Shortest string "\\textasci"
      new Table(16, 1, -1, new short[] {491}),
/* NxS[ 491] */ // Shortest string "\\textascii"
      new Table(4, 1, -1, new short[] {492}),
/* NxS[ 492] */ // Shortest string "\\textasciic"
      new Table(16, 1, -1, new short[] {493}),
/* NxS[ 493] */ // Shortest string "\\textasciici"
      new Table(18, 1, -1, new short[] {494}),
/* NxS[ 494] */ // Shortest string "\\textasciicir"
      new Table(4, 1, -1, new short[] {495}),
/* NxS[ 495] */ // Shortest string "\\textasciicirc"
      new Table(5, 1, -1, new short[] {496}),
/* NxS[ 496] */ // Shortest string "\\textasciicircu"
      new Table(6, 1, -1, new short[] {497}),
/* NxS[ 497] */ // Shortest string "\\textasciicircum"
      new Table(24, 1, -1, new short[] {498}),
/* NxS[ 498] */ // Shortest string "\\textasciicircum{"
      new Table(25, 1, -1, new short[] {321}),
/* NxS[ 499] */ // Shortest string ""
      new Table(21, 20, 328, new short[] {329, 330, 331, 328, 328, 328, 
          328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 329, 328, 328, 332}),
/* NxS[ 500] */ // Shortest string ""
      new Table(21, 22, 333, new short[] {334, 335, 336, 333, 333, 333, 
          333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 334, 333, 333, 333, 333, 337}),
/* NxS[ 501] */ // Shortest string ""
      new Table(21, 20, 348, new short[] {349, 350, 351, 348, 348, 348, 
          348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 349, 348, 348, 352}),
/* NxS[ 502] */ // Shortest string ""
      new Table(21, 22, 353, new short[] {354, 355, 356, 353, 353, 353, 
          353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 354, 353, 353, 353, 353, 357}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = Map(code) - NxS[state].min;
            if (idx < 0) idx += 51;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     public Scanner(Stream file) {
            SetSource(file, 65001); // unicode option
        }

        public Scanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     public Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan()
        {
// User-specified prolog to scan()
string unformattedText = "";
    int spaces = 0;
    int nls = 0;
    int tbl = 0;
// End, user-specified prolog
                for (; ; )
                {
                    int next;              // next state to enter                   
#if BACKUP
                    Result rslt = Result.noMatch;
#endif // BACKUP
#if LEFTANCHORS
                    for (;;)
                    {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) 
                            break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart)
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();
                    
                    while ((next = NextState()) > eofNum) // Exit for goStart AND for eofNum
#if BACKUP
                        if (state <= maxAccept && next > maxAccept) // need to prepare backup data
                        {
                            // ctx is an object. The fields may be 
                            // mutated by the call to Recurse2.
                            // On return the data in ctx is the
                            // *latest* accept state that was found.
                            
                            rslt = Recurse2(ref ctx, next);
                            if (rslt == Result.noMatch) 
                                RestoreStateAndPos(ref ctx);
                            break;
                        }
                        else
#endif // BACKUP
                        {
                            state = next;
                            GetCode();
                        }
                    if (state <= maxAccept) 
                    {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162
    switch (state)
    {
        case eofNum:
            switch (currentStart) {
                case 358:
/* to process, or not to process? */
                    break;
            }
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '[^#\$%\^&_\{\}~\\[:IsWhiteSpace:]]',	Shortest string "d"
BEGIN(str); yyless(0); unformattedText = ""; /*spaces = 0;*/ nls = 0;
            break;
        case 2: // Recognized '^{wsp}',	Shortest string "^\t"
/*ignore*/
            break;
        case 3: // Recognized '\{',	Shortest string "{"
return '{';
            break;
        case 4: // Recognized '\}',	Shortest string "}"
return '}';
            break;
        case 5: // Recognized '&',	Shortest string "&"
return '&';
            break;
        case 6: // Recognized '%.*\r?\n?{ws}',	Shortest string "%"
        case 7: // Recognized '%.*\r?\n?{ws}',	Shortest string "%\n"
/*ignore*/
            break;
        case 8: // Recognized '\\\\|\\cr',	Shortest string "\\\\"
        case 277: // Recognized '\\\\|\\cr',	Shortest string "\\cr"
BEGIN(pre_optional); if(tabular) return (int) Tokens.ENDROW; else return (int) Tokens.NL;
            break;
        case 9: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\d"
        case 10: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\o"
        case 11: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\c"
        case 12: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\u"
        case 13: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\m"
        case 14: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\e"
        case 15: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\n"
        case 16: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\t"
        case 17: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\l"
        case 18: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\a"
        case 19: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\s"
        case 20: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\p"
        case 21: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\g"
        case 22: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\i"
        case 23: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\h"
        case 24: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\b"
        case 25: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\f"
        case 26: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\L"
        case 27: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\H"
        case 29: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\Hu"
        case 30: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\Hug"
        case 32: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\La"
        case 33: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\LA"
        case 34: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\LAR"
        case 35: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\LARG"
        case 37: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\Lar"
        case 38: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\LaT"
        case 39: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\LaTe"
        case 42: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\Larg"
        case 44: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\fo"
        case 45: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\fr"
        case 46: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\fra"
        case 47: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\fram"
        case 49: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\framet"
        case 50: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\frames"
        case 51: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\framesu"
        case 52: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\framesub"
        case 53: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\framesubt"
        case 54: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\framesubti"
        case 55: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\framesubtit"
        case 56: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\framesubtitl"
        case 58: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\frameti"
        case 59: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\frametit"
        case 60: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\frametitl"
        case 62: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\foo"
        case 63: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\foot"
        case 64: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\footn"
        case 65: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\footno"
        case 66: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\footnot"
        case 67: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\footnote"
        case 68: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\footnotes"
        case 69: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\footnotesi"
        case 70: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\footnotesiz"
        case 72: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\be"
        case 73: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\bf"
        case 74: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\bfs"
        case 75: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\bfse"
        case 76: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\bfser"
        case 77: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\bfseri"
        case 78: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\bfserie"
        case 80: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\beg"
        case 81: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\begi"
        case 82: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\begin"
        case 91: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\hu"
        case 92: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\hl"
        case 93: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\hli"
        case 94: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\hlin"
        case 96: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\hug"
        case 98: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\in"
        case 99: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\it"
        case 100: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\ite"
        case 101: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\its"
        case 102: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\itsh"
        case 103: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\itsha"
        case 104: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\itshap"
        case 107: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\inc"
        case 108: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\incl"
        case 109: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\inclu"
        case 110: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\includ"
        case 111: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\include"
        case 112: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\includeg"
        case 113: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\includegr"
        case 114: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\includegra"
        case 115: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\includegrap"
        case 116: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\includegraph"
        case 117: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\includegraphi"
        case 118: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\includegraphic"
        case 120: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\gr"
        case 121: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\gra"
        case 122: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\grap"
        case 123: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\graph"
        case 124: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\graphi"
        case 125: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\graphic"
        case 126: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\graphics"
        case 127: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\graphicsp"
        case 128: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\graphicspa"
        case 129: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\graphicspat"
        case 131: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\pa"
        case 132: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\pau"
        case 133: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\paus"
        case 135: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\sc"
        case 136: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\su"
        case 137: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\sm"
        case 138: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\se"
        case 139: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\sec"
        case 140: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\sect"
        case 141: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\secti"
        case 142: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\sectio"
        case 144: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\sma"
        case 145: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\smal"
        case 147: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\sub"
        case 148: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\subs"
        case 149: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\subsu"
        case 150: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\subse"
        case 151: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\subsec"
        case 152: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\subsect"
        case 153: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\subsecti"
        case 154: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\subsectio"
        case 156: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\subsub"
        case 157: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\subsubs"
        case 158: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\subsubse"
        case 159: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\subsubsec"
        case 160: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\subsubsect"
        case 161: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\subsubsecti"
        case 162: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\subsubsectio"
        case 164: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\scs"
        case 165: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\scr"
        case 166: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\scri"
        case 167: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\scrip"
        case 168: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\script"
        case 169: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\scripts"
        case 170: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\scriptsi"
        case 171: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\scriptsiz"
        case 173: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\scsh"
        case 174: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\scsha"
        case 175: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\scshap"
        case 177: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\au"
        case 178: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\an"
        case 180: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\aut"
        case 181: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\auth"
        case 182: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\autho"
        case 184: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\la"
        case 185: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\lar"
        case 186: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\larg"
        case 188: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\to"
        case 189: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\te"
        case 190: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\tt"
        case 191: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\ti"
        case 192: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\tin"
        case 193: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\tit"
        case 194: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\titl"
        case 196: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\titlep"
        case 197: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\titlepa"
        case 198: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\titlepag"
        case 201: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\ttf"
        case 202: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\ttfa"
        case 203: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\ttfam"
        case 204: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\ttfami"
        case 205: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\ttfamil"
        case 207: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\tex"
        case 208: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\text"
        case 209: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\textc"
        case 210: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\textt"
        case 211: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\texts"
        case 212: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\texti"
        case 213: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\textb"
        case 218: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\textco"
        case 219: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\textcol"
        case 220: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\textcolo"
        case 222: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\tod"
        case 223: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\toda"
        case 225: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\no"
        case 226: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\nor"
        case 227: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\norm"
        case 228: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\norma"
        case 229: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\normal"
        case 230: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\normals"
        case 231: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\normalsi"
        case 232: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\normalsiz"
        case 234: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\en"
        case 235: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\end"
        case 243: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\mu"
        case 244: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\mul"
        case 245: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\mult"
        case 246: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\multi"
        case 247: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\multic"
        case 248: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\multico"
        case 249: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\multicol"
        case 250: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\multicolu"
        case 251: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\multicolum"
        case 253: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\un"
        case 254: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\us"
        case 255: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\use"
        case 256: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\uset"
        case 257: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\usep"
        case 258: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\usepa"
        case 259: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\usepac"
        case 260: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\usepack"
        case 261: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\usepacka"
        case 262: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\usepackag"
        case 264: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\useth"
        case 265: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\usethe"
        case 266: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\usethem"
        case 268: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\und"
        case 269: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\unde"
        case 270: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\under"
        case 271: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\underl"
        case 272: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\underli"
        case 273: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\underlin"
        case 275: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\co"
        case 276: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\cl"
        case 278: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\cli"
        case 279: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\clin"
        case 281: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\col"
        case 282: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\colo"
        case 284: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\do"
        case 285: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\da"
        case 286: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\dat"
        case 288: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\doc"
        case 289: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\docu"
        case 290: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\docum"
        case 291: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\docume"
        case 292: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\documen"
        case 293: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\document"
        case 294: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\documentc"
        case 295: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\documentcl"
        case 296: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\documentcla"
        case 297: // Recognized '\\[[:IsLetter:]]+',	Shortest string "\\documentclas"
printWarning("Unknown command " + yytext);
            break;
        case 28: // Recognized '\\[ ]',	Shortest string "\\\x20"
{}
            break;
        case 31: // Recognized '\\Huge',	Shortest string "\\Huge"
return (int) Tokens.HUGE2;
            break;
        case 36: // Recognized '\\LARGE',	Shortest string "\\LARGE"
return (int) Tokens.LARGE3;
            break;
        case 40: // Recognized '\\LaTeX[ ]?',	Shortest string "\\LaTeX"
        case 41: // Recognized '\\LaTeX[ ]?',	Shortest string "\\LaTeX\x20"
BEGIN(str); unformattedText = @"LaTeX"; spaces = 0; nls = 0;
            break;
        case 43: // Recognized '\\Large',	Shortest string "\\Large"
return (int) Tokens.LARGE2;
            break;
        case 48: // Recognized '\\frame',	Shortest string "\\frame"
return (int) Tokens.FRAME;
            break;
        case 57: // Recognized '\\framesubtitle',	Shortest string "\\framesubtitle"
BEGIN(pre_overlay); return (int) Tokens.FRAMESUBTITLE;
            break;
        case 61: // Recognized '\\frametitle',	Shortest string "\\frametitle"
BEGIN(pre_overlay); return (int) Tokens.FRAMETITLE;
            break;
        case 71: // Recognized '\\footnotesize',	Shortest string "\\footnotesize"
return (int) Tokens.FOOTNOTESIZE;
            break;
        case 79: // Recognized '\\bfseries',	Shortest string "\\bfseries"
return (int) Tokens.BFSERIES;
            break;
        case 83: // Recognized '{envBegin}\{[^\}]+\}',	Shortest string "\\begin{\\}"
        case 86: // Recognized '{envBegin}\{[^\}]+\}',	Shortest string "\\begin{tabular}"
printWarning("Unknown environment " + yytext);
            break;
        case 84: // Recognized '{envBegin}\{frame\}',	Shortest string "\\begin{frame}"
return (int) Tokens.BEGIN_FRAME;
            break;
        case 85: // Recognized '{envBegin}\{itemize\}',	Shortest string "\\begin{itemize}"
return (int) Tokens.BEGIN_ITEMIZE;
            break;
        case 87: // Recognized '{envBegin}\{tabular\}\{',	Shortest string "\\begin{tabular}{"
tabular = true; BEGIN(tabular_arg); tbl = 0; unformattedText = ""; return (int) Tokens.BEGIN_TABULAR;
            break;
        case 88: // Recognized '{envBegin}\{enumerate\}',	Shortest string "\\begin{enumerate}"
return (int) Tokens.BEGIN_ENUMERATE;
            break;
        case 89: // Recognized '{envBegin}\{description\}',	Shortest string "\\begin{description}"
return (int) Tokens.BEGIN_DESCRIPTION;
            break;
        case 90: // Recognized '{envBegin}\{document\}',	Shortest string "\\begin{document}"
return (int) Tokens.BEGIN_DOCUMENT;
            break;
        case 95: // Recognized '\\hline',	Shortest string "\\hline"
return (int) Tokens.HLINE;
            break;
        case 97: // Recognized '\\huge',	Shortest string "\\huge"
return (int) Tokens.HUGE;
            break;
        case 105: // Recognized '\\itshape',	Shortest string "\\itshape"
return (int) Tokens.ITSHAPE;
            break;
        case 106: // Recognized '\\item',	Shortest string "\\item"
BEGIN(pre_overlay); return (int) Tokens.ITEM;
            break;
        case 119: // Recognized '\\includegraphics',	Shortest string "\\includegraphics"
BEGIN(pre_optional); return (int) Tokens.INCLUDEGRAPHICS;
            break;
        case 130: // Recognized '\\graphicspath',	Shortest string "\\graphicspath"
return (int) Tokens.GRAPHICSPATH;
            break;
        case 134: // Recognized '\\pause',	Shortest string "\\pause"
return (int) Tokens.PAUSE;
            break;
        case 143: // Recognized '\\section',	Shortest string "\\section"
return (int) Tokens.SECTION;
            break;
        case 146: // Recognized '\\small',	Shortest string "\\small"
return (int) Tokens.SMALL;
            break;
        case 155: // Recognized '\\subsection',	Shortest string "\\subsection"
return (int) Tokens.SUBSECTION;
            break;
        case 163: // Recognized '\\subsubsection',	Shortest string "\\subsubsection"
return (int) Tokens.SUBSUBSECTION;
            break;
        case 172: // Recognized '\\scriptsize',	Shortest string "\\scriptsize"
return (int) Tokens.SCRIPTSIZE;
            break;
        case 176: // Recognized '\\scshape',	Shortest string "\\scshape"
return (int) Tokens.SCSHAPE;
            break;
        case 179: // Recognized '\\and',	Shortest string "\\and"
return (int) Tokens.AND;
            break;
        case 183: // Recognized '\\author',	Shortest string "\\author"
return (int) Tokens.AUTHOR;
            break;
        case 187: // Recognized '\\large',	Shortest string "\\large"
return (int) Tokens.LARGE;
            break;
        case 195: // Recognized '\\title',	Shortest string "\\title"
return (int) Tokens.TITLE;
            break;
        case 199: // Recognized '\\titlepage',	Shortest string "\\titlepage"
{}
            break;
        case 200: // Recognized '\\tiny',	Shortest string "\\tiny"
return (int) Tokens.TINY;
            break;
        case 206: // Recognized '\\ttfamily',	Shortest string "\\ttfamily"
return (int) Tokens.TTFAMILY;
            break;
        case 214: // Recognized '\\textbf',	Shortest string "\\textbf"
BEGIN(pre_overlay); return (int) Tokens.TEXTBF;
            break;
        case 215: // Recognized '\\textit',	Shortest string "\\textit"
BEGIN(pre_overlay); return (int) Tokens.TEXTIT;
            break;
        case 216: // Recognized '\\textsc',	Shortest string "\\textsc"
BEGIN(pre_overlay); return (int) Tokens.TEXTSC;
            break;
        case 217: // Recognized '\\texttt',	Shortest string "\\texttt"
BEGIN(pre_overlay); return (int) Tokens.TEXTTT;
            break;
        case 221: // Recognized '\\textcolor',	Shortest string "\\textcolor"
BEGIN(pre_overlay); return (int) Tokens.TEXTCOLOR;
            break;
        case 224: // Recognized '\\today',	Shortest string "\\today"
return (int) Tokens.TODAY;
            break;
        case 233: // Recognized '\\normalsize',	Shortest string "\\normalsize"
return (int) Tokens.NORMALSIZE;
            break;
        case 236: // Recognized '{envEnd}\{[^\}]+\}',	Shortest string "\\end{\\}"
printWarning("Unknown environment " + yytext);
            break;
        case 237: // Recognized '{envEnd}\{frame\}',	Shortest string "\\end{frame}"
return (int) Tokens.END_FRAME;
            break;
        case 238: // Recognized '{envEnd}\{itemize\}',	Shortest string "\\end{itemize}"
return (int) Tokens.END_ITEMIZE;
            break;
        case 239: // Recognized '{envEnd}\{tabular\}',	Shortest string "\\end{tabular}"
tabular = false; return (int) Tokens.END_TABULAR;
            break;
        case 240: // Recognized '{envEnd}\{enumerate\}',	Shortest string "\\end{enumerate}"
return (int) Tokens.END_ENUMERATE;
            break;
        case 241: // Recognized '{envEnd}\{description\}',	Shortest string "\\end{description}"
return (int) Tokens.END_DESCRIPTION;
            break;
        case 242: // Recognized '{envEnd}\{document\}',	Shortest string "\\end{document}"
return (int) Tokens.END_DOCUMENT;
            break;
        case 252: // Recognized '\\multicolumn',	Shortest string "\\multicolumn"
return (int) Tokens.MULTICOLUMN;
            break;
        case 263: // Recognized '\\usepackage',	Shortest string "\\usepackage"
BEGIN(pre_optional); return (int) Tokens.USEPACKAGE;
            break;
        case 267: // Recognized '\\usetheme',	Shortest string "\\usetheme"
return (int) Tokens.USETHEME;
            break;
        case 274: // Recognized '\\underline',	Shortest string "\\underline"
BEGIN(pre_overlay); return (int) Tokens.UNDERLINE;
            break;
        case 280: // Recognized '\\cline',	Shortest string "\\cline"
return (int) Tokens.CLINE;
            break;
        case 283: // Recognized '\\color',	Shortest string "\\color"
BEGIN(pre_overlay); return (int) Tokens.COLOR;
            break;
        case 287: // Recognized '\\date',	Shortest string "\\date"
return (int) Tokens.DATE;
            break;
        case 298: // Recognized '\\documentclass',	Shortest string "\\documentclass"
BEGIN(pre_optional); return (int) Tokens.DOCUMENTCLASS;
            break;
        case 299: // In <str> Recognized '[^#\$%\^&_\{\}~\\ \n\t\r]*',	Shortest string ""
        case 300: // In <str> Recognized '[^#\$%\^&_\{\}~\\ \n\t\r]*',	Shortest string "d"
unformattedText += yytext; spaces = 0; nls = 0;
            break;
        case 301: // In <str> Recognized '[#\$\^&_\{\}~\\]',	Shortest string "\\"
        case 305: // In <str> Recognized '[#\$\^&_\{\}~\\]',	Shortest string "{"
BEGIN(INITIAL); yyless(0); yylval.Text = unformattedText; return (int) Tokens.STRING;
            break;
        case 302: // In <str> Recognized '" "|\t',	Shortest string "\t"
spaces++;
                                        if(spaces == 1)
                                            unformattedText += @" ";
            break;
        case 303: // In <str> Recognized '\r',	Shortest string "\r"
/* ignore */
            break;
        case 304: // In <str> Recognized '\n',	Shortest string "\n"
nls++;
                                        if(nls == 1 && spaces == 0) {   // if one empty line add space
                                            unformattedText += @" ";
                                            spaces++;
                                        }
                                        if(nls == 2) {  // if two empty lines remove space and add new line
                                            // need to remove last space
                                            unformattedText.Remove(unformattedText.Length - 1, 1);
                                            unformattedText += "\n";
                                        }
            break;
        case 306: // In <str> Recognized '%.*\n?{ws}',	Shortest string "%"
        case 307: // In <str> Recognized '%.*\n?{ws}',	Shortest string "%\n"
/* ignore comment inside plaintext */
            break;
        case 308: // In <str> Recognized '\\\{',	Shortest string "\\{"
unformattedText += @"{"; spaces = 0; nls = 0;
            break;
        case 309: // In <str> Recognized '\\\}',	Shortest string "\\}"
unformattedText += @"}"; spaces = 0; nls = 0;
            break;
        case 310: // In <str> Recognized '\\&',	Shortest string "\\&"
unformattedText += @"&"; spaces = 0; nls = 0;
            break;
        case 311: // In <str> Recognized '\\%',	Shortest string "\\%"
unformattedText += @"%"; spaces = 0; nls = 0;
            break;
        case 312: // In <str> Recognized '\\#',	Shortest string "\\#"
unformattedText += @"#"; spaces = 0; nls = 0;
            break;
        case 313: // In <str> Recognized '\\\$',	Shortest string "\\$"
unformattedText += @"$"; spaces = 0; nls = 0;
            break;
        case 314: // In <str> Recognized '\\_',	Shortest string "\\_"
unformattedText += @"_"; spaces = 0; nls = 0;
            break;
        case 315: // In <str> Recognized '\\~\{\}',	Shortest string "\\~{}"
unformattedText += @"~"; spaces = 0; nls = 0;
            break;
        case 316: // In <str> Recognized '\\LaTeX[ ]?',	Shortest string "\\LaTeX"
        case 317: // In <str> Recognized '\\LaTeX[ ]?',	Shortest string "\\LaTeX\x20"
unformattedText += @"LaTeX"; spaces = 0; nls = 0;
            break;
        case 318: // In <str> Recognized '\\textbackslash\{\}',	Shortest string "\\textbackslash{}"
unformattedText += @"\"; spaces = 0; nls = 0;
            break;
        case 319: // In <str> Recognized '\\textpipe(\{\})?',	Shortest string "\\textpipe"
        case 320: // In <str> Recognized '\\textpipe(\{\})?',	Shortest string "\\textpipe{}"
unformattedText += @"|"; spaces = 0; nls = 0;
            break;
        case 321: // In <str> Recognized '\\textasciicircum\{\}',	Shortest string "\\textasciicircum{}"
unformattedText += @"^"; spaces = 0; nls = 0;
            break;
        case 322: // In <overlay> Recognized '[^>]*',	Shortest string ""
        case 324: // In <overlay> Recognized '[^>]*',	Shortest string "\\"
unformattedText += yytext;
            break;
        case 323: // In <overlay> Recognized '>',	Shortest string ""
BEGIN(pre_optional); yylval.Text = unformattedText; return (int) Tokens.OVERLAY;
            break;
        case 325: // In <optional> Recognized '[^\]]*',	Shortest string ""
        case 326: // In <optional> Recognized '[^\]]*',	Shortest string "\\"
unformattedText += yytext;
            break;
        case 327: // In <optional> Recognized '\]',	Shortest string "]"
BEGIN(INITIAL); yylval.Text = unformattedText; return (int) Tokens.OPTIONAL;
            break;
        case 328: // In <pre_overlay> Recognized '{wsl}[^<]',	Shortest string "\\"
        case 329: // In <pre_overlay> Recognized '{wsl}[^<]',	Shortest string "\t"
        case 330: // In <pre_overlay> Recognized '{wsl}[^<]',	Shortest string "\r"
        case 331: // In <pre_overlay> Recognized '{wsl}[^<]',	Shortest string "\n"
BEGIN(pre_optional); yyless(0);
            break;
        case 332: // In <pre_overlay> Recognized '{wsl}<',	Shortest string "<"
BEGIN(overlay); unformattedText = "";
            break;
        case 333: // In <pre_optional> Recognized '{wsl}[^[]',	Shortest string "\\"
        case 334: // In <pre_optional> Recognized '{wsl}[^[]',	Shortest string "\t"
        case 335: // In <pre_optional> Recognized '{wsl}[^[]',	Shortest string "\r"
        case 336: // In <pre_optional> Recognized '{wsl}[^[]',	Shortest string "\n"
BEGIN(INITIAL); yyless(0);
            break;
        case 337: // In <pre_optional> Recognized '{wsl}\[',	Shortest string "["
BEGIN(optional); unformattedText = "";
            break;
        case 338: // In <tabular_arg> Recognized '[^{}]*',	Shortest string ""
        case 339: // In <tabular_arg> Recognized '[^{}]*',	Shortest string "\\"
unformattedText += yytext;
            break;
        case 340: // In <tabular_arg> Recognized '\{',	Shortest string "{"
tbl++; unformattedText += @"{";
            break;
        case 341: // In <tabular_arg> Recognized '\}',	Shortest string "}"
tbl--; 
                                    if(tbl < 0) {
                                        yylval.Text = unformattedText;
                                        BEGIN(INITIAL);
                                        return (int) Tokens.STRING;
                                    }
                                    unformattedText += @"}";
            break;
        case 342: // In <boverlay> Recognized '[^>]*',	Shortest string ""
        case 344: // In <boverlay> Recognized '[^>]*',	Shortest string "\\"
{}
            break;
        case 343: // In <boverlay> Recognized '>',	Shortest string ""
BEGIN(bpre_optional);
            break;
        case 345: // In <boptional> Recognized '[^\]]*',	Shortest string ""
        case 346: // In <boptional> Recognized '[^\]]*',	Shortest string "\\"
{}
            break;
        case 347: // In <boptional> Recognized '\]',	Shortest string "]"
BEGIN(INITIAL);
            break;
        case 348: // In <bpre_overlay> Recognized '{wsl}[^<]',	Shortest string "\\"
        case 349: // In <bpre_overlay> Recognized '{wsl}[^<]',	Shortest string "\t"
        case 350: // In <bpre_overlay> Recognized '{wsl}[^<]',	Shortest string "\r"
        case 351: // In <bpre_overlay> Recognized '{wsl}[^<]',	Shortest string "\n"
BEGIN(bpre_optional); yyless(0);
            break;
        case 352: // In <bpre_overlay> Recognized '{wsl}<',	Shortest string "<"
BEGIN(boverlay);
            break;
        case 353: // In <bpre_optional> Recognized '{wsl}[^[]',	Shortest string "\\"
        case 354: // In <bpre_optional> Recognized '{wsl}[^[]',	Shortest string "\t"
        case 355: // In <bpre_optional> Recognized '{wsl}[^[]',	Shortest string "\r"
        case 356: // In <bpre_optional> Recognized '{wsl}[^[]',	Shortest string "\n"
BEGIN(INITIAL); yyless(0);
            break;
        case 357: // In <bpre_optional> Recognized '{wsl}\[',	Shortest string "["
BEGIN(boptional);
            break;
        default:
            break;
    }
#pragma warning restore 162
#endregion
                    }
                }
        }

#if BACKUP
        Result Recurse2(ref Context ctx, int next)
        {
            // Assert: at entry "state" is an accept state AND
            //         NextState(state, code) != goStart AND
            //         NextState(state, code) is not an accept state.
            //
            SaveStateAndPos(ref ctx);
            state = next;
            GetCode();

            while ((next = NextState()) > eofNum)
            {
                if (state <= maxAccept && next > maxAccept) // need to update backup data
                    SaveStateAndPos(ref ctx);
                state = next;
                if (state == eofNum) return Result.accept;
                GetCode(); 
            }
            return (state <= maxAccept ? Result.accept : Result.noMatch);
        }

        void SaveStateAndPos(ref Context ctx)
        {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx)
        {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }

#endif // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
#region UserCodeSection

override public void yyerror(string format, params object[] args)
{
    string tmp;

    tmp = System.String.Format("{0}:{1} - ", yyline, yycol);
    Messenger.Instance.SendMessage(tmp + format, SimpleConverter.Contract.MessageLevel.ERROR);
}

/// <summary>
/// Print warning message
/// </summary>
/// <param name="message">Message</param>
private void printWarning(string message)
{
    string tmp;

    tmp = System.String.Format("{0}:{1} - ", yyline, yycol);
    Messenger.Instance.SendMessage(tmp + message, SimpleConverter.Contract.MessageLevel.WARNING);
}

#endregion
    } // end class $Scanner

// ==============================================================
// <auto-generated>
// This code automatically produced from an embedded resource.
// Do not edit this file, or it will become incompatible with 
// the specification from which it was generated.
// </auto-generated>
// ==============================================================

// Code copied from GPLEX embedded resource
    [Serializable]
    public class BufferException : Exception
    {
        public BufferException() { }
        public BufferException(string message) : base(message) { }
        public BufferException(string message, Exception innerException)
            : base(message, innerException) { }
        protected BufferException(SerializationInfo info, StreamingContext context)
            : base(info, context) { }
    }

    public abstract class ScanBuff
    {
        private string fileNm;

        public const int EndOfFile = -1;
        public const int UnicodeReplacementChar = 0xFFFD;

        public bool IsFile { get { return (fileNm != null); } }
        public string FileName { get { return fileNm; } set { fileNm = value; } }

        public abstract int Pos { get; set; }
        public abstract int Read();
        public virtual void Mark() { }

        public abstract string GetString(int begin, int limit);

        public static ScanBuff GetBuffer(string source)
        {
            return new StringBuffer(source);
        }

        public static ScanBuff GetBuffer(IList<string> source)
        {
            return new LineBuffer(source);
        }

#if (!NOFILES)
        public static ScanBuff GetBuffer(Stream source)
        {
            return new BuildBuffer(source);
        }

#if (!BYTEMODE)
        public static ScanBuff GetBuffer(Stream source, int fallbackCodePage)
        {
            return new BuildBuffer(source, fallbackCodePage);
        }
#endif // !BYTEMODE
#endif // !NOFILES
    }

    #region Buffer classes

    // ==============================================================
    // =====  Definitions for various ScanBuff derived classes   ====
    // ==============================================================
    // ===============         String input          ================
    // ==============================================================

    /// <summary>
    /// This class reads characters from a single string as
    /// required, for example, by Visual Studio language services
    /// </summary>
    sealed class StringBuffer : ScanBuff
    {
        string str;        // input buffer
        int bPos;          // current position in buffer
        int sLen;

        public StringBuffer(string source)
        {
            this.str = source;
            this.sLen = source.Length;
            this.FileName = null;
        }

        public override int Read()
        {
            if (bPos < sLen) return str[bPos++];
            else if (bPos == sLen) { bPos++; return '\n'; }   // one strike, see new line
            else { bPos++; return EndOfFile; }                // two strikes and you're out!
        }

        public override string GetString(int begin, int limit)
        {
            //  "limit" can be greater than sLen with the BABEL
            //  option set.  Read returns a "virtual" EOL if
            //  an attempt is made to read past the end of the
            //  string buffer.  Without the guard any attempt 
            //  to fetch yytext for a token that includes the 
            //  EOL will throw an index exception.
            if (limit > sLen) limit = sLen;
            if (limit <= begin) return "";
            else return str.Substring(begin, limit - begin);
        }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }

        public override string ToString() { return "StringBuffer"; }
    }

    // ==============================================================
    //  The LineBuff class contributed by Nigel Horspool, 
    //  nigelh@cs.uvic.cs
    // ==============================================================

    sealed class LineBuffer : ScanBuff
    {
        IList<string> line;    // list of source lines from a file
        int numLines;          // number of strings in line list
        string curLine;        // current line in that list
        int cLine;             // index of current line in the list
        int curLen;            // length of current line
        int curLineStart;      // position of line start in whole file
        int curLineEnd;        // position of line end in whole file
        int maxPos;            // max position ever visited in whole file
        int cPos;              // ordinal number of code in source

        // Constructed from a list of strings, one per source line.
        // The lines have had trailing '\n' characters removed.
        public LineBuffer(IList<string> lineList)
        {
            line = lineList;
            numLines = line.Count;
            cPos = curLineStart = 0;
            curLine = (numLines > 0 ? line[0] : "");
            maxPos = curLineEnd = curLen = curLine.Length;
            cLine = 1;
            FileName = null;
        }

        public override int Read()
        {
            if (cPos < curLineEnd)
                return curLine[cPos++ - curLineStart];
            if (cPos++ == curLineEnd)
                return '\n';
            if (cLine >= numLines)
                return EndOfFile;
            curLine = line[cLine];
            curLen = curLine.Length;
            curLineStart = curLineEnd + 1;
            curLineEnd = curLineStart + curLen;
            if (curLineEnd > maxPos)
                maxPos = curLineEnd;
            cLine++;
            return curLen > 0 ? curLine[0] : '\n';
        }

        // To speed up searches for the line containing a position
        private int cachedPosition;
        private int cachedIxdex;
        private int cachedLineStart;

        // Given a position pos within the entire source, the results are
        //   ix     -- the index of the containing line
        //   lstart -- the position of the first character on that line
        private void findIndex(int pos, out int ix, out int lstart)
        {
            if (pos >= cachedPosition)
            {
                ix = cachedIxdex; lstart = cachedLineStart;
            }
            else
            {
                ix = lstart = 0;
            }
            while (ix < numLines)
            {
                int len = line[ix].Length + 1;
                if (pos < lstart + len) break;
                lstart += len;
                ix++;
            }
            cachedPosition = pos;
            cachedIxdex = ix;
            cachedLineStart = lstart;
        }

        public override string GetString(int begin, int limit)
        {
            if (begin >= maxPos || limit <= begin) return "";
            int endIx, begIx, endLineStart, begLineStart;
            findIndex(begin, out begIx, out begLineStart);
            int begCol = begin - begLineStart;
            findIndex(limit, out endIx, out endLineStart);
            int endCol = limit - endLineStart;
            string s = line[begIx];
            if (begIx == endIx)
            {
                // the usual case, substring all on one line
                return (endCol <= s.Length) ?
                    s.Substring(begCol, endCol - begCol)
                    : s.Substring(begCol) + "\n";
            }
            // the string spans multiple lines, yuk!
            StringBuilder sb = new StringBuilder();
            if (begCol < s.Length)
                sb.Append(s.Substring(begCol));
            for (; ; )
            {
                sb.Append("\n");
                s = line[++begIx];
                if (begIx >= endIx) break;
                sb.Append(s);
            }
            if (endCol <= s.Length)
            {
                sb.Append(s.Substring(0, endCol));
            }
            else
            {
                sb.Append(s);
                sb.Append("\n");
            }
            return sb.ToString();
        }

        public override int Pos
        {
            get { return cPos; }
            set
            {
                cPos = value;
                findIndex(cPos, out cLine, out curLineStart);
                // cLine should be the *next* line after curLine.
                curLine = (cLine < numLines ? line[cLine++] : "");
                curLineEnd = curLineStart + curLine.Length;
            }
        }

        public override string ToString() { return "LineBuffer"; }
    }

#if (!NOFILES)
    // ==============================================================
    // =====     class BuildBuff : for unicode text files    ========
    // ==============================================================

    class BuildBuffer : ScanBuff
    {
        // Double buffer for char stream.
        class BufferElement
        {
            StringBuilder bldr = new StringBuilder();
            StringBuilder next = new StringBuilder();
            int minIx;
            int maxIx;
            int brkIx;
            bool appendToNext;

            internal BufferElement() { }

            internal int MaxIndex { get { return maxIx; } }
            // internal int MinIndex { get { return minIx; } }

            internal char this[int index]
            {
                get
                {
                    if (index < minIx || index >= maxIx)
                        throw new BufferException("Index was outside data buffer");
                    else if (index < brkIx)
                        return bldr[index - minIx];
                    else
                        return next[index - brkIx];
                }
            }

            internal void Append(char[] block, int count)
            {
                maxIx += count;
                if (appendToNext)
                    this.next.Append(block, 0, count);
                else
                {
                    this.bldr.Append(block, 0, count);
                    brkIx = maxIx;
                    appendToNext = true;
                }
            }

            internal string GetString(int start, int limit)
            {
                if (limit <= start)
                    return "";
                if (start >= minIx && limit <= maxIx)
                    if (limit < brkIx) // String entirely in bldr builder
                        return bldr.ToString(start - minIx, limit - start);
                    else if (start >= brkIx) // String entirely in next builder
                        return next.ToString(start - brkIx, limit - start);
                    else // Must do a string-concatenation
                        return
                            bldr.ToString(start - minIx, brkIx - start) +
                            next.ToString(0, limit - brkIx);
                else
                    throw new BufferException("String was outside data buffer");
            }

            internal void Mark(int limit)
            {
                if (limit > brkIx + 16) // Rotate blocks
                {
                    StringBuilder temp = bldr;
                    bldr = next;
                    next = temp;
                    next.Length = 0;
                    minIx = brkIx;
                    brkIx = maxIx;
                }
            }
        }

        BufferElement data = new BufferElement();

        int bPos;            // Postion index in the StringBuilder
        BlockReader NextBlk; // Delegate that serves char-arrays;

        private string EncodingName
        {
            get
            {
                StreamReader rdr = NextBlk.Target as StreamReader;
                return (rdr == null ? "raw-bytes" : rdr.CurrentEncoding.BodyName);
            }
        }

        public BuildBuffer(Stream stream)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Raw(stream);
        }

#if (!BYTEMODE)
        public BuildBuffer(Stream stream, int fallbackCodePage)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Get(stream, fallbackCodePage);
        }
#endif

        /// <summary>
        /// Marks a conservative lower bound for the buffer,
        /// allowing space to be reclaimed.  If an application 
        /// needs to call GetString at arbitrary past locations 
        /// in the input stream, Mark() is not called.
        /// </summary>
        public override void Mark() { data.Mark(bPos - 2); }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }


        /// <summary>
        /// Read returns the ordinal number of the next char, or 
        /// EOF (-1) for an end of stream.  Note that the next
        /// code point may require *two* calls of Read().
        /// </summary>
        /// <returns></returns>
        public override int Read()
        {
            //
            //  Characters at positions 
            //  [data.offset, data.offset + data.bldr.Length)
            //  are available in data.bldr.
            //
            if (bPos < data.MaxIndex)
            {
                // ch0 cannot be EOF
                return (int)data[bPos++];
            }
            else // Read from underlying stream
            {
                // Experimental code, blocks of page size
                char[] chrs = new char[4096];
                int count = NextBlk(chrs, 0, 4096);
                if (count == 0)
                    return EndOfFile;
                else
                {
                    data.Append(chrs, count);
                    return (int)data[bPos++];
                }
            }
        }

        public override string GetString(int begin, int limit)
        {
            return data.GetString(begin, limit);
        }

        public override string ToString()
        {
            return "StringBuilder buffer, encoding: " + this.EncodingName;
        }
    }

    // =============== End ScanBuff-derived classes ==================

    public delegate int BlockReader(char[] block, int index, int number);

    // A delegate factory, serving up a delegate that
    // reads a block of characters from the underlying
    // encoded stream, via a StreamReader object.
    //
    public static class BlockReaderFactory
    {
        public static BlockReader Raw(Stream stream)
        {
            return delegate(char[] block, int index, int number)
            {
                byte[] b = new byte[number];
                int count = stream.Read(b, 0, number);
                int i = 0;
                int j = index;
                for (; i < count; i++, j++)
                    block[j] = (char)b[i];
                return count;
            };
        }

#if (!BYTEMODE)
        public static BlockReader Get(Stream stream, int fallbackCodePage)
        {
            Encoding encoding;
            int preamble = Preamble(stream);

            if (preamble != 0)  // There is a valid BOM here!
                encoding = Encoding.GetEncoding(preamble);
            else if (fallbackCodePage == -1) // Fallback is "raw" bytes
                return Raw(stream);
            else if (fallbackCodePage != -2) // Anything but "guess"
                encoding = Encoding.GetEncoding(fallbackCodePage);
            else // This is the "guess" option
            {
                int guess = new Guesser(stream).GuessCodePage();
                stream.Seek(0, SeekOrigin.Begin);
                if (guess == -1) // ==> this is a 7-bit file
                    encoding = Encoding.ASCII;
                else if (guess == 65001)
                    encoding = Encoding.UTF8;
                else             // ==> use the machine default
                    encoding = Encoding.Default;
            }
            StreamReader reader = new StreamReader(stream, encoding);
            return reader.Read;
        }

        static int Preamble(Stream stream)
        {
            int b0 = stream.ReadByte();
            int b1 = stream.ReadByte();

            if (b0 == 0xfe && b1 == 0xff)
                return 1201; // UTF16BE
            if (b0 == 0xff && b1 == 0xfe)
                return 1200; // UTF16LE

            int b2 = stream.ReadByte();
            if (b0 == 0xef && b1 == 0xbb && b2 == 0xbf)
                return 65001; // UTF8
            //
            // There is no unicode preamble, so we
            // return denoter for the machine default.
            //
            stream.Seek(0, SeekOrigin.Begin);
            return 0;
        }
#endif // !BYTEMODE
    }
#endif // !NOFILES
    #endregion Buffer classes

    // ==============================================================
    // ============      class CodePageHandling         =============
    // ==============================================================
#if (!NOFILES)
    public static class CodePageHandling
    {
        public static int GetCodePage(string option)
        {
            string command = option.ToUpperInvariant();
            if (command.StartsWith("CodePage:", StringComparison.OrdinalIgnoreCase))
                command = command.Substring(9);
            try
            {
                if (command.Equals("RAW"))
                    return -1;
                else if (command.Equals("GUESS"))
                    return -2;
                else if (command.Equals("DEFAULT"))
                    return 0;
                else if (char.IsDigit(command[0]))
                    return int.Parse(command, CultureInfo.InvariantCulture);
                else
                {
                    Encoding enc = Encoding.GetEncoding(command);
                    return enc.CodePage;
                }
            }
            catch (FormatException)
            {
                Console.Error.WriteLine(
                    "Invalid format \"{0}\", using machine default", option);
            }
            catch (ArgumentException)
            {
                Console.Error.WriteLine(
                    "Unknown code page \"{0}\", using machine default", option);
            }
            return 0;
        }
    }
#region guesser
#if (!BYTEMODE)
    // ==============================================================
    // ============          Encoding Guesser           =============
    // ==============================================================

    /// <summary>
    /// This class provides a simple finite state automaton that
    /// scans the file looking for (1) valid UTF-8 byte patterns,
    /// (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
    /// The method then guesses whether it is UTF-8 or maybe some 
    /// local machine default encoding.  This works well for the
    /// various Latin encodings.
    /// </summary>
    internal class Guesser
    {
        ScanBuff buffer;

        public int GuessCodePage() { return Scan(); }

        const int maxAccept = 10;
        const int initial = 0;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int EndToken = 0;

        #region user code
        /* 
         *  Reads the bytes of a file to determine if it is 
         *  UTF-8 or a single-byte code page file.
         */
        public long utfX;
        public long uppr;
        #endregion user code

        int state;
        int currentStart = startState[0];
        int code;

        #region ScannerTables
        static int[] startState = new int[] { 11, 0 };

        #region CharacterMap
        static sbyte[] map = new sbyte[256] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '@' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'P' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '`' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'p' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xC0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xD0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/*   '\xF0' */ 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5 };
        #endregion

        static sbyte[][] nextState = new sbyte[][] {
            new sbyte[] {0, 0, 0, 0, 0, 0},
            new sbyte[] {-1, -1, 10, -1, -1, -1},
            new sbyte[] {-1, -1, -1, -1, -1, -1},
            new sbyte[] {-1, -1, 8, -1, -1, -1},
            new sbyte[] {-1, -1, 5, -1, -1, -1},
            new sbyte[] {-1, -1, 6, -1, -1, -1},
            new sbyte[] {-1, -1, 7, -1, -1, -1},
            null,
            new sbyte[] {-1, -1, 9, -1, -1, -1},
            null,
            null,
            new sbyte[] {-1, 1, 2, 3, 4, 2}
        };


        [SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        // Reason for suppression: cannot have self-reference in array initializer.
        static Guesser()
        {
            nextState[7] = nextState[2];
            nextState[9] = nextState[2];
            nextState[10] = nextState[2];
        }

        int NextState()
        {
            if (code == ScanBuff.EndOfFile)
                return eofNum;
            else
                return nextState[state][map[code]];
        }
        #endregion

        public Guesser(System.IO.Stream file) { SetSource(file); }

        public void SetSource(System.IO.Stream source)
        {
            this.buffer = new BuildBuffer(source);
            code = buffer.Read();
        }

        int Scan()
        {
            for (; ; )
            {
                int next;
                state = currentStart;
                while ((next = NextState()) == goStart)
                    code = buffer.Read();

                state = next;
                code = buffer.Read();

                while ((next = NextState()) > eofNum)
                {
                    state = next;
                    code = buffer.Read();
                }
                if (state <= maxAccept)
                {
                    #region ActionSwitch
#pragma warning disable 162
                    switch (state)
                    {
                        case eofNum:
                            switch (currentStart)
                            {
                                case 11:
                                    if (utfX == 0 && uppr == 0) return -1; /* raw ascii */
                                    else if (uppr * 10 > utfX) return 0;   /* default code page */
                                    else return 65001;                     /* UTF-8 encoding */
                                    break;
                            }
                            return EndToken;
                        case 1: // Recognized '{Upper128}',	Shortest string "\xC0"
                        case 2: // Recognized '{Upper128}',	Shortest string "\x80"
                        case 3: // Recognized '{Upper128}',	Shortest string "\xE0"
                        case 4: // Recognized '{Upper128}',	Shortest string "\xF0"
                            uppr++;
                            break;
                        case 5: // Recognized '{Utf8pfx4}{Utf8cont}',	Shortest string "\xF0\x80"
                            uppr += 2;
                            break;
                        case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}',	Shortest string "\xF0\x80\x80"
                            uppr += 3;
                            break;
                        case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}',	Shortest string "\xF0\x80\x80\x80"
                            utfX += 3;
                            break;
                        case 8: // Recognized '{Utf8pfx3}{Utf8cont}',	Shortest string "\xE0\x80"
                            uppr += 2;
                            break;
                        case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}',	Shortest string "\xE0\x80\x80"
                            utfX += 2;
                            break;
                        case 10: // Recognized '{Utf8pfx2}{Utf8cont}',	Shortest string "\xC0\x80"
                            utfX++;
                            break;
                        default:
                            break;
                    }
#pragma warning restore 162
                    #endregion
                }
            }
        }
    } // end class Guesser
    
#endif // !BYTEMODE
#endregion
#endif // !NOFILES

// End of code copied from embedded resource

} // end namespace
